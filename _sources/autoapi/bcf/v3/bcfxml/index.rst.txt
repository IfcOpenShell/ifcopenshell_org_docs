:py:mod:`bcf.v3.bcfxml`
=======================

.. py:module:: bcf.v3.bcfxml

.. autoapi-nested-parse::

   BCF XML V3 handlers.



Module Contents
---------------

.. py:class:: BcfXml(filename: Optional[pathlib.Path] = None, xml_handler: Optional[bcf.xml_parser.AbstractXmlParserSerializer] = None)

   BCF XML handler.


   .. py:method:: add_comment(_topic: bcf.v3.model.Topic, _comment: Optional[bcf.v3.model.Comment] = None) -> None

      Deprecated method.



   .. py:method:: add_topic(title: str, description: str, author: str, topic_type: str = '', topic_status: str = '') -> bcf.v3.topic.TopicHandler

      Add a new topic to the BCF.

      Args:
          title: The title of the topic.
          description: The description of the topic.
          author: The author of the topic.
          topic_type: The type of the topic.
          topic_status: The status of the topic.

      Returns:
          The newly created topic wrapped inside a TopicHandler object.



   .. py:method:: close() -> None


   .. py:method:: create_new(project_name: Optional[str] = None, extensions: Optional[bcf.v3.model.Extensions] = None, xml_handler: Optional[bcf.xml_parser.AbstractXmlParserSerializer] = None) -> BcfXml
      :classmethod:


      Create a new BcfXml object.

      Args:
          project_name: The name of the project.
          extensions: The Extension XML object. Defaults to an empty one.
          xml_handler: XML parser and serializer.

      Returns:
          A new BcfXml object.



   .. py:method:: edit_comment() -> None

      Deprecated method.



   .. py:method:: edit_project() -> None

      Deprecated method.



   .. py:method:: edit_topic() -> None

      Deprecated method.



   .. py:method:: edit_version() -> None

      Deprecated method.



   .. py:method:: get_header(guid: str) -> Optional[bcf.v3.model.Header]

      Return the header of a Topic by its GUID.



   .. py:method:: get_project(_filepath: Optional[str] = None) -> Optional[bcf.v3.model.Project]

      Deprecated method.



   .. py:method:: get_topic(guid: str) -> bcf.v3.topic.TopicHandler

      Return a topic by its GUID.



   .. py:method:: get_topics() -> dict[str, bcf.v3.topic.TopicHandler]

      Deprecated method.



   .. py:method:: get_version() -> str


   .. py:method:: load(filename: pathlib.Path, xml_handler: Optional[bcf.xml_parser.AbstractXmlParserSerializer] = None) -> Optional[BcfXml]
      :classmethod:


      Create a BcfXml object from a file.

      Args:
          filename: Path to the file.
          xml_handler: XML parser and serializer.

      Returns:
          A BcfXml object with the file contents.

      Raises:
          ValueError: If the file name is null or empty



   .. py:method:: new_project() -> BcfXml

      Deprecated method.



   .. py:method:: save(filename: Optional[pathlib.Path] = None, keep_open: bool = False) -> None

      Save the BCF file to the given filename.



   .. py:method:: save_project(filepath: pathlib.Path) -> None

      Deprecated method.



   .. py:property:: documents
      :type: Optional[bcf.v3.document.DocumentsHandler]

      Documents stored in the BCF file.



   .. py:property:: extensions
      :type: Optional[bcf.v3.model.Extensions]

      BCF extensions.



   .. py:property:: project
      :type: Optional[bcf.v3.model.Project]

      BCF project.



   .. py:property:: project_info
      :type: Optional[bcf.v3.model.ProjectInfo]

      BCF project information.



   .. py:property:: topics
      :type: dict[str, bcf.v3.topic.TopicHandler]

      BCF topics.



   .. py:property:: version
      :type: bcf.v3.model.Version

      Bcf Version.



.. py:data:: T

