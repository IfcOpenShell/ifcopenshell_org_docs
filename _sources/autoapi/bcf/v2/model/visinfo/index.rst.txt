:py:mod:`bcf.v2.model.visinfo`
==============================

.. py:module:: bcf.v2.model.visinfo


Module Contents
---------------

.. py:class:: BitmapFormat(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: JPG
      :value: 'JPG'



   .. py:attribute:: PNG
      :value: 'PNG'



.. py:class:: ClippingPlane

   .. py:attribute:: direction
      :type:  Direction


   .. py:attribute:: location
      :type:  Point


.. py:class:: Component

   .. py:attribute:: authoring_tool_id
      :type:  Optional[str]
      :value: None



   .. py:attribute:: ifc_guid
      :type:  Optional[str]
      :value: None



   .. py:attribute:: originating_system
      :type:  Optional[str]
      :value: None



.. py:class:: ComponentColoring

   .. py:attribute:: color
      :type:  list[ComponentColoringColor]
      :value: []



.. py:class:: ComponentColoringColor

   .. py:class:: Meta

      .. py:attribute:: global_type
         :value: False




   .. py:attribute:: color
      :type:  Optional[str]
      :value: None



   .. py:attribute:: component
      :type:  list[Component]
      :value: []



.. py:class:: ComponentSelection

   .. py:attribute:: component
      :type:  list[Component]
      :value: []



.. py:class:: ComponentVisibility

   .. py:attribute:: default_visibility
      :type:  Optional[bool]
      :value: None



   .. py:attribute:: exceptions
      :type:  Optional[ComponentVisibilityExceptions]
      :value: None



.. py:class:: ComponentVisibilityExceptions

   .. py:class:: Meta

      .. py:attribute:: global_type
         :value: False




   .. py:attribute:: component
      :type:  list[Component]
      :value: []



.. py:class:: Components

   .. py:attribute:: coloring
      :type:  Optional[ComponentColoring]
      :value: None



   .. py:attribute:: selection
      :type:  Optional[ComponentSelection]
      :value: None



   .. py:attribute:: view_setup_hints
      :type:  Optional[ViewSetupHints]
      :value: None



   .. py:attribute:: visibility
      :type:  ComponentVisibility


.. py:class:: Direction

   .. py:attribute:: x
      :type:  float


   .. py:attribute:: y
      :type:  float


   .. py:attribute:: z
      :type:  float


.. py:class:: Line

   .. py:attribute:: end_point
      :type:  Point


   .. py:attribute:: start_point
      :type:  Point


.. py:class:: OrthogonalCamera

   Attributes
       camera_view_point:
       camera_direction:
       camera_up_vector:
       view_to_world_scale: view's visible size in meters


   .. py:attribute:: camera_direction
      :type:  Direction


   .. py:attribute:: camera_up_vector
      :type:  Direction


   .. py:attribute:: camera_view_point
      :type:  Point


   .. py:attribute:: view_to_world_scale
      :type:  float


.. py:class:: PerspectiveCamera

   Attributes
       camera_view_point:
       camera_direction:
       camera_up_vector:
       field_of_view: It is currently limited to a value between 45 and
           60 degrees. This limitation will be dropped in the next
           release and viewers should be expect values outside this
           range in current implementations.


   .. py:attribute:: camera_direction
      :type:  Direction


   .. py:attribute:: camera_up_vector
      :type:  Direction


   .. py:attribute:: camera_view_point
      :type:  Point


   .. py:attribute:: field_of_view
      :type:  float


.. py:class:: Point

   .. py:attribute:: x
      :type:  float


   .. py:attribute:: y
      :type:  float


   .. py:attribute:: z
      :type:  float


.. py:class:: ViewSetupHints

   .. py:attribute:: openings_visible
      :type:  Optional[bool]
      :value: None



   .. py:attribute:: space_boundaries_visible
      :type:  Optional[bool]
      :value: None



   .. py:attribute:: spaces_visible
      :type:  Optional[bool]
      :value: None



.. py:class:: VisualizationInfo

   VisualizationInfo documentation.


   .. py:attribute:: bitmap
      :type:  list[VisualizationInfoBitmap]
      :value: []



   .. py:attribute:: clipping_planes
      :type:  Optional[VisualizationInfoClippingPlanes]
      :value: None



   .. py:attribute:: components
      :type:  Optional[Components]
      :value: None



   .. py:attribute:: guid
      :type:  str


   .. py:attribute:: lines
      :type:  Optional[VisualizationInfoLines]
      :value: None



   .. py:attribute:: orthogonal_camera
      :type:  Optional[OrthogonalCamera]
      :value: None



   .. py:attribute:: perspective_camera
      :type:  Optional[PerspectiveCamera]
      :value: None



.. py:class:: VisualizationInfoBitmap

   .. py:class:: Meta

      .. py:attribute:: global_type
         :value: False




   .. py:attribute:: bitmap
      :type:  BitmapFormat


   .. py:attribute:: height
      :type:  float


   .. py:attribute:: location
      :type:  Point


   .. py:attribute:: normal
      :type:  Direction


   .. py:attribute:: reference
      :type:  str


   .. py:attribute:: up
      :type:  Direction


.. py:class:: VisualizationInfoClippingPlanes

   .. py:class:: Meta

      .. py:attribute:: global_type
         :value: False




   .. py:attribute:: clipping_plane
      :type:  list[ClippingPlane]
      :value: []



.. py:class:: VisualizationInfoLines

   .. py:class:: Meta

      .. py:attribute:: global_type
         :value: False




   .. py:attribute:: line
      :type:  list[Line]
      :value: []



.. py:data:: DATACLASS_KWARGS

