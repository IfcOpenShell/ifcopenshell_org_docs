:py:mod:`bcf.v2.bcfxml`
=======================

.. py:module:: bcf.v2.bcfxml

.. autoapi-nested-parse::

   BCF XML V2 handler.



Module Contents
---------------

.. py:class:: BcfXml(filename: Optional[pathlib.Path] = None, xml_handler: Optional[bcf.xml_parser.AbstractXmlParserSerializer] = None)


   BCF XML handler.

   .. py:property:: extension_schema
      :type: Optional[bytes]


   .. py:property:: project
      :type: Optional[bcf.v2.model.Project]

      BCF project.


   .. py:property:: project_info
      :type: Optional[bcf.v2.model.ProjectExtension]

      BCF project information.


   .. py:property:: topics
      :type: dict[str, bcf.v2.topic.TopicHandler]

      BCF topics.


   .. py:property:: version
      :type: bcf.v2.model.Version

      Bcf Version.


   .. py:method:: __del__() -> None


   .. py:method:: __enter__() -> BcfXml


   .. py:method:: __eq__(other: object) -> bool | NoReturn

      Return self==value.


   .. py:method:: __exit__(*args: Any) -> None


   .. py:method:: _load_topics(zip_file: zipfile.ZipFile, xml_handler: bcf.xml_parser.AbstractXmlParserSerializer) -> dict[str, bcf.v2.topic.TopicHandler]


   .. py:method:: _load_zip_file() -> Optional[zipfile.ZipFile]


   .. py:method:: _save_project(destination_zip: bcf.inmemory_zipfile.ZipFileInterface) -> None


   .. py:method:: _save_topics(destination_zip: bcf.inmemory_zipfile.ZipFileInterface) -> None


   .. py:method:: _save_version(destination_zip: bcf.inmemory_zipfile.ZipFileInterface) -> None


   .. py:method:: _save_xml(destination_zip: bcf.inmemory_zipfile.ZipFileInterface, inner_file: str, xml_obj: Any) -> None


   .. py:method:: _smart_save_xml(destination_zip: bcf.inmemory_zipfile.ZipFileInterface, item: Any, target: str) -> None


   .. py:method:: add_comment(_topic: bcf.v2.model.Topic, _comment: Optional[bcf.v2.model.Comment] = None) -> None

      Deprecated method.


   .. py:method:: add_topic(title: str, description: str, author: str, topic_type: str = '', topic_status: str = '') -> bcf.v2.topic.TopicHandler

      Add a new topic to the BCF.

      Args:
          title: The title of the topic.
          description: The description of the topic.
          author: The author of the topic.
          topic_type: The type of the topic.
          topic_status: The status of the topic.

      Returns:
          The newly created topic wrapped inside a TopicHandler object.


   .. py:method:: close() -> None


   .. py:method:: create_new(project_name: Optional[str] = None, xml_handler: Optional[bcf.xml_parser.AbstractXmlParserSerializer] = None) -> BcfXml
      :classmethod:

      Create a new BcfXml object.

      Args:
          project_name: The name of the project.
          xml_handler: XML parser and serializer.

      Returns:
          A new BcfXml object.


   .. py:method:: edit_comment() -> None

      Deprecated method.


   .. py:method:: edit_project() -> None

      Deprecated method.


   .. py:method:: edit_topic() -> None

      Deprecated method.


   .. py:method:: edit_version() -> None

      Deprecated method.


   .. py:method:: get_header(guid: str) -> Optional[bcf.v2.model.Header]

      Return the header of a Topic by its GUID.


   .. py:method:: get_project(_filepath: Optional[str] = None) -> Optional[bcf.v2.model.Project]

      Deprecated method.


   .. py:method:: get_topic(guid: str) -> bcf.v2.topic.TopicHandler

      Return a topic by its GUID.


   .. py:method:: get_topics() -> dict[str, bcf.v2.topic.TopicHandler]

      Deprecated method.


   .. py:method:: get_version() -> Optional[str]


   .. py:method:: load(filename: pathlib.Path, xml_handler: Optional[bcf.xml_parser.AbstractXmlParserSerializer] = None) -> Optional[BcfXml]
      :classmethod:

      Create a BcfXml object from a file.

      Args:
          filename: Path to the file.
          xml_handler: XML parser and serializer.

      Returns:
          A BcfXml object with the file contents.

      Raises:
          ValueError: If the file name is null or empty


   .. py:method:: new_project() -> BcfXml

      Deprecated method.


   .. py:method:: save(filename: Optional[pathlib.Path] = None, keep_open: bool = False) -> None

      Save the BCF file to the given filename.


   .. py:method:: save_project(filepath: pathlib.Path) -> None

      Deprecated method.



.. py:data:: T

   

