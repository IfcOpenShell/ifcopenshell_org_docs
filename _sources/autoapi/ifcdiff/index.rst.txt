:py:mod:`ifcdiff`
=================

.. py:module:: ifcdiff


Module Contents
---------------

.. py:class:: DiffTerminator


   .. py:method:: give_up_diffing(level, diff_instance) -> bool


   .. py:method:: match(level) -> bool



.. py:class:: IfcDiff(old, new, relationships=None, is_shallow=True, filter_elements=None)


   Main IfcDiff application

   If you are using IfcDiff as a library, this is the class you should use.

   :param old: IFC file object for the old model
   :type old: ifcopenshell.file.file
   :param new: IFC file object for the old model
   :type new: ifcopenshell.file.file
   :param relationships: List of relationships to check. None means that only
       geometry is compared.
   :type relationships: list[string]
   :param is_shallow: True if you want only the first difference to be listed.
       False if you want all differences to be checked. Choosing False means
       that comparisons will take longer.
   :type is_shallow: bool
   :param filter_elements: An IFC filter query if you only want to compare a
       subset of elements. For example: ``IfcWall`` to only compare walls.
   :type filter_elements: string

   Example::

       from ifcdiff import IfcDiff

       ifc_diff = IfcDiff("/path/to/old.ifc", "/path/to/new.ifc", "/path/to/diff.json")
       ifc_diff.diff()
       print(ifc_diff.change_register)
       ifc_diff.export()

   .. py:method:: diff()


   .. py:method:: diff_element(old, new)


   .. py:method:: diff_element_basic_geometry(old, new)


   .. py:method:: diff_element_relationships(old, new)


   .. py:method:: diff_representation(old_rep_id, new_rep_id)


   .. py:method:: diff_representation_item(old_item, new_item)


   .. py:method:: export(path)


   .. py:method:: get_precision()


   .. py:method:: get_representation_id(element)


   .. py:method:: get_settings(ifc)


   .. py:method:: json_dump_default(obj)


   .. py:method:: summarise_shapes(ifc, elements)



.. py:data:: parser

   

