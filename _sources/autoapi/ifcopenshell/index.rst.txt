:py:mod:`ifcopenshell`
======================

.. py:module:: ifcopenshell

.. autoapi-nested-parse::

   The entry module for IfcOpenShell

   Typically used for opening an IFC via a filepath, or accessing one of the
   submodules.

   Example:

   .. code:: python

       import ifcopenshell
       print(ifcopenshell.version) # v0.7.0-1b1fd1e6
       model = ifcopenshell.open("/path/to/model.ifc")



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   api/index.rst
   express/index.rst
   geom/index.rst
   util/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   alignment/index.rst
   draw/index.rst
   entity_instance/index.rst
   file/index.rst
   guid/index.rst
   main/index.rst
   settings/index.rst
   sql/index.rst
   stream/index.rst
   template/index.rst
   transition_curve/index.rst
   validate/index.rst


Package Contents
----------------

.. py:exception:: Error


   Bases: :py:obj:`Exception`

   Error used when a generic problem occurs

   Initialize self.  See help(type(self)) for accurate signature.


.. py:exception:: SchemaError


   Bases: :py:obj:`Error`

   Error used when an IFC schema related problem occurs

   Initialize self.  See help(type(self)) for accurate signature.


.. py:function:: create_entity(type, schema='IFC4', *args, **kwargs)

   Creates a new IFC entity that does not belong to an IFC file object

   Note that it is more common to create entities within a existing file
   object. See :meth:`ifcopenshell.file.file.create_entity`.

   :param type: Case insensitive name of the IFC class
   :type type: string
   :param schema: The IFC schema identifier
   :type schema: string
   :param args: The positional arguments of the IFC class
   :param kwargs: The keyword arguments of the IFC class
   :returns: An entity instance
   :rtype: ifcopenshell.entity_instance.entity_instance

   Example:

   .. code:: python

       person = ifcopenshell.create_entity("IfcPerson") # #0=IfcPerson($,$,$,$,$,$,$,$)
       model = ifcopenshell.file()
       model.add(person) # #1=IfcPerson($,$,$,$,$,$,$,$)


.. py:function:: open(path: os.PathLike | str, format: str = None, should_stream: bool = False) -> file.file

   Loads an IFC dataset from a filepath

   You can specify a file format. If no format is given, it is guessed from its extension.
   Currently supported specified format : .ifc | .ifcZIP | .ifcXML

   Examples:
       model = ifcopenshell.open("/path/to/model.ifc")
       model = ifcopenshell.open("/path/to/model.ifcXML")
       model = ifcopenshell.open("/path/to/model.any_extension", ".ifc")


.. py:function:: register_schema(schema)

   Registers a custom IFC schema

   :param schema: A schema object
   :type schema: ifcopenshell.express.schema_class.SchemaClass

   Example:

   .. code:: python

       schema = ifcopenshell.express.parse("/path/to/ifc-custom.exp")
       ifcopenshell.register_schema(schema)
       ifcopenshell.file(schema="IFC_CUSTOM")


.. py:function:: schema_by_name(schema=None, schema_version=None)

   Returns an object allowing you to query the IFC schema itself

   :param schema: Which IFC schema to use, chosen from "IFC2X3", "IFC4",
       or "IFC4X3". These refer to the ISO approved versions of IFC.
   :type schema: string
   :param schema_version: If you want to specify an exact version of IFC
       that may not be an ISO approved version, use this argument instead
       of ``schema``. IFC versions on technical.buildingsmart.org are
       described using 4 integers representing the major, minor, addendum,
       and corrigendum number. For example, (4, 0, 2, 1) refers to IFC4
       ADD2 TC1, which is the official version approved by ISO when people
       refer to "IFC4". Generally you should not use this argument unless
       you are testing non-ISO IFC releases.
   :type schema_version: tuple[int]


.. py:data:: NO_HEADER

   

.. py:data:: READ_ERROR

   

.. py:data:: UNSUPPORTED_SCHEMA

   

.. py:data:: platform_architecture
   :value: '32bit'

   

.. py:data:: platform_system

   

.. py:data:: python_distribution

   

.. py:data:: python_version_tuple

   

