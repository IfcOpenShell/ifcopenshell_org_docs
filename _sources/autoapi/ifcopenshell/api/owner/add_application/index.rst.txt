:py:mod:`ifcopenshell.api.owner.add_application`
================================================

.. py:module:: ifcopenshell.api.owner.add_application


Module Contents
---------------

.. py:class:: Usecase

   .. py:method:: create_application_organisation()


   .. py:method:: execute()


   .. py:attribute:: file
      :type:  ifcopenshell.file


   .. py:attribute:: settings
      :type:  dict[str, Any]


.. py:function:: add_application(file: ifcopenshell.file, application_developer: Optional[ifcopenshell.entity_instance] = None, version: Optional[str] = None, application_full_name: str = 'IfcOpenShell', application_identifier: str = 'IfcOpenShell') -> ifcopenshell.entity_instance

   Adds a new application

   IFC data may be associated with an authoring application to identify
   which application was responsible for editing or authoring the data. An
   application is defined by the developing organisation, as well as a full
   name and identifier. This is akin to how web browsers have an
   identification string.

   :param application_developer: The IfcOrganization responsible for
       creating the application. Defaults to generating an IfcOpenShell
       organisation if none is provided.
   :type application_developer: ifcopenshell.entity_instance, optional
   :param version: The version of the application. Defaults to the
       ifcopenshell.version data if not specified.
   :type version: str, optional
   :param application_full_name: The name of the application
   :type application_full_name: str, optional
   :param application_identifier: An identification string for the
       application intended for computers to read.
   :type application_identifier: str, optional
   :return: The newly created IfcApplication
   :rtype: ifcopenshell.entity_instance

   Example:

   .. code:: python

       application = ifcopenshell.api.owner.add_application(model)


