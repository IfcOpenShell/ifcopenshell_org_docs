:py:mod:`ifcopenshell.api.boundary.assign_connection_geometry`
==============================================================

.. py:module:: ifcopenshell.api.boundary.assign_connection_geometry


Module Contents
---------------

.. py:class:: Usecase

   .. py:method:: close_polyline(points: tuple[ifcopenshell.entity_instance, Ellipsis]) -> tuple[ifcopenshell.entity_instance, Ellipsis]


   .. py:method:: create_plane(location: numpy.typing.NDArray, axis: numpy.typing.NDArray, ref_direction: numpy.typing.NDArray) -> ifcopenshell.entity_instance


   .. py:method:: create_point(point: numpy.typing.NDArray) -> ifcopenshell.entity_instance


   .. py:method:: create_polyline(points: numpy.typing.NDArray) -> ifcopenshell.entity_instance


   .. py:method:: execute()


   .. py:attribute:: axis
      :type:  numpy.typing.NDArray


   .. py:attribute:: file
      :type:  ifcopenshell.file


   .. py:attribute:: inner_boundaries
      :type:  numpy.typing.NDArray


   .. py:attribute:: location
      :type:  numpy.typing.NDArray


   .. py:attribute:: outer_boundary
      :type:  numpy.typing.NDArray


   .. py:attribute:: ref_direction
      :type:  numpy.typing.NDArray


   .. py:attribute:: rel_space_boundary
      :type:  ifcopenshell.entity_instance


   .. py:attribute:: unit_scale
      :type:  float


.. py:function:: assign_connection_geometry(file: ifcopenshell.file, rel_space_boundary: ifcopenshell.entity_instance, outer_boundary: ifcopenshell.util.shape_builder.SequenceOfVectors, location: tuple[float, float, float], axis: tuple[float, float, float], ref_direction: tuple[float, float, float], inner_boundaries: Optional[ifcopenshell.util.shape_builder.SequenceOfVectors] = None, unit_scale: Optional[float] = None) -> None

   Create and assign a connection geometry to a space boundary relationship

   A space boundary may optionally have a plane that represents how that
   space is adjacent to another space, known as the connection geometry.
   You may specify this plane in terms of an outer boundary polyline, zero
   or more inner boundaries (such as for windows), and a positional matrix
   for the orientation of the plane.

   :param rel_space_boundary: The space boundary relationship to assign the
       connection geometry to.
   :param outer_boundary: A list of 2D points representing an open
       polyline.  The last point will connect to the first point. Each
       point is represented by an interable of 2 floats. The coordinates of
       the points are relative to the positional matrix arguments.
   :param inner_boundaries: A list of zero or more inner boundaries to use
       for the plane. Each boundary is represented by an open polyline, as
       defined by the outer_boundary argument.
   :param location: The local origin of the connection geometry, defined as
       an XYZ coordinate relative to the placement of the space that is
       being bounded.
   :param axis: The local X axis of the connection geometry, defined as an
       XYZ vector relative to the placement of the space that is being
       bounded.
   :param ref_direction: The local Z axis of the connection geometry,
       defined as an XYZ vector relative to the placement of the space that
       is being bounded. The Y vector is automatically derived using the
       right hand rule.
   :param unit_scale: The unit scale as calculated by
       ifcopenshell.util.unit.calculate_unit_scale. If not provided, it
       will be automatically calculated for you.
   :type unit_scale: float, optional
   :return: None

   Example:

   .. code:: python

       ifcopenshell.api.boundary.assign_connection_geometry(model,
           rel_space_boundary=element,
           outer_boundary=[(0., 0.), (1., 0.), (1., 1.), (0., 1.)],
           location=[0., 0., 0.], axis=[1., 0., 0.], ref_direction=[0., 0., 1.],
           )


