:py:mod:`ifcopenshell.api.constraint`
=====================================

.. py:module:: ifcopenshell.api.constraint

.. autoapi-nested-parse::

   Constraints are an advanced feature allowing you to specify parametric
   limits on properties

   Warning: usage of constraints are mostly untested in real life applications.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   add_metric/index.rst
   add_metric_reference/index.rst
   add_objective/index.rst
   assign_constraint/index.rst
   edit_metric/index.rst
   edit_objective/index.rst
   remove_constraint/index.rst
   remove_metric/index.rst
   unassign_constraint/index.rst


Package Contents
----------------

.. py:function:: add_metric(file: ifcopenshell.file, objective: ifcopenshell.entity_instance) -> ifcopenshell.entity_instance

   Add a new metric benchmark

   Qualitative constraints may have a series of quantitative benchmarks
   linked to it known as metrics. Metrics may be parametrically linked to
   computed model properties or quantities. Metrics need to be satisfied
   to meet the objective of the constraint.

   :param objective: The IfcObjective that this metric is a benchmark of.
   :return: The newly created IfcMetric entity

   Example:

   .. code:: python

       objective = ifcopenshell.api.constraint.add_objective(model)
       metric = ifcopenshell.api.constraint.add_metric(model,
           objective=objective)


.. py:function:: add_metric_reference(file: ifcopenshell.file, metric: ifcopenshell.entity_instance, reference_path: str) -> list[ifcopenshell.entity_instance]

   Adds a chain of references to a metric. The reference path is a string of the form "attribute.attribute.attribute"
   Used to reference a value of an attribute of an instance through a metric objective entity.


.. py:function:: add_objective(file: ifcopenshell.file) -> ifcopenshell.entity_instance

   Add a new objective constraint

   Parametric constraints may be defined by the user. The constraint is defined
   by first creating an objective describing the purpose of the constraint and
   whether it is a hard or soft constraint. Later on, metrics may be added to
   check whether the constraint has been met by connecting it to properties and
   quantities. See ifcopenshell.api.constraint.add_metric for more information.

   :return: The newly created IfcObjective entity

   Example:

   .. code:: python

       # Create a new objective for code compliance requirements
       objective = ifcopenshell.api.constraint.add_objective(model)
       objective.ConstraintGrade = "ADVISORY"
       objective.ObjectiveQualifier = "CODECOMPLIANCE"
       # Note: the objective right now is purely qualitative and for
       # information purposes. You may wish to add quantiative metrics.


.. py:function:: assign_constraint(file: ifcopenshell.file, products: list[ifcopenshell.entity_instance], constraint: ifcopenshell.entity_instance) -> Union[ifcopenshell.entity_instance, None]

   Assigns a constraint to a list of products

   This assigns a relationship between a product and a constraint, so that
   when a product's properties and quantities do not match the requirements
   of the constraint's metrics, results can be flagged.

   It is assumed (but not explicit in the IFC documentation) that
   constraints are inherited from the type. This way, it is not necessary
   to create lots of constraint assignments.

   :param products: The list of products the constraint applies to. This is anything
       which can have properties or quantities.
   :param constraint: The IfcObjective constraint
   :return: The new or updated IfcRelAssociatesConstraint relationship
       or `None` if `products` was an empty list.


.. py:function:: edit_metric(file: ifcopenshell.file, metric: ifcopenshell.entity_instance, attributes: dict[str, Any]) -> None

   Edit the attributes of a metric

   For more information about the attributes and data types of an
   IfcMetric, consult the IFC documentation.

   :param metric: The IfcMetric you want to edit.
   :param attributes: a dictionary of attribute names and values.
   :return: None

   Example:

   .. code:: python

       objective = ifcopenshell.api.constraint.add_objective(model)
       metric = ifcopenshell.api.constraint.add_metric(model,
           objective=objective)
       ifcopenshell.api.constraint.edit_metric(model,
           metric=metric, attributes={"ConstraintGrade": "HARD"})


.. py:function:: edit_objective(file: ifcopenshell.file, objective: ifcopenshell.entity_instance, attributes: dict[str, Any]) -> None

   Edit the attributes of a objective

   For more information about the attributes and data types of an
   IfcObjective, consult the IFC documentation.

   :param objective: The IfcObjective you want to edit.
   :param attributes: a dictionary of attribute names and values.
   :return: None

   Example:

   .. code:: python

       objective = ifcopenshell.api.constraint.add_objective(model)
       ifcopenshell.api.constraint.edit_objective(model,
           objective=objective, attributes={"ConstraintGrade": "HARD"})


.. py:function:: remove_constraint(file: ifcopenshell.file, constraint: ifcopenshell.entity_instance) -> None

   Remove a constraint (typically an objective)

   Removes a constraint definition and all of its associations to any
   products. Typically this would be an IfcObjective, although technically
   you can associate IfcMetrics ith products too, though the meaning may be
   unclear.

   :param constraint: The IfcObjective you want to remove.
   :type constraint: ifcopenshell.entity_instance
   :return: None
   :rtype: None

   Example:

   .. code:: python

       objective = ifcopenshell.api.constraint.add_objective(model)
       ifcopenshell.api.constraint.remove_constraint(model,
           constraint=objective)


.. py:function:: remove_metric(file: ifcopenshell.file, metric: ifcopenshell.entity_instance) -> None

   Remove a metric benchmark

   Removes a metric benchmark and all of its associations to any products
   and objectives.

   :param metric: The IfcMetric you want to remove.
   :type metric: ifcopenshell.entity_instance
   :return: None
   :rtype: None

   Example:

   .. code:: python

       objective = ifcopenshell.api.constraint.add_objective(model)
       metric = ifcopenshell.api.constraint.add_metric(model,
           objective=objective)
       ifcopenshell.api.constraint.remove_metric(model,
           metric=metric)


.. py:function:: unassign_constraint(file: ifcopenshell.file, products: list[ifcopenshell.entity_instance], constraint: ifcopenshell.entity_instance) -> None

   Unassigns a constraint from a list of products

   The constraint will not be deleted and is available to be assigned to
   other products.

   :param products: The list of products the constraint applies to.
   :param constraint: The IfcObjective constraint
   :return: None


