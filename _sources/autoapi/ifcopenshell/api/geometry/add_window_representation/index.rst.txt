:py:mod:`ifcopenshell.api.geometry.add_window_representation`
=============================================================

.. py:module:: ifcopenshell.api.geometry.add_window_representation


Module Contents
---------------

.. py:class:: Usecase

   .. py:method:: convert_si_to_unit(value)


   .. py:method:: execute()


.. py:class:: WindowLiningProperties

   .. py:method:: initialize_properties(unit_scale: float) -> None


   .. py:attribute:: FirstMullionOffset
      :type:  Optional[float]
      :value: None


      Distance from the first lining to the mullion center. Optional, defaults to 300mm.



   .. py:attribute:: FirstTransomOffset
      :type:  Optional[float]
      :value: None


      Optional, defaults to 300mm.



   .. py:attribute:: LiningDepth
      :type:  Optional[float]
      :value: None


      Optional, defaults to 50mm.



   .. py:attribute:: LiningOffset
      :type:  Optional[float]
      :value: None


      Offset to the wall. Optional, defaults to 50mm.



   .. py:attribute:: LiningThickness
      :type:  Optional[float]
      :value: None


      Optional, defaults to 50mm.



   .. py:attribute:: LiningToPanelOffsetX
      :type:  Optional[float]
      :value: None


      Offset from the wall. Optional, defaults to 25mm.



   .. py:attribute:: LiningToPanelOffsetY
      :type:  Optional[float]
      :value: None


      Offset from the lining. Optional, defaults to 25mm.



   .. py:attribute:: MullionThickness
      :type:  Optional[float]
      :value: None


      Mullion thickness (horizontal distance between panels).

      Applies to windows of types: DoublePanelVertical, TriplePanelBottom, TriplePanelTop,
      TriplePanelLeft, TriplePanelRight.

      Optional, defaults to 50mm.



   .. py:attribute:: SecondMullionOffset
      :type:  Optional[float]
      :value: None


      Distance from the first lining to the second mullion center. 

      Applies to windows of type: TriplePanelVertical.

      Optional, defaults to 450mm.



   .. py:attribute:: SecondTransomOffset
      :type:  Optional[float]
      :value: None


      Applies to windows of type: TriplePanelHorizontal.
      Optional, defaults to 600mm.



   .. py:attribute:: ShapeAspectStyle
      :type:  None
      :value: None


      Optional. Deprecated argument.



   .. py:attribute:: TransomThickness
      :type:  Optional[float]
      :value: None


      Transom thickness (vertical distance between panels), works similar way to mullions.

      Applies to windows of types:DoublePanelHorizontal, TriplePanelBottom, TriplePanelTop,
      TriplePanelLeft, TriplePanelRight.

      Optional, defaults to 50mm.



.. py:class:: WindowPanelProperties

   .. py:method:: initialize_properties(unit_scale: float) -> None


   .. py:attribute:: FrameDepth
      :type:  Optional[float]
      :value: None


      Frame thickness by Y axis. Optional, defaults to 35 mm.



   .. py:attribute:: FrameThickness
      :type:  Optional[float]
      :value: None


      Frame thickness by X axis. Optional, defaults to 35 mm.



   .. py:attribute:: PanelOperation
      :type:  None
      :value: None


      Optional, value is never used.
      Defines the basic ways to describe how window panels operate.



   .. py:attribute:: PanelPosition
      :type:  None
      :value: None


      Optional, value is never used



   .. py:attribute:: ShapeAspectStyle
      :type:  None
      :value: None


      Optional. Deprecated argument.



.. py:function:: add_window_representation(file: ifcopenshell.file, *, context: ifcopenshell.entity_instance, overall_height: Optional[float] = None, overall_width: Optional[float] = None, partition_type: Literal['SINGLE_PANEL', 'DOUBLE_PANEL_HORIZONTAL', 'DOUBLE_PANEL_VERTICAL', 'TRIPLE_PANEL_BOTTOM', 'TRIPLE_PANEL_HORIZONTAL', 'TRIPLE_PANEL_LEFT', 'TRIPLE_PANEL_RIGHT', 'TRIPLE_PANEL_TOP', 'TRIPLE_PANEL_VERTICAL'] = 'SINGLE_PANEL', lining_properties: Optional[Union[WindowLiningProperties, dict[str, Any]]] = None, panel_properties: Optional[list[Union[WindowPanelProperties, dict[str, Any]]]] = None, unit_scale: Optional[float] = None) -> ifcopenshell.entity_instance

   units in usecase_settings expected to be in ifc project units

   :param context: IfcGeometricRepresentationContext for the representation.
   :type context: ifcopenshell.entity_instance
   :param overall_height: Overall window height. Defaults to 0.9m.
   :type overall_height: float, optional
   :param overall_width: Overall window width. Defaults to 0.6m.
   :type overall_width: float, optional
   :param partition_type: Type of the window. Defaults to SINGLE_PANEL.
   :type partition_type: str, optional
   :param lining_properties: WindowLiningProperties or a dictionary to create one.
       See WindowLiningProperties description for details.
   :type lining_properties: Union[WindowLiningProperties, dict[str, Any]]]
   :param panel_properties: A list of WindowPanelProperties or dictionaries to create one.
       See WindowPanelProperties description for details.
   :type panel_properties: list[Union[WindowPanelProperties, dict[str, Any]]]]
   :param unit_scale: The unit scale as calculated by
       ifcopenshell.util.unit.calculate_unit_scale. If not provided, it
       will be automatically calculated for you.
   :type unit_scale: float, optional
   :return: IfcShapeRepresentation for a window.
   :rtype: ifcopenshell.entity_instance



.. py:function:: create_ifc_window(builder, lining_size: mathutils.Vector, lining_thickness: list, lining_to_panel_offset_x, lining_to_panel_offset_y_full, frame_size: mathutils.Vector, frame_thickness, glass_thickness, position: mathutils.Vector, x_offsets: list = None)

   `lining_thickness` and `x_offsets` are expected to be defined as a list,
   similarly to `create_ifc_window_frame_simple` `thickness` argument


.. py:function:: create_ifc_window_frame_simple(builder: ifcopenshell.util.shape_builder.ShapeBuilder, size: mathutils.Vector, thickness: list, position: mathutils.Vector = V(0, 0, 0).freeze())

   `thickness` of the profile is defined as list in the following order:
   `(LEFT, TOP, RIGHT, BOTTOM)`

   `thickness` can be also defined just as 1 float value.


.. py:function:: mm(x: float) -> float

   mm to meters shortcut for readability


.. py:function:: window_l_shape_check(lining_to_panel_offset_y_full, lining_depth, lining_to_panel_offset_x: list, lining_thickness: list)

   `lining_thickness` and `lining_to_panel_offset_x` expected to be defined as a list,
   similarly to `create_ifc_window_frame_simple` `thickness` argument


.. py:data:: DEFAULT_PANEL_SCHEMAS

