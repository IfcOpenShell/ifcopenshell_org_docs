:py:mod:`ifcopenshell.api.profile`
==================================

.. py:module:: ifcopenshell.api.profile

.. autoapi-nested-parse::

   Handles the definition of cross sectional profiles

   Maintaining a clean profile library is important for structural simulations and
   identification of standardised profiles for fabrication and carbon counting.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   add_arbitrary_profile/index.rst
   add_arbitrary_profile_with_voids/index.rst
   add_parameterized_profile/index.rst
   copy_profile/index.rst
   edit_profile/index.rst
   remove_profile/index.rst


Package Contents
----------------

.. py:function:: add_arbitrary_profile(file: ifcopenshell.file, profile: ifcopenshell.util.shape_builder.SequenceOfVectors, name: Optional[str] = None) -> ifcopenshell.entity_instance

   Adds a new arbitrary polyline-based profile

   The profile is represented as a polyline defined by a list of
   coordinates. Only straight segments are allowed. Coordinates must be
   provided in SI meters.

   To represent a closed curve, the first and last coordinate must be
   identical.

   :param profile: A list of coordinates
   :param name: If the profile is semantically significant (i.e. to be
       managed and reused by the user) then it must be named. Otherwise,
       this may be left as none.
   :return: The newly created IfcArbitraryClosedProfileDef

   Example:

   .. code:: python

       # A 10mm by 100mm rectangle, such that might be used as a wooden
       # skirting board or kick plate.
       square = ifcopenshell.api.profile.add_arbitrary_profile(model,
           profile=[(0., 0.), (.01, 0.), (.01, .1), (0., .1), (0., 0.)],
           name="SK01 Profile")


.. py:function:: add_arbitrary_profile_with_voids(file: ifcopenshell.file, outer_profile: ifcopenshell.util.shape_builder.SequenceOfVectors, inner_profiles: list[ifcopenshell.util.shape_builder.SequenceOfVectors], name: Optional[str] = None) -> ifcopenshell.entity_instance

   Adds a new arbitrary polyline-based profile with voids

   The outer profile is represented as a polyline defined by a list of
   coordinates. Only straight segments are allowed. Coordinates must be
   provided in SI meters.

   To represent a closed curve, the first and last coordinate must be
   identical.

   The inner profiles are represented as a list of polylines.
   Every polyline in defined by a list of coordinates.
   Only straight segments are allowed. Coordinates must be
   provided in SI meters.

   :param outer_profile: A list of coordinates
   :param inner_profiles: A list of polylines
   :param name: If the profile is semantically significant (i.e. to be
       managed and reused by the user) then it must be named. Otherwise,
       this may be left as none.
   :return: The newly created IfcArbitraryProfileDefWithVoids

   Example:

   .. code:: python

       # A 400mm by 400mm square with a 200mm by 200mm hole in it.
       square_with_hole = ifcopenshell.api.profile.add_arbitrary_profile_with_voids(model,
           outer_profile=[(0., 0.), (.4, 0.), (.4, .4), (0., .4), (0., 0.)],
           inner_profiles=[[(0.1, 0.1), (0.3, 0.1), (0.3, 0.3), (0.1, 0.3), (0.1, 0.1)]],
           name="SK01 Hole Profile")


.. py:function:: add_parameterized_profile(file: ifcopenshell.file, ifc_class: str) -> ifcopenshell.entity_instance

   Adds a new parameterised profile

   IFC offers parameterised profiles for common standardised hot roll
   steel sections and common concrete forms. A full list is available on
   the IFC documentation as subclasses of IfcParameterizedProfileDef.

   Currently, this API has no benefit over directly calling
   ifcopenshell.file.create_entity.

   :param ifc_class: The subclass of IfcParameterizedProfileDef that you'd
       like to create.
   :return: The newly created element depending on the specified ifc_class.

   Example:

   .. code:: python

       circle = ifcopenshell.api.profile.add_parameterized_profile(model,
           ifc_class="IfcCircleProfileDef")
       circle.Radius = 1.


.. py:function:: copy_profile(file: ifcopenshell.file, profile: ifcopenshell.entity_instance) -> ifcopenshell.entity_instance

   Copies a profile

   All profile's psets are copied. The copied profile is not
   associated to any elements.

   :param profile: The IfcProfileDef to copy
   :return: The new copy of the profile

   Example:

   .. code:: python

       profile = ifcopenshell.api.profile.add_profile(model, ifc_class="IfcRectangleProfileDef")

       # Let's duplicate the rectangle profile
       profile_copy = ifcopenshell.api.profile.copy_profile(model, profile=profile)


.. py:function:: edit_profile(file: ifcopenshell.file, profile: ifcopenshell.entity_instance, attributes: dict[str, Any]) -> None

   Edits the attributes of an IfcProfileDef

   For more information about the attributes and data types of an
   IfcProfileDef, consult the IFC documentation.

   :param profile: The IfcProfileDef entity you want to edit
   :param attributes: a dictionary of attribute names and values.
   :return: None

   Example:

   .. code:: python

       circle = ifcopenshell.api.profile.add_parameterized_profile(model,
           ifc_class="IfcCircleProfileDef")
       circle = 1.

       ifcopenshell.api.profile.edit_profile(model,
           profile=circle, attributes={"ProfileName": "1000mm Dia"})


.. py:function:: remove_profile(file: ifcopenshell.file, profile: ifcopenshell.entity_instance) -> None

   Removes a profile

   :param profile: The IfcProfileDef to remove.

   Example:

   .. code:: python

       circle = ifcopenshell.api.profile.add_parameterized_profile(model,
           ifc_class="IfcCircleProfileDef")
       circle = 1.
       ifcopenshell.api.profile.remove_profile(model, profile=circle)


