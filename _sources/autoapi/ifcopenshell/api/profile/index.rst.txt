:py:mod:`ifcopenshell.api.profile`
==================================

.. py:module:: ifcopenshell.api.profile


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   add_arbitrary_profile/index.rst
   add_arbitrary_profile_with_voids/index.rst
   add_parameterized_profile/index.rst
   edit_profile/index.rst
   remove_profile/index.rst


Package Contents
----------------

.. py:function:: add_arbitrary_profile(file, profile=None, name=None) -> None

   Adds a new arbitrary polyline-based profile

   The profile is represented as a polyline defined by a list of
   coordinates. Only straight segments are allowed. Coordinates must be
   provided in SI meters.

   To represent a closed curve, the first and last coordinate must be
   identical.

   :param profile: A list of coordinates
   :type profile: list[list[float]]
   :param name: If the profile is semantically significant (i.e. to be
       managed and reused by the user) then it must be named. Otherwise,
       this may be left as none.
   :type name: str, optional
   :return: The newly created IfcArbitraryClosedProfileDef
   :rtype: ifcopenshell.entity_instance

   Example:

   .. code:: python

       # A 10mm by 100mm rectangle, such that might be used as a wooden
       # skirting board or kick plate.
       square = ifcopenshell.api.run("profile.add_arbitrary_profile", model,
           profile=[(0., 0.), (.01, 0.), (.01, .1), (0., .1), (0., 0.)],
           name="SK01 Profile")


.. py:function:: add_arbitrary_profile_with_voids(file, outer_profile=None, inner_profiles=None, name=None) -> None

   Adds a new arbitrary polyline-based profile with voids

   The outer profile is represented as a polyline defined by a list of
   coordinates. Only straight segments are allowed. Coordinates must be
   provided in SI meters.

   To represent a closed curve, the first and last coordinate must be
   identical.

   The inner profiles are represented as a list of polylines.
   Every polyline in defined by a list of coordinates.
   Only straight segments are allowed. Coordinates must be
   provided in SI meters.

   :param outer_profile: A list of coordinates
   :type profile: list[float]
   :param inner_profiles: A list of polylines
   :type profile: list[list[float]]
   :param name: If the profile is semantically significant (i.e. to be
       managed and reused by the user) then it must be named. Otherwise,
       this may be left as none.
   :type name: str, optional
   :return: The newly created IfcArbitraryProfileDefWithVoids
   :rtype: ifcopenshell.entity_instance

   Example:

   .. code:: python

       # A 400mm by 400mm square with a 200mm by 200mm hole in it.
       square_with_hole = ifcopenshell.api.run("profile.add_arbitrary_profile_with_voids", model,
           outer_profile=[(0., 0.), (.4, 0.), (.4, .4), (0., .4), (0., 0.)],
           inner_profiles=[[(0.1, 0.1), (0.3, 0.1), (0.3, 0.3), (0.1, 0.3), (0.1, 0.1)]],
           name="SK01 Hole Profile")


.. py:function:: add_parameterized_profile(file, ifc_class=None) -> None

   Adds a new parameterised profile

   IFC offers parameterised profiles for common standardised hot roll
   steel sections and common concrete forms. A full list is available on
   the IFC documentation as subclasses of IfcParameterizedProfileDef.

   Currently, this API has no benefit over directly calling
   ifcopenshell.file.create_entity.

   :param ifc_class: The subclass of IfcParameterizedProfileDef that you'd
       like to create.
   :type ifc_class: str
   :return: The newly created element depending on the specified ifc_class.
   :rtype: ifcopenshell.entity_instance

   Example:

   .. code:: python

       circle = ifcopenshell.api.run("profile.add_parameterized_profile", model,
           ifc_class="IfcCircleProfileDef")
       circle.Radius = 1.


.. py:function:: edit_profile(file, profile=None, attributes=None) -> None

   Edits the attributes of an IfcProfileDef

   For more information about the attributes and data types of an
   IfcProfileDef, consult the IFC documentation.

   :param profile: The IfcProfileDef entity you want to edit
   :type profile: ifcopenshell.entity_instance
   :param attributes: a dictionary of attribute names and values.
   :type attributes: dict, optional
   :return: None
   :rtype: None

   Example:

   .. code:: python

       circle = ifcopenshell.api.run("profile.add_parameterized_profile", model,
           ifc_class="IfcCircleProfileDef")
       circle = 1.

       ifcopenshell.api.run("profile.edit_profile", model,
           profile=circle, attributes={"ProfileName": "1000mm Dia"})


.. py:function:: remove_profile(file, profile=None) -> None

   Removes a profile

   :param profile: The IfcProfileDef to remove.
   :type profile: ifcopenshell.entity_instance
   :return: None
   :rtype: None

   Example:

   .. code:: python

       circle = ifcopenshell.api.run("profile.add_parameterized_profile", model,
           ifc_class="IfcCircleProfileDef")
       circle = 1.
       ifcopenshell.api.run("profile.remove_profile", model, profile=circle)


