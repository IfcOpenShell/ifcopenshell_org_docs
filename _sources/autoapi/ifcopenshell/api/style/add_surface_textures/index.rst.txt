:py:mod:`ifcopenshell.api.style.add_surface_textures`
=====================================================

.. py:module:: ifcopenshell.api.style.add_surface_textures


Module Contents
---------------

.. py:class:: Usecase

   .. py:method:: apply_uv_map_to_texture(texture)


   .. py:method:: create_surface_texture(node, mode)


   .. py:method:: detect_diffuse_map(bsdf)


   .. py:method:: detect_emissive_map(bsdf)


   .. py:method:: detect_metallicroughness_map(bsdf)


   .. py:method:: detect_normal_map(bsdf)


   .. py:method:: detect_occlusion_map()


   .. py:method:: detect_unlit_emissive_map(bsdf)


   .. py:method:: execute()


   .. py:method:: process_texture_coordinates(node, texture)


   .. py:attribute:: file
      :type:  ifcopenshell.file


   .. py:attribute:: settings
      :type:  dict[str, Any]


.. py:function:: add_surface_textures(file: ifcopenshell.file, material: Optional[bpy.types.Material] = None, textures: Optional[list[dict]] = None, uv_maps: Optional[list[ifcopenshell.entity_instance]] = None) -> list[ifcopenshell.entity_instance]

   Add surface texture based on a Blender material definition or texture data.

   Either `material` or `textures` should be provided.

   :param material: The Blender material definition with a node tree that
       is compatible with glTF. See one of the valid combinations here:
       https://docs.blender.org/manual/en/dev/addons/import_export/scene_gltf2.html
   :type material: bpy.types.Material, optional
   :param uv_maps: A list of IfcIndexedTextureMap for any
       IfcTessellatedFaceSets that the representation has, obtained from
       the HasTextures attribute.
   :type uv_maps: list[ifcopenshell.entity_instance]
   :param textures: A list of dictionaries containing:

       1. Attributes to create IfcImageTexture.
       2. One additional parameter `uv_mode` to map IfcImageTexture to correct
          IfcTextureCoordinate type.

       Possible `uv_mode` values:

       * `UV` - use IfcTextureCoordinate from `uv_maps` parameter;
       * `Generated` - IfcTextureCoordinateGenerator with mode COORD (autogenerated UV
         based on geometry);
       * `Camera` - IfcTextureCoordinateGenerator with mode COORD_EYE (autogenerated UV
         based on camera position)
   :type textures: list[dict], optional
   :return: A list of IfcImageTexture
   :rtype: list[ifcopenshell.entity_instance]


