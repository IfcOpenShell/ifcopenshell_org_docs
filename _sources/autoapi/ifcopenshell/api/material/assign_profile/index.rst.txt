:py:mod:`ifcopenshell.api.material.assign_profile`
==================================================

.. py:module:: ifcopenshell.api.material.assign_profile


Module Contents
---------------

.. py:class:: Usecase

   .. py:method:: change_profile(element: ifcopenshell.entity_instance, profile: ifcopenshell.entity_instance) -> None


   .. py:method:: execute(material_profile: ifcopenshell.entity_instance, profile: ifcopenshell.entity_instance) -> None


   .. py:attribute:: file
      :type:  ifcopenshell.file


.. py:function:: assign_profile(file: ifcopenshell.file, material_profile: ifcopenshell.entity_instance, profile: ifcopenshell.entity_instance) -> None

   Changes the profile curve of a material profile item in a profile set

   In addition to changing the profile curve, it will also change the
   profile curve used in any body representation extrusions.

   :param material_profile: The IfcMaterialProfile to change the profile
       curve of. See ifcopenshell.api.material.add_profile to see how to
       create profiles.
   :type material_profile: ifcopenshell.entity_instance
   :param profile: The IfcProfileDef to set the profile item's curve to.
   :type profile: ifcopenshell.entity_instance
   :return: None
   :rtype: None

   Example:

   .. code:: python

       # Let's imagine we have a steel I-beam. Notice we are assigning to
       # the type only, as all occurrences of that type will automatically
       # inherit the material.
       beam_type = ifcopenshell.api.root.create_entity(model, ifc_class="IfcBeamType", name="B1")

       # First, let's create a material set. This will later be assigned
       # to our beam type element.
       material_set = ifcopenshell.api.material.add_material_set(model,
           name="B1", set_type="IfcMaterialProfileSet")

       # Create a steel material.
       steel = ifcopenshell.api.material.add_material(model, name="ST01", category="steel")

       # Create an I-beam profile curve. Notice how we name our profiles
       # based on standardised steel profile names.
       hea100 = model.create_entity(
           "IfcIShapeProfileDef", ProfileName="HEA100", ProfileType="AREA",
           OverallWidth=100, OverallDepth=96, WebThickness=5, FlangeThickness=8, FilletRadius=12,
       )

       # Define that steel material and cross section as a single profile
       # item. If this were a composite beam, we might add multiple profile
       # items instead, but this is rarely the case in most construction.
       profile_item = ifcopenshell.api.material.add_profile(model,
           profile_set=material_set, material=steel, profile=hea100)

       # Great! Let's assign our material set to our beam type.
       ifcopenshell.api.material.assign_material(model, products=[beam_type], material=material_set)

       # Let's create an occurrence of this beam.
       beam = ifcopenshell.api.root.create_entity(model, ifc_class="IfcBeam", name="B1.01")
       ifcopenshell.api.material.assign_material(model,
           products=[beam], type="IfcMaterialProfileSetUsage")

       # Let's give a 1000mm long beam body representation.
       body = ifcopenshell.api.geometry.add_profile_representation(
           context=body_context, profile=hea100, depth=1000)
       ifcopenshell.api.geometry.assign_representation(model, product=beam, representation=body)
       ifcopenshell.api.geometry.edit_object_placement(model, product=beam)

       # Now let's change the profile to a HEA200 standard profile instead.
       # This will automatically change the body representation that we
       # just added as well to a HEA200 profile.
       hea200 = model.create_entity(
           "IfcIShapeProfileDef", ProfileName="HEA200", ProfileType="AREA",
           OverallWidth=200, OverallDepth=190, WebThickness=6.5, FlangeThickness=10, FilletRadius=18,
       )
       ifcopenshell.api.material.assign_profile(model, material_profile=profile_item, profile=hea200)


