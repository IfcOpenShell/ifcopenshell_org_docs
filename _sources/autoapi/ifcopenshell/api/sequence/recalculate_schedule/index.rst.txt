:py:mod:`ifcopenshell.api.sequence.recalculate_schedule`
========================================================

.. py:module:: ifcopenshell.api.sequence.recalculate_schedule


Module Contents
---------------

.. py:class:: Usecase

   .. py:method:: add_node(task: ifcopenshell.entity_instance) -> None


   .. py:method:: backward_pass(node) -> bool


   .. py:method:: build_network_graph() -> None


   .. py:method:: calculate_free_float(predecessor_date: datetime.datetime, successor_date: datetime.datetime, lag_time: int, predecessor_data: dict, successor_data: dict) -> datetime.timedelta


   .. py:method:: execute(work_schedule: ifcopenshell.entity_instance) -> None


   .. py:method:: forward_pass(node) -> bool


   .. py:method:: offset_date(date: datetime.datetime, days: int, node: dict) -> datetime.datetime


   .. py:method:: update_task_times() -> None


   .. py:attribute:: file
      :type:  ifcopenshell.file


.. py:function:: recalculate_schedule(file: ifcopenshell.file, work_schedule: ifcopenshell.entity_instance) -> None

   Calculate the critical path and floats for a work schedule

   This implements critical path analysis, using the forward pass and
   backward pass method. When run, any tasks that have no float will be
   marked as critical, and both the total and free floats will be
   populated for all task times.

   Cyclical relationships are detected and will result in a recursion
   error.

   :param work_schedule: The IfcWorkSchedule to perform the calculation on.
   :return: None

   Example:

   .. code:: python

       # See the example for ifcopenshell.api.sequence.cascade_schedule for
       # details of how to set up a basic set of tasks and calculate the
       # critical path. Typically cascade_schedule is run prior to ensure
       # that dates are correct.


