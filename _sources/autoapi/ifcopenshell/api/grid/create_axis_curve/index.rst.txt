:py:mod:`ifcopenshell.api.grid.create_axis_curve`
=================================================

.. py:module:: ifcopenshell.api.grid.create_axis_curve


Module Contents
---------------

.. py:class:: Usecase

   .. py:method:: convert_si_to_unit(co)


   .. py:method:: create_cartesian_point(x, y, z=None)


   .. py:method:: execute()


.. py:function:: create_axis_curve(file: ifcopenshell.file, axis_curve: bpy.types.Object, grid_axis: ifcopenshell.entity_instance) -> None

   Adds curve geometry to a grid axis to represent the axis extents

   This currently depends on the Blender geometry kernel to function.

   An IFC grid will have a minimum of two axes (typically perpendicular). Each
   axis will then have a line which represents the extents of the axis.

   :param axis_curve: The Blender object that contains a mesh data block with a
       single edge.
   :type axis_curve: bpy.types.Object
   :param grid_axis: The IfcGridAxis element to add geometry to.
   :type grid_axis: ifcopenshell.entity_instance
   :return: None
   :rtype: None

   Example:

   .. code:: python

       # A pretty standard rectangular grid, with only two axes.
       grid = ifcopenshell.api.root.create_entity(model, ifc_class="IfcGrid")
       axis_a = ifcopenshell.api.grid.create_grid_axis(model,
           axis_tag="A", uvw_axes="UAxes", grid=grid)
       axis_1 = ifcopenshell.api.grid.create_grid_axis(model,
           axis_tag="1", uvw_axes="VAxes", grid=grid)

       # Assume you have these Blender objects in your active Blender session
       obj1 = bpy.data.objects.get("AxisA")
       obj2 = bpy.data.objects.get("Axis1")
       ifcopenshell.api.grid.create_axis_curve(model, axis_curve=obj1, grid_axis=axis_a)
       ifcopenshell.api.grid.create_axis_curve(model, axis_curve=obj2, grid_axis=axis_1)


