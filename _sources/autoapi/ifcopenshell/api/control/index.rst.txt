:py:mod:`ifcopenshell.api.control`
==================================

.. py:module:: ifcopenshell.api.control


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   assign_control/index.rst
   unassign_control/index.rst


Package Contents
----------------

.. py:function:: assign_control(file, relating_control=None, related_object=None) -> None

   Assigns a planning control or constraint to an object

   IFC can describe concepts that control other objects. For example, a
   planning calendar controls the availability of working days for
   construction planning. As another example, a cost item might constrain
   or limit the ability to procure and build a product.

   This usecase lets you assign controls following the rules of the IFC
   specification. This is an advanced topic and assumes knowledge of the
   IFC concepts to determine what is allowed to control what. In the
   future, this API will likely be deprecated in favour of multiple usecase
   specific APIs.

   :param relating_control: The IfcControl entity that is creating the
       control or constraint
   :type relating_control: ifcopenshell.entity_instance
   :param related_object: The IfcObjectDefinition that is being controlled
   :type related_object: ifcopenshell.entity_instance
   :return: The newly created IfcRelAssignsToControl. If relationship already
       existed before and wasn't changed then returns None.
   :rtype: ifcopenshell.entity_instance, None

   Example:

   .. code:: python

       # One common usecase is to assign a calendar to a task
       calendar = ifcopenshell.api.run("sequence.add_work_calendar", model)
       schedule = ifcopenshell.api.run("sequence.add_work_schedule", model)
       task = ifcopenshell.api.run("sequence.add_task", model,
           work_schedule=schedule)

       # All subtasks will inherit this calendar, so assigning a single
       # calendar to the root task effectively defines a "default" calendar
       ifcopenshell.api.run("control.assign_control", model,
           relating_control=calendar, related_object=task)

       # Another common example might be relating a cost item and a product
       wall = ifcopenshell.api.run("root.create_entity", model, ifc_class="IfcWall")
       schedule = ifcopenshell.api.run("cost.add_cost_schedule", model)
       cost_item = ifcopenshell.api.run("cost.add_cost_item", model,
           cost_schedule=schedule)
       ifcopenshell.api.run("control.assign_control", model,
           relating_control=cost_item, related_object=wall)


.. py:function:: unassign_control(file, relating_control=None, related_object=None) -> None

   Unassigns a planning control or constraint to an object

   :param relating_control: The IfcControl entity that is creating the
       control or constraint
   :type relating_control: ifcopenshell.entity_instance
   :param related_object: The IfcObjectDefinition that is being controlled
   :type related_object: ifcopenshell.entity_instance
   :return: If the control still is related to other objects, the
       IfcRelAssignsToControl is returned, otherwise None.
   :rtype: ifcopenshell.entity_instance, None

   Example:

   .. code:: python

       # Let's relate a cost item and a product
       wall = ifcopenshell.api.run("root.create_entity", model, ifc_class="IfcWall")
       schedule = ifcopenshell.api.run("cost.add_cost_schedule", model)
       cost_item = ifcopenshell.api.run("cost.add_cost_item", model,
           cost_schedule=schedule)
       ifcopenshell.api.run("control.assign_control", model,
           relating_control=cost_item, related_object=wall)

       # And now let's change our mind
       ifcopenshell.api.run("control.unassign_control", model,
           relating_control=cost_item, related_object=wall)


