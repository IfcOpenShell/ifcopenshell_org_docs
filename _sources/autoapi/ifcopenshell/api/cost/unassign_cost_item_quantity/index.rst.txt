:py:mod:`ifcopenshell.api.cost.unassign_cost_item_quantity`
===========================================================

.. py:module:: ifcopenshell.api.cost.unassign_cost_item_quantity


Module Contents
---------------

.. py:class:: Usecase


   .. py:method:: execute()


   .. py:method:: update_cost_item_count()



.. py:function:: unassign_cost_item_quantity(file, cost_item=None, products=None) -> None

   Removes quantities of a cost item that are calculated on products

   A cost item may have quantities that are parametrically calculated on
   physical products. This lets you remove those quantities. This means
   that any future changes in the physical product's dimensions will not
   have any impact on the cost item.

   :param cost_item: The IfcCostItem to remove quantities from
   :type cost_item: ifcopenshell.entity_instance
   :param products: A list of IfcProducts that may have parametrically
       connected quantities to the cost item
   :type products: list[ifcopenshell.entity_instance]
   :return: None
   :rtype: None

   Example:

   .. code:: python

       schedule = ifcopenshell.api.run("cost.add_cost_schedule", model)
       item = ifcopenshell.api.run("cost.add_cost_item", model, cost_schedule=schedule)

       # Let's imagine a unit cost of 5.0 per unit volume
       value = ifcopenshell.api.run("cost.add_cost_value", model, parent=item)
       ifcopenshell.api.run("cost.edit_cost_value", model, cost_value=value,
           attributes={"AppliedValue": 5.0})

       slab = ifcopenshell.api.run("root.create_entity", model, ifc_class="IfcSlab")
       # Usually the quantity would be automatically calculated via a
       # graphical authoring application but let's assign a manual quantity
       # for now.
       qto = ifcopenshell.api.run("pset.add_qto", model, product=slab, name="Qto_SlabBaseQuantities")
       ifcopenshell.api.run("pset.edit_qto", model, qto=qto, properties={"NetVolume": 42.0})

       # Now let's parametrically link the slab's quantity to the cost
       # item. If the slab is edited in the future and 42.0 changes, then
       # the updated value will also automatically be applied to the cost
       # item.
       ifcopenshell.api.run("cost.assign_cost_item_quantity", model,
           cost_item=item, products=[slab], prop_name="NetVolume")

       # Let's change our mind and remove the parametric connection
       ifcopenshell.api.run("cost.unassign_cost_item_quantity", model,
           cost_item=item, products=[slab])


