:py:mod:`ifcopenshell.api.project`
==================================

.. py:module:: ifcopenshell.api.project


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   append_asset/index.rst
   assign_declaration/index.rst
   create_file/index.rst
   unassign_declaration/index.rst


Package Contents
----------------

.. py:function:: append_asset(file, library=None, element=None, reuse_identities=None) -> None

   Appends an asset from a library into the active project

   A BIM library asset may be a type product (e.g. wall type), product
   (e.g. pump), material, profile, or cost schedule.

   This copies the asset from the specified library file into the active
   project. It handles all details like ensuring that product materials,
   styles, properties, quantities, and so on are preserved.

   If an asset contains geometry, the geometric contexts are also
   intelligentely transplanted such that existing equivalent contexts are
   reused.

   Do not mix units.

   :param library: The file object containing the asset.
   :type library: ifcopenshell.file
   :param element: An element in the library file of the asset. It may be
       an IfcTypeProduct, IfcProduct, IfcMaterial, IfcCostSchedule, or
       IfcProfileDef.
   :type element: ifcopenshell.entity_instance
   :param reuse_identities: Optional dictionary of mapped entities' identities to the
       already created elements. It will be used to avoid creating
       duplicated inverse elements during multiple `project.append_asset` calls. If you want
       to add just 1 asset or if added assets won't have any shared elements, then it can be left empty.
   :type reuse_identities: dict[int, ifcopenshell.entity_instance]
   :return: The appended element
   :rtype: ifcopenshell.entity_instance

   Example:

   .. code:: python

       # Programmatically generate a library. You could do this visually too.
       library = ifcopenshell.api.run("project.create_file")
       root = ifcopenshell.api.run("root.create_entity", library, ifc_class="IfcProject", name="Demo Library")
       context = ifcopenshell.api.run("root.create_entity", library,
           ifc_class="IfcProjectLibrary", name="Demo Library")
       ifcopenshell.api.run("project.assign_declaration", library, definitions=[context], relating_context=root)

       # Assign units for our example library
       unit = ifcopenshell.api.run("unit.add_si_unit", library,
           unit_type="LENGTHUNIT", name="METRE", prefix="MILLI")
       ifcopenshell.api.run("unit.assign_unit", library, units=[unit])

       # Let's create a single asset of a 200mm thick concrete wall
       wall_type = ifcopenshell.api.run("root.create_entity", library, ifc_class="IfcWallType", name="WAL01")
       concrete = ifcopenshell.api.run("material.add_material", usecase.file, name="CON", category="concrete")
       rel = ifcopenshell.api.run("material.assign_material", library,
           products=[wall_type], type="IfcMaterialLayerSet")
       layer = ifcopenshell.api.run("material.add_layer", library,
           layer_set=rel.RelatingMaterial, material=concrete)
       layer.Name = "Structure"
       layer.LayerThickness = 200

       # Mark our wall type as a reusable asset in our library.
       ifcopenshell.api.run("project.assign_declaration", library,
           definitions=[wall_type], relating_context=context)

       # Let's imagine we're starting a new project
       model = ifcopenshell.api.run("project.create_file")
       project = ifcopenshell.api.run("root.create_entity", model, ifc_class="IfcProject", name="Test")

       # Now we can easily append our wall type from our libary
       wall_type = ifcopenshell.api.run("project.append_asset", model, library=library, element=wall_type)

   Example of adding multiple assets and avoiding duplicated inverses:

   .. code:: python

       # since occurrences of IfcWindow of the same type
       # might have shared inverses (e.g. IfcStyledItem)
       # we provide a dictionary that will be populated with newly created items
       # and reused to avoid duplicated elements
       reuse_identities = dict()

       for element in ifcopenshell.util.selector.filter_elements(model, "IfcWindow"):
           ifcopenshell.api.run(
               "project.append_asset",
               model, library=library,
               element=wall_type
               reuse_identities=reuse_identities
           )



.. py:function:: assign_declaration(file: ifcopenshell.entity_instance, definitions: list[ifcopenshell.entity_instance], relating_context: ifcopenshell.entity_instance) -> Union[ifcopenshell.entity_instance, None]

   Declares the list of elements to the project

   All data in a model must be directly or indirectly related to the
   project. Most data is indirectly related, existing instead within the
   spatial decomposition tree. Other data, such as types, may be declared
   at the top level.

   Most of the time, the API handles declaration automatically for you.
   There is one scenario where you might want to explicitly declare objects
   to the project, and that's when you want to organise objects into
   project libraries for future use (such as an assets library). Assigning
   a declaration lets you say that an object belongs to a library.

   :param definitions: The list of objects you want to declare. Typically a list of assets.
   :type definitions: list[ifcopenshell.entity_instance]
   :param relating_context: The IfcProject, or more commonly the
       IfcProjectLibrary that you want the object to be part of.
   :type relating_context: ifcopenshell.entity_instance
   :return: The new IfcRelDeclares relationship or None if all definitions
       were already declared / do not support declaration.
   :rtype: Union[ifcopenshell.entity_instance, None]

   Example:

   .. code:: python

       # Programmatically generate a library. You could do this visually too.
       library = ifcopenshell.api.run("project.create_file")
       root = ifcopenshell.api.run("root.create_entity", library, ifc_class="IfcProject", name="Demo Library")
       context = ifcopenshell.api.run("root.create_entity", library,
           ifc_class="IfcProjectLibrary", name="Demo Library")

       # It's necessary to say our library is part of our project.
       ifcopenshell.api.run("project.assign_declaration", library, definitions=[context], relating_context=root)

       # Assign units for our example library
       unit = ifcopenshell.api.run("unit.add_si_unit", library,
           unit_type="LENGTHUNIT", name="METRE", prefix="MILLI")
       ifcopenshell.api.run("unit.assign_unit", library, units=[unit])

       # Let's create a single asset of a 200mm thick concrete wall
       wall_type = ifcopenshell.api.run("root.create_entity", library, ifc_class="IfcWallType", name="WAL01")
       concrete = ifcopenshell.api.run("material.add_material", file, name="CON", category="concrete")
       rel = ifcopenshell.api.run("material.assign_material", library,
           products=[wall_type], type="IfcMaterialLayerSet")
       layer = ifcopenshell.api.run("material.add_layer", library,
           layer_set=rel.RelatingMaterial, material=concrete)
       layer.Name = "Structure"
       layer.LayerThickness = 200

       # Mark our wall type as a reusable asset in our library.
       ifcopenshell.api.run("project.assign_declaration", library,
           definitions=[wall_type], relating_context=context)

       # All done, just for fun let's save our asset library to disk for later use.
       library.write("/path/to/my-library.ifc")


.. py:function:: create_file(version: str = 'IFC4') -> ifcopenshell.file

   Create a blank IFC model file object

   Create a new IFC file object based on the nominated schema version. The
   schema version you choose determines what type of IFC data you can store
   in this model. The file is blank and contains no entities.

   It also sets up header data for STEP file serialisation, such as the
   current timestamp, IfcOpenShell as the preprocessor, and defaults to a
   DesignTransferView MVD.

   :param version: The schema version of the IFC file. Choose from
       "IFC2X3", "IFC4", or "IFC4X3". If you have loaded in a custom
       schema, you may specify that schema identifier here too.
   :type version: str, optional
   :return: The created IFC file object.
   :rtype: ifcopenshell.file

   Example:

   .. code:: python

       # Start a new model.
       model = ifcopenshell.api.run("project.create_file")

       # It's currently a blank model, so typically the first thing we do
       # is create a project in it.
       project = ifcopenshell.api.run("root.create_entity", model, ifc_class="IfcProject", name="Test")

       # ... and off we go!


.. py:function:: unassign_declaration(file: ifcopenshell.file, definitions: list[ifcopenshell.entity_instance], relating_context: ifcopenshell.entity_instance) -> None

   Unassigns a list of objects from a project or project library

   Typically used to remove an asset from a project library.

   :param definitions: The list of objects you want to undeclare.
       Typically a list of assets.
   :type definitions: list[ifcopenshell.entity_instance]
   :param relating_context: The IfcProject, or more commonly the
       IfcProjectLibrary that you want the object to no longer be part of.
   :type relating_context: ifcopenshell.entity_instance
   :return: None
   :rtype: None

   Example:

   .. code:: python

       # Programmatically generate a library. You could do this visually too.
       library = ifcopenshell.api.run("project.create_file")
       root = ifcopenshell.api.run("root.create_entity", library, ifc_class="IfcProject", name="Demo Library")
       context = ifcopenshell.api.run("root.create_entity", library,
           ifc_class="IfcProjectLibrary", name="Demo Library")

       # It's necessary to say our library is part of our project.
       ifcopenshell.api.run("project.assign_declaration", library, definitions=[context], relating_context=root)

       # Remove the library from our project
       ifcopenshell.api.run("project.unassign_declaration", library, definitions=[context], relating_context=root)


