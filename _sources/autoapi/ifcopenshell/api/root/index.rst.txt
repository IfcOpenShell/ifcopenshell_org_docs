:py:mod:`ifcopenshell.api.root`
===============================

.. py:module:: ifcopenshell.api.root

.. autoapi-nested-parse::

   Create, copy, or remove physical elements such as walls, doors, slabs, etc

   This is one of the most used API modules and should be used any time you want
   to create, remove, copy, or change a physical or spatial element. See
   :func:`create_entity` to get started.

   This module should also be used to create types. To then associate types with
   elements, see :mod:`ifcopenshell.api.type`.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   copy_class/index.rst
   create_entity/index.rst
   reassign_class/index.rst
   remove_product/index.rst


Package Contents
----------------

.. py:function:: copy_class(file: ifcopenshell.file, product: ifcopenshell.entity_instance) -> ifcopenshell.entity_instance

   Copies a product

   The following relationships are also duplicated:

   * The copy will have the same object placement coordinates as the
     original.
   * The copy will have duplicated property sets, properties, and quantities
   * The copy will have all nested distribution ports copied too
   * The copy will be part of the same aggregate
   * The copy will be contained in the same spatial structure
   * The copy, if it is an occurrence, will have the same type
   * Voids are duplicated too
   * The copy will have the same material as the original. Parametric
     material set usages will be copied.
   * The copy will be part of the same groups as the original.

   Be warned that:

   * Representations are _not_ copied. Copying representations is an
     expensive operation so for now the user is responsible for handling
     representations.
   * Filled voids are not copied, as there is no guarantee that the filling
     will also be copied.
   * Path connectivity is not copied, as there is no guarantee that the
     connections are still valid.

   :param product: The IfcProduct to copy.
   :type param: ifcopenshell.entity_instance
   :return: The copied product
   :rtype: ifcopenshell.entity_instance

   Example:

   .. code:: python

       # We have a wall
       wall = ifcopenshell.api.root.create_entity(model, ifc_class="IfcWall")

       # And now we have two
       wall_copy = ifcopenshell.api.root.copy_class(model, product=wall)


.. py:function:: create_entity(file: ifcopenshell.file, ifc_class: str = 'IfcBuildingElementProxy', predefined_type: Optional[str] = None, name: Optional[str] = None) -> ifcopenshell.entity_instance

   Create a new rooted product

   This is a critical function used to create almost any rooted product or
   product type. If you want to create walls, spaces, buildings, wall
   types, and so on, use this function.

   Just specify the class you want to create, as well as the predefined
   type and name. It will handle the storage of the predefined type and
   check whether the predefined type is built-in or custom. It will also
   generate a valid GlobalId and store ownership history. It will also
   handle some edge cases for default validity where users might forget to
   populate some mandatory attributes. For example, doors must define an
   operation type but many people forget.

   :param ifc_class: Any rooted IFC class.
   :type ifc_class: str,optional
   :param predefined_type: Any built-in or user-defined predefined type that
       is applicable to that IFC class. For user-defined predefined types
       just enter in any value and the API will handle it automatically.
   :type predefined_type: str,optional
   :param name: The name of the new element.
   :type name: str,optional
   :return: The newly created element based on the specified IFC class.
   :rtype: ifcopenshell.entity_instance

   Example:

   .. code:: python

       # We have a project.
       ifcopenshell.api.root.create_entity(model, ifc_class="IfcProject")

       # We have a building.
       ifcopenshell.api.root.create_entity(model, ifc_class="IfcBuilding")

       # We have a wall.
       ifcopenshell.api.root.create_entity(model, ifc_class="IfcWall")

       # We have a wall type.
       ifcopenshell.api.root.create_entity(model, ifc_class="IfcWallType")


.. py:function:: reassign_class(file: ifcopenshell.file, product: ifcopenshell.entity_instance, ifc_class: str = 'IfcBuildingElementProxy', predefined_type: Optional[str] = None) -> ifcopenshell.entity_instance

   Changes the class of a product

   If you ever created a wall then realised it's meant to be something
   else, this function lets you change the IFC class whilst retaining all
   other geometry and relationships.

   This is especially useful when dealing with poorly classified data from
   proprietary software with limited IFC capabilities.

   If you are reassigning a type, the occurrence classes are also
   reassigned to maintain validity.

   Vice versa, if you are reassigning an occurrence, the type is also
   reassigned in IFC4 and up. In IFC2X3, this may not occur if the type
   cannot be unambiguously derived, so you are required to manually check
   this.

   :param product: The IfcProduct that you want to change the class of.
   :type product: ifcopenshell.entity_instance
   :param ifc_class: The new IFC class you want to change it to.
   :type ifc_class: str,optional
   :param predefined_type: In case you want to change the predefined type
       too. User defined types are also allowed, just type what you want.
   :type predefined_type: str,optional
   :return: The newly modified product.
   :rtype: ifcopenshell.entity_instance

   Example:

   .. code:: python

       # We have a wall.
       wall = ifcopenshell.api.root.create_entity(model, ifc_class="IfcWall")

       # Oh, did I say wall? I meant slab.
       slab = ifcopenshell.api.root.reassign_class(model, product=wall, ifc_class="IfcSlab")

       # Warning: this will crash since wall doesn't exist any more.
       print(wall) # Kaboom.


.. py:function:: remove_product(file: ifcopenshell.file, product: ifcopenshell.entity_instance) -> None

   Removes a product

   This is effectively a smart delete function that not only removes a
   product, but also all of its relationships. It is always recommended to
   use this function to prevent orphaned data in your IFC model.

   This is intended to be used for removing:

   - IfcAnnotation
   - IfcElement
   - IfcElementType
   - IfcSpatialElement
   - IfcSpatialElementType

   For example, geometric representations are removed. Placement
   coordinates are also removed. Properties are removed. Material, type,
   containment, aggregation, and nesting relationships are removed (but
   naturally, the materials, types, containers, etc themselves remain).

   :param product: The element to remove.
   :type product: ifcopenshell.entity_instance
   :return: None
   :rtype: None

   Example:

   .. code:: python

       # We have a wall.
       wall = ifcopenshell.api.root.create_entity(model, ifc_class="IfcWall")

       # No we don't.
       ifcopenshell.api.root.remove_product(model, product=wall)


