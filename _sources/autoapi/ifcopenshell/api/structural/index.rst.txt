:py:mod:`ifcopenshell.api.structural`
=====================================

.. py:module:: ifcopenshell.api.structural

.. autoapi-nested-parse::

   Manage analytical properties for structural simulation

   This only handles authoring the analytical model, and does not actually perform
   any structural simulation. To perform the simulation, see IFC2CA.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   add_structural_activity/index.rst
   add_structural_analysis_model/index.rst
   add_structural_boundary_condition/index.rst
   add_structural_load/index.rst
   add_structural_load_case/index.rst
   add_structural_load_group/index.rst
   add_structural_member_connection/index.rst
   assign_structural_analysis_model/index.rst
   edit_structural_analysis_model/index.rst
   edit_structural_boundary_condition/index.rst
   edit_structural_connection_cs/index.rst
   edit_structural_item_axis/index.rst
   edit_structural_load/index.rst
   edit_structural_load_case/index.rst
   remove_structural_analysis_model/index.rst
   remove_structural_boundary_condition/index.rst
   remove_structural_connection_condition/index.rst
   remove_structural_load/index.rst
   remove_structural_load_case/index.rst
   remove_structural_load_group/index.rst
   unassign_structural_analysis_model/index.rst


Package Contents
----------------

.. py:function:: add_structural_activity(file: ifcopenshell.file, applied_load: ifcopenshell.entity_instance, structural_member: ifcopenshell.entity_instance, ifc_class: str = 'IfcStructuralPlanarAction', predefined_type: str = 'CONST', global_or_local: Literal['GLOBAL_COORDS', 'LOCAL_COORDS'] = 'GLOBAL_COORDS') -> ifcopenshell.entity_instance

   Adds a new structural activity

   A structural activity is either a structural action or a reaction. It
   may be applied to a point, a curve, or a planar surface, and may be a
   constant load, linear, etc.

   The activity must be defined using an applied load, and associated with
   a structural member.

   :param ifc_class: Choose from any subtype of IfcStructuralActivity.
   :param predefined_type: View the IFC documentation for what valid
       predefined types may be chosen.
   :param global_or_local: The location coordinates of the load is always
       defined locally relative to the structural member the activity is
       assigned to. However, the directions of the applied load may either
       be specified globally or locally depending on how this argument is
       set. Choose from GLOBAL_COORDS or LOCAL_COORDS.
   :param applied_load: The IfcStructuralLoad that is applied in this
       activity.
   :param structural_member: The IfcStructuralMember that the load is
       applied to.
   :return: The newly created entity based on the ifc_class


.. py:function:: add_structural_analysis_model(file: ifcopenshell.file) -> ifcopenshell.entity_instance

   Add a new structural analysis model

   A structural analysis model is a group of all the loads, reactions,
   structural members, and structural connections required to describe a
   structural analysis model.

   A 3D analytical model is assumed.

   :return: The newly created IfcStructuralAnalysisModel
   :rtype: ifcopenshell.entity_instance

   Example:

   .. code:: python

       # Create a fresh blank structural analysis
       analysis = ifcopenshell.api.structural.add_structural_analysis_model(model)


.. py:function:: add_structural_boundary_condition(file: ifcopenshell.file, name: Optional[str] = None, connection: Optional[ifcopenshell.entity_instance] = None, ifc_class: str = 'IfcBoundaryNodeCondition') -> ifcopenshell.entity_instance

   Adds a new structural boundary condition to a structural connection

   The type of boundary condition depends on the connection. Point
   connections will have a node condition, curve connections will have an
   edge condition, and surface connections will have a face condition.

   :param name: The name of the boundary condition.
   :param connection: The IfcStructuralConnection to apply the boundary
       condition to. This will determine the type of condition that is
       created. If no connection is supplied, an orphan boundary condition
       will be created using the ifc_class that you specify.
   :param ifc_class: The class of IfcBoundaryCondition to create, only
       relevant if you do not specify a connection and want to create an
       orphaned boundary condition.
   :return: The newly created IfcBoundaryCondition

   Example:

   .. code:: python

       ifcopenshell.api.structural.add_structural_boundary_condition(model, connection=connection)


.. py:function:: add_structural_load(file: ifcopenshell.file, name: Optional[str] = None, ifc_class: str = 'IfcStructuralLoadLinearForce') -> ifcopenshell.entity_instance

   Adds a new structural load

   Structural loads may be actions or reactions. A simple load might be a
   static and be linear, planar, or a single point. Alternatively, loads
   may be defined as a configuration of multiple loads.

   :param name: The name of the load
   :type name: str,optional
   :param ifc_class: The subtype of IfcStructuralLoad to create. Consult
       the IFC documentation to see all the types of loads.
   :type ifc_class: str
   :return: The newly created load entity, depending on the ifc_class
       specified.
   :rtype: ifcopenshell.entity_instance

   Example:

   .. code:: python

       # Create a simple linear load
       ifcopenshell.api.structural.add_structural_load(model)


.. py:function:: add_structural_load_case(file: ifcopenshell.file, name: str = 'Unnamed', action_type: str = 'NOTDEFINED', action_source: str = 'NOTDEFINED') -> ifcopenshell.entity_instance

   Adds a new load case, which is a collection of related load groups

   :param name: The name of the load case
   :type name: str
   :param action_type: Choose from EXTRAORDINARY_A, PERMANENT_G,
       or VARIABLE_Q, taken from the Eurocode standard.
   :type action_type: str
   :param action_source: The source of the load case, such as DEAD_LOAD_G,
       LIVE_LOAD_Q, TRANSPORT, ICE, etc. For the full list consult
       IfcActionSourceTypeEnum in the IFC documentation.
   :type action_source: str
   :return: The new IfcStructuralLoadCase
   :rtype: ifcopenshell.entity_instance


.. py:function:: add_structural_load_group(file: ifcopenshell.file, name: str = 'Unnamed', action_type: str = 'NOTDEFINED', action_source: str = 'NOTDEFINED') -> ifcopenshell.entity_instance

   Adds a new load group, which is a collection of related loads

   :param name: The name of the load group
   :type name: str
   :param action_type: Choose from EXTRAORDINARY_A, PERMANENT_G,
       or VARIABLE_Q, taken from the Eurocode standard.
   :type action_type: str
   :param action_source: The source of the load case, such as DEAD_LOAD_G,
       LIVE_LOAD_Q, TRANSPORT, ICE, etc. For the full list consult
       IfcActionSourceTypeEnum in the IFC documentation.
   :type action_source: str
   :return: The new IfcStructuralLoadCase
   :rtype: ifcopenshell.entity_instance


.. py:function:: add_structural_member_connection(file: ifcopenshell.file, relating_structural_member: ifcopenshell.entity_instance, related_structural_connection: ifcopenshell.entity_instance) -> ifcopenshell.entity_instance

   Relates a structural member and a structural connection

   :param relating_structural_member: The IfcStructuralMember to have a
       connection added to it.
   :param related_structural_connection: The IfcStructuralConnection to add
       to the IfcStructuralMember.
   :return: The IfcRelConnectsStructuralMember relationship


.. py:function:: assign_structural_analysis_model(file: ifcopenshell.file, products: list[ifcopenshell.entity_instance], structural_analysis_model: ifcopenshell.entity_instance) -> Union[ifcopenshell.entity_instance, None]

   Assigns a load or structural member to an analysis model

   :param products: The structural elements that is part of the analysis.
   :param structural_analysis_model: The IfcStructuralAnalysisModel that
       the structural element is related to.
   :return: The IfcRelAssignsToGroup relationship


.. py:function:: edit_structural_analysis_model(file: ifcopenshell.file, structural_analysis_model: ifcopenshell.entity_instance, attributes: dict[str, Any]) -> None

   Edits the attributes of an IfcStructuralAnalysisModel

   For more information about the attributes and data types of an
   IfcStructuralAnalysisModel, consult the IFC documentation.

   :param structural_analysis_model: The IfcStructuralAnalysisModel entity you want to edit
   :param attributes: a dictionary of attribute names and values.
   :return: None


.. py:function:: edit_structural_boundary_condition(file: ifcopenshell.file, condition: ifcopenshell.entity_instance, attributes: dict[str, Any]) -> None

   Edits the attributes of an IfcBoundaryCondition

   For more information about the attributes and data types of an
   IfcBoundaryCondition, consult the IFC documentation.

   :param condition: The IfcBoundaryCondition entity you want to edit
   :param attributes: a dictionary of attribute names and values.
   :return: None


.. py:function:: edit_structural_connection_cs(file: ifcopenshell.file, structural_item: ifcopenshell.entity_instance, axis: ifcopenshell.util.shape_builder.VectorType = (0.0, 0.0, 1.0), ref_direction: ifcopenshell.util.shape_builder.VectorType = (1.0, 0.0, 0.0)) -> None

   Edits the coordinate system of a structural connection

   :param structural_item: The IfcStructuralItem you want to modify.
   :param axis: The unit Z axis vector defined as a list of 3 floats.
       Defaults to (0., 0., 1.).
   :param ref_direction: The unit X axis vector defined as a list of 3
       floats. Defaults to (1., 0., 0.).
   :return: None


.. py:function:: edit_structural_item_axis(file: ifcopenshell.file, structural_item: ifcopenshell.entity_instance, axis: ifcopenshell.util.shape_builder.VectorType = (0.0, 0.0, 1.0)) -> None

   Edits the coordinate system of a structural connection

   :param structural_item: The IfcStructuralItem you want to modify.
   :param axis: The unit Z axis vector defined as a list of 3 floats.
       Defaults to (0., 0., 1.).
   :return: None


.. py:function:: edit_structural_load(file: ifcopenshell.file, structural_load: ifcopenshell.entity_instance, attributes: dict[str, Any]) -> None

   Edits the attributes of an IfcStructuralLoad

   For more information about the attributes and data types of an
   IfcStructuralLoad, consult the IFC documentation.

   :param structural_load: The IfcStructuralLoad entity you want to edit
   :param attributes: a dictionary of attribute names and values.
   :return: None


.. py:function:: edit_structural_load_case(file: ifcopenshell.file, load_case: ifcopenshell.entity_instance, attributes: dict[str, Any]) -> None

   Edits the attributes of an IfcStructuralLoadCase

   For more information about the attributes and data types of an
   IfcStructuralLoadCase, consult the IFC documentation.

   :param load_case: The IfcStructuralLoadCase entity you want to edit
   :param attributes: a dictionary of attribute names and values.
   :return: None


.. py:function:: remove_structural_analysis_model(file: ifcopenshell.file, structural_analysis_model: ifcopenshell.entity_instance) -> None

   Removes an analysis model

   Note that the contents of an analysis model are currently preserved.

   :param structural_analysis_model: The IfcStructuralAnalysisModel to
       remove.
   :return: None


.. py:function:: remove_structural_boundary_condition(file: ifcopenshell.file, connection: Optional[ifcopenshell.entity_instance] = None, boundary_condition: Optional[ifcopenshell.entity_instance] = None) -> None

   Removes a condition from a connection, or an orphaned boundary condition

   :param connection: The IfcStructuralConnection to remove the condition
       from. If omitted, it is assumed to be an orphaned condition.
   :param boundary_condition: The IfcBoundaryCondition to remove.
   :return: None


.. py:function:: remove_structural_connection_condition(file: ifcopenshell.file, relation: ifcopenshell.entity_instance) -> None

   Removes a relationship between a connection and a condition

   The condition and the member itself is preserved.

   :param relation: The IfcRelConnectsStructuralMember to remove.
   :return: None


.. py:function:: remove_structural_load(file: ifcopenshell.file, structural_load: ifcopenshell.entity_instance) -> None

   Removes a structural load

   :param structural_load: The IfcStructuralLoad to remove.
   :return: None


.. py:function:: remove_structural_load_case(file: ifcopenshell.file, load_case: ifcopenshell.entity_instance) -> None

   Removes a structural load case

   :param load_case: The IfcStructuralLoadCase to remove.
   :return: None


.. py:function:: remove_structural_load_group(file: ifcopenshell.file, load_group: ifcopenshell.entity_instance) -> None

   Removes a structural load group

   :param load_group: The IfcStructuralLoadGroup to remove.
   :return: None


.. py:function:: unassign_structural_analysis_model(file: ifcopenshell.file, products: list[ifcopenshell.entity_instance], structural_analysis_model: ifcopenshell.entity_instance) -> None

   Removes a relationship between a structural element and the analysis model

   :param products: The structural elements that is part of the analysis.
   :param structural_analysis_model: The IfcStructuralAnalysisModel that
       the structural element is related to.
   :return: None


