:py:mod:`ifcopenshell.express.schema`
=====================================

.. py:module:: ifcopenshell.express.schema


Module Contents
---------------

.. py:class:: OrderedCaseInsensitiveDict(*args, **kwargs)

   Bases: :py:obj:`collections.OrderedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:method:: get(key, *args, **kwargs)

      Return the value for key if key is in the dictionary, else default.



.. py:class:: OrderedCaseInsensitiveDict_KeyObject

   Bases: :py:obj:`str`


   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to sys.getdefaultencoding().
   errors defaults to 'strict'.

   Initialize self.  See help(type(self)) for accurate signature.


.. py:class:: Schema(parsetree: pyparsing.ParseResults)

   .. py:method:: is_entity(v)


   .. py:method:: is_enumeration(v)


   .. py:method:: is_select(v)


   .. py:method:: is_simpletype(v)


   .. py:method:: is_type(v)


   .. py:attribute:: all_declarations


   .. py:attribute:: declarations


   .. py:attribute:: entities


   .. py:attribute:: enumerations


   .. py:attribute:: functions


   .. py:attribute:: keys


   .. py:attribute:: name


   .. py:attribute:: of_type


   .. py:attribute:: rules


   .. py:attribute:: schema


   .. py:attribute:: schema_declarations


   .. py:attribute:: selects


   .. py:attribute:: simpletypes


   .. py:attribute:: sort


   .. py:attribute:: tree


   .. py:attribute:: types


