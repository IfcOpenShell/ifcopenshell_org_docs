:py:mod:`ifcopenshell.express.rule_compiler`
============================================

.. py:module:: ifcopenshell.express.rule_compiler


Module Contents
---------------

.. py:class:: AttributeGetattrTransformer


   Bases: :py:obj:`ast.NodeTransformer`

   A :class:`NodeVisitor` subclass that walks the abstract syntax tree and
   allows modification of nodes.

   The `NodeTransformer` will walk the AST and use the return value of the
   visitor methods to replace or remove the old node.  If the return value of
   the visitor method is ``None``, the node will be removed from its location,
   otherwise it is replaced with the return value.  The return value may be the
   original node in which case no replacement takes place.

   Here is an example transformer that rewrites all occurrences of name lookups
   (``foo``) to ``data['foo']``::

      class RewriteName(NodeTransformer):

          def visit_Name(self, node):
              return Subscript(
                  value=Name(id='data', ctx=Load()),
                  slice=Constant(value=node.id),
                  ctx=node.ctx
              )

   Keep in mind that if the node you're operating on has child nodes you must
   either transform the child nodes yourself or call the :meth:`generic_visit`
   method for the node first.

   For nodes that were part of a collection of statements (that applies to all
   statement nodes), the visitor may also return a list of nodes rather than
   just a single node.

   Usually you use the transformer like this::

      node = YourTransformer().visit(node)

   .. py:method:: assign_parent_refs(tree)


   .. py:method:: visit_Attribute(node)


   .. py:method:: visit_Subscript(node)



.. py:class:: codegen_rule(pattern, fn)


   .. py:method:: __call__(graph, node)


   .. py:method:: apply(G)
      :staticmethod:



.. py:class:: context(graph, rules)


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __getattr__(k)


   .. py:method:: __getitem__(k)


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __iter__()


   .. py:method:: __len__()


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: branch(i)


   .. py:method:: branches(allow_multiple=False, exclude=())


   .. py:method:: descendants()


   .. py:method:: has_inverse(a)


   .. py:method:: key()


   .. py:method:: parent()



.. py:class:: empty



.. py:function:: make_lowercase(context)


.. py:function:: make_lowercase_if(fn)


.. py:function:: paths(G, root, length)


.. py:function:: process_aggregate_initializer(context)


.. py:function:: process_assignment(context)


.. py:function:: process_case_action(context)


.. py:function:: process_case_statement(context)


.. py:function:: process_domain_rule(context)


.. py:function:: process_expression(context)


.. py:function:: process_function_call(context)


.. py:function:: process_function_decl(context)


.. py:function:: process_if_stmt(context)


.. py:function:: process_index(context)


.. py:function:: process_interval(context)


.. py:function:: process_local_variable(context)


.. py:function:: process_query(context)


.. py:function:: process_rel_op(context)


.. py:function:: process_repeat_stmt(context)


.. py:function:: process_rule_decl(context)


.. py:function:: process_type_decl(scope, context)


.. py:function:: simple_concat(context)


.. py:function:: to_graph(tree)


.. py:function:: wrap_parens(s)


.. py:function:: write_dot(fn, g)


.. py:data:: DEBUG
   :value: False

   

.. py:data:: SLASH

   

.. py:data:: context_class

   

.. py:data:: identifier

   

.. py:data:: rule

   

.. py:data:: schema

   

.. py:data:: wb
   :value: '\\b'

   

