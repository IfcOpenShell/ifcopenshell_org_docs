:py:mod:`ifcopenshell.util.representation`
==========================================

.. py:module:: ifcopenshell.util.representation


Module Contents
---------------

.. py:class:: ResolvedItemDict

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


   .. py:attribute:: item
      :type:  ifcopenshell.entity_instance


   .. py:attribute:: matrix
      :type:  numpy.typing.NDArray[numpy.float64]


.. py:function:: get_context(ifc_file: ifcopenshell.file, context: CONTEXT_TYPE, subcontext: Optional[REPRESENTATION_IDENTIFIER] = None, target_view: Optional[TARGET_VIEW] = None) -> Union[ifcopenshell.entity_instance, None]

   Get IfcGeometricRepresentationSubContext by the provided context type, identifier, and target view.

   :param context: ContextType.
   :param subcontext: A ContextIdentifier string, or any if left blank.
   :param target_view: A TargetView string, or any if left blank.


.. py:function:: get_prioritised_contexts(ifc_file: ifcopenshell.file) -> list[ifcopenshell.entity_instance]

   Gets a list of contexts ordered from high priority to low priority

   Models can contain multiple geometric contexts. When visualising models,
   you may want to prioritise visualising certain contexts over others,
   determined by the context type, identifier, target view, and target scale.

   The default prioritises subcontexts, then contexts. It then prioritises 3D,
   then 2D. It then prioritises bodies, then others. It also prioritises model
   views, then plan views, then others.

   :param ifc_file: The model containing contexts
   :return: A list of IfcGeometricRepresentationContext (or SubContext) from
       high priority to low priority.


.. py:function:: get_representation(element: ifcopenshell.entity_instance, context: Union[ifcopenshell.entity_instance, CONTEXT_TYPE], subcontext: Optional[REPRESENTATION_IDENTIFIER] = None, target_view: Optional[TARGET_VIEW] = None) -> Union[ifcopenshell.entity_instance, None]

   Gets a IfcShapeRepresentation filtered by the context type, identifier, and target view

   :param element: An IfcProduct or IfcTypeProduct
   :param context: Either a specific IfcGeometricRepresentationContext or a ContextType
   :param subcontext: A ContextIdentifier string, or any if left blank.
   :param target_view: A TargetView string, or any if left blank.
   :return: The first IfcShapeRepresentation matching the criteria.


.. py:function:: is_representation_of_context(representation: ifcopenshell.entity_instance, context: Union[ifcopenshell.entity_instance, CONTEXT_TYPE], subcontext: Optional[REPRESENTATION_IDENTIFIER] = None, target_view: Optional[TARGET_VIEW] = None) -> bool

   Check if representation has specified context or context type, identifier, and target view.

   :param representation: IfcShapeRepresentation.
   :param context: Either a specific IfcGeometricRepresentationContext or a ContextType.
   :param subcontext: A ContextIdentifier string, or any if left blank.
   :param target_view: A TargetView string, or any if left blank.


.. py:function:: resolve_items(representation: ifcopenshell.entity_instance, matrix: Optional[numpy.typing.NDArray[numpy.float64]] = None) -> list[ResolvedItemDict]

.. py:function:: resolve_representation(representation: ifcopenshell.entity_instance) -> ifcopenshell.entity_instance

   Resolve possibly mapped representation.

   :param representation: IfcRepresentation
   :return: Representation resolved from mappings


.. py:data:: CONTEXT_TYPE

.. py:data:: REPRESENTATION_IDENTIFIER

.. py:data:: TARGET_VIEW

