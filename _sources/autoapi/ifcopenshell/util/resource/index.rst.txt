:py:mod:`ifcopenshell.util.resource`
====================================

.. py:module:: ifcopenshell.util.resource


Module Contents
---------------

.. py:function:: get_cost(resource: ifcopenshell.entity_instance) -> tuple[Union[float, None], Union[str, None]]

   Get cost data for IfcConstructionResource.

   :return: a tuple of cost and unit.


.. py:function:: get_nested_resources(resource: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

.. py:function:: get_parametric_resource_products(resource: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

.. py:function:: get_parent_cost(resource: ifcopenshell.entity_instance) -> Union[tuple[Union[float, None], Union[str, None]], None]

.. py:function:: get_parent_productivity(resource: ifcopenshell.entity_instance) -> PRODUCTIVITY_PSET_DATA

.. py:function:: get_productivity(resource: ifcopenshell.entity_instance, should_inherit: bool = True) -> PRODUCTIVITY_PSET_DATA

.. py:function:: get_quantity(resource: ifcopenshell.entity_instance) -> float

.. py:function:: get_quantity_produced(productivity: PRODUCTIVITY_PSET_DATA) -> float

.. py:function:: get_quantity_produced_name(productivity: PRODUCTIVITY_PSET_DATA)

.. py:function:: get_resource_required_work(resource: ifcopenshell.entity_instance) -> Union[str, None]

.. py:function:: get_task_assignments(resource: ifcopenshell.entity_instance) -> Union[ifcopenshell.entity_instance, None]

.. py:function:: get_total_quantity_produced(resource: ifcopenshell.entity_instance, quantity_name_in_process: str) -> float

.. py:function:: get_unit_consumed(productivity: PRODUCTIVITY_PSET_DATA) -> Union[Any, None]

.. py:data:: PRODUCTIVITY_PSET_DATA

.. py:data:: RESOURCES_TO_QUANTITIES
   :type:  dict[str, tuple[str, Ellipsis]]

