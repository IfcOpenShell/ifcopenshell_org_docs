:py:mod:`ifcopenshell.util.element`
===================================

.. py:module:: ifcopenshell.util.element


Module Contents
---------------

.. py:function:: batch_remove_deep2(ifc_file: ifcopenshell.file) -> None

   Enable batch removal after running remove_deep2 using serialisation

   See #944 and #3226. Removing elements in an IFC graph is slow as a lot of
   mappings need to be edited. In larger models (>100MB) and when removing
   many elements (>10000), it is faster to serialise the IFC, remove elements
   using string replacement, and then reload the modified serialised IFC.

   The trade-off is that extra memory will be used, and string replacement
   only works with remove_deep2 where the removed elements have no inverses.
   In addition, transaction history will be lost, and any scripts using this
   method will have to refetch elements from the reloaded IFC and cannot rely
   on existing variables in memory.

   :param ifc_file: The IFC file object
   :type ifc_file: ifcopenshell.file
   :rtype: None

   Example:

   .. code:: python

       element1 = model.by_id(123)
       element2 = model.by_id(456)

       ifcopenshell.util.element.batch_remove_deep2(model)
       ifcopenshell.util.element.remove_deep2(model, element2)

       # Notice how we reload the model.
       model = ifcopenshell.util.element.unbatch_remove_deep2(model)

       print(element1) # Don't call element1!


.. py:function:: copy(ifc_file: ifcopenshell.file, element: ifcopenshell.entity_instance) -> ifcopenshell.entity_instance

   Copy a single element. Any referenced elements are not copied.

   GlobalIds are regenerated.

   :param ifc_file: The IFC file object
   :type ifc_file: ifcopenshell.file
   :param element: The IFC element to copy
   :type element: ifcopenshell.entity_instance
   :return: The newly copied element
   :rtype: ifcopenshell.entity_instance


.. py:function:: copy_deep(ifc_file: ifcopenshell.file, element: ifcopenshell.entity_instance, exclude: Optional[list[str]] = None, exclude_callback: Optional[Callable[[ifcopenshell.entity_instance], bool]] = None, copied_entities: Optional[dict[int, ifcopenshell.entity_instance]] = None) -> ifcopenshell.entity_instance

   Recursively copy an element and all of its directly related subelements.

   GlobalIds are regenerated.

   :param ifc_file: The IFC file object
   :type ifc_file: ifcopenshell.file
   :param element: The IFC element to copy
   :type element: ifcopenshell.entity_instance
   :param exclude: An optional list of strings of IFC class names to not copy.
       If any of the subelement is this class, it will not be copied and the
       original instance will be referenced.
   :type exclude: list[str],optional
   :param exclude_callback: A callback to determine whether or not to exclude
       an entity or not. Returns True to exclude and False to exclude.
   :type exclude_callback: function,optional
   :param copied_entities: A dictionary of IDs as keys and entities as values
       to reuse when coming across the same entity twice. This can typically
       be left as None.
   :type copied_entities: dict[int:ifcopenshell.entity_instance], optional
   :return: The newly copied element
   :rtype: ifcopenshell.entity_instance


.. py:function:: get_aggregate(element: ifcopenshell.entity_instance) -> ifcopenshell.entity_instance

   Retrieves the aggregate parent of an element.

   :param element: The IFC element
   :type element: ifcopenshell.entity_instance
   :return: The aggregate of the element
   :rtype: ifcopenshell.entity_instance

   Example:

   .. code:: python

       element = file.by_type("IfcBeam")[0]
       aggregate = ifcopenshell.util.element.get_aggregate(element)


.. py:function:: get_components(element: ifcopenshell.entity_instance, include_ports=False) -> list[ifcopenshell.entity_instance]

   Retrieves the components of an element that have an nest relationship.

   For nested ports, see ifcopenshell.util.system.

   :param element: The IFC element
   :param include_ports: Default as False. Set to true if you also want to get ports.
   :type include_ports: bool,optional
   :return: The components of the element
   :rtype: list[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       element = file.by_type("IfcElementAssembly")[0]
       components = ifcopenshell.util.element.get_components(element)


.. py:function:: get_container(element: ifcopenshell.entity_instance, should_get_direct: bool = False, ifc_class: Optional[str] = None) -> ifcopenshell.entity_instance

   Retrieves the spatial structure container of an element.

   :param element: The IFC element
   :type element: ifcopenshell.entity_instance
   :param should_get_direct: If True, a result is only returned if the element
       is directly contained in a spatial structure element. If False, an
       indirect spatial container may be returned, such as if an element is a
       part of an aggregate, and then if that aggregate is contained in a
       spatial structure element.
   :type should_get_direct: bool
   :param ifc_class: Optionally filter the type of container you're after. For
       example, you may be after the storey, not a space.
   :type ifc_class: str, optional
   :return: The direct or indirect container of the element or None.
   :rtype: ifcopenshell.entity_instance

   Example:

   .. code:: python

       element = file.by_type("IfcWall")[0]
       container = ifcopenshell.util.element.get_container(element)


.. py:function:: get_decomposition(element: ifcopenshell.entity_instance, is_recursive=True) -> list[ifcopenshell.entity_instance]

   Retrieves all subelements of an element based on the spatial decomposition
   hierarchy. This includes all subspaces and elements contained in subspaces,
   parts of an aggreate, all openings, and all fills of any openings.

   :param element: The IFC element
   :type element: ifcopenshell.entity_instance
   :return: The decomposition of the element
   :rtype: list[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       element = file.by_type("IfcProject")[0]
       decomposition = ifcopenshell.util.element.get_decomposition(element)


.. py:function:: get_elements_by_layer(ifc_file: ifcopenshell.file, layer: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

   Get all the elements that are used by a presentation layer

   :param ifc_file: The IFC file
   :type ifc_file: ifcopenshell.file
   :param layer: The IfcPresentationLayerAssignment layer
   :type layer: ifcopenshell.entity_instance
   :return: The elements using the geometric representation
   :rtype: list[ifcopenshell.entity_instance]


.. py:function:: get_elements_by_material(ifc_file: ifcopenshell.file, material: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

   Retrieves the elements related to a material.

   This includes elements using the material as part of a material set or set
   usage.

   :param ifc_file: The IFC file
   :type ifc_file: ifcopenshell.file
   :param material: The IFC Material entity
   :type material: ifcopenshell.entity_instance
   :return: A list of elements using the to the material
   :rtype: list[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       material = file.by_type("IfcMaterial")[0]
       elements = ifcopenshell.util.element.get_elements_by_material(file, material)


.. py:function:: get_elements_by_representation(ifc_file: ifcopenshell.file, representation: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

   Gets all elements using a geometric representation

   :param ifc_file: The IFC file
   :type ifc_file: ifcopenshell.file
   :param representation: The IfcShapeRepresentation representation
   :type representation: ifcopenshell.entity_instance
   :return: The elements using the geometric representation
   :rtype: list[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       representation = file.by_type("IfcShapeRepresentation")[0]
       elements = ifcopenshell.util.element.get_elements_by_representation(file, representation)


.. py:function:: get_elements_by_style(ifc_file: ifcopenshell.file, style: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

   Retrieves the elements whose geometric representation uses a style

   :param ifc_file: The IFC file
   :type ifc_file: ifcopenshell.file
   :param style: The IfcPresentationStyle entity
   :type style: ifcopenshell.entity_instance
   :return: The elements related to the style
   :rtype: list[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       style = file.by_type("IfcSurfaceStyle")[0]
       elements = ifcopenshell.util.element.get_elements_by_style(file, style)


.. py:function:: get_grouped_by(element: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

   Retrieves all subelements of an element based on the group.

   :param element: The IFC element
   :type element: ifcopenshell.entity_instance
   :return: All subelements of the group
   :rtype: list[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       element = file.by_type("IfcGroup")[0]
       subelements = ifcopenshell.util.element.get_grouped_by(element)


.. py:function:: get_groups(element: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

   Retrieves the groups of an element.

   :param element: The IFC element
   :return: List of IfcGroups element is assigned to.
   :rtype: list[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       wall = file.by_type("IfcWall")[0]
       group = ifcopenshell.util.element.get_groups(element)[0]


.. py:function:: get_layers(ifc_file: ifcopenshell.file, element: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

   Get the CAD layers that an element is part of

   An element may have portions or all of its geometry assigned to a
   traditional CAD presentation layer.

   :param ifc_file: The IFC file object
   :type ifc_file: ifcopenshell.file
   :param element: The IFC element to interrogate
   :type element: ifcopenshell.entity_instance
   :return: A list of IfcPresentationLayerAssignment
   :rtype: list[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       element = ifcopenshell.by_type("IfcWall")[0]
       layers = ifcopenshell.util.element.get_layers(element)


.. py:function:: get_material(element: ifcopenshell.entity_instance, should_skip_usage=False, should_inherit=True) -> Union[ifcopenshell.entity_instance, None]

   Gets the material of the element

   The material may be a single material, material set (layered, profiled, or
   constituent), or a material set usage.

   :param element: The element to get the material of.
   :type element: ifcopenshell.entity_instance
   :param should_skip_usage: If set to True, if the material is a material set
       usage, the material set itself will be returned. Useful if you don't
       care about occurrence usage parameters. If False, the usage will be
       returned.
   :type should_skip_usage: bool
   :param should_inherit: If True, any inherited materials from associated
       types will be considered.
   :type should_inherit: bool
   :return: The associated material of the element or `None`.
   :rtype: Union[ifcopenshell.entity_instance, None]

   Example:

   .. code:: python

       element = ifcopenshell.by_type("IfcWall")[0]
       material = ifcopenshell.util.element.get_material(element)


.. py:function:: get_materials(element: ifcopenshell.entity_instance, should_inherit: bool = True) -> list[ifcopenshell.entity_instance]

   Gets individual materials of an element

   If the element has a material set, the individual materials of that set are
   returned as a list.

   :param element: The element to get the materials of.
   :type element: ifcopenshell.entity_instance
   :param should_inherit: If True, any inherited materials from associated
       types will be considered.
   :return: The associated materials of the element.
   :rtype: list[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       element = ifcopenshell.by_type("IfcWall")[0]
       materials = ifcopenshell.util.element.get_materials(element)


.. py:function:: get_nest(element: ifcopenshell.entity_instance) -> ifcopenshell.entity_instance

   Retrieves the nest parent of an element.

   :param element: The IFC element
   :type element: ifcopenshell.entity_instance
   :return: The nested whole of the element
   :rtype: ifcopenshell.entity_instance

   Example:

   .. code:: python

       element = file.by_type("IfcBeam")[0]
       aggregate = ifcopenshell.util.element.get_nest(element)


.. py:function:: get_parts(element: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

   Retrieves the parts of an element that have an aggregation relationship.

   :param element: The IFC element
   :type element: ifcopenshell.entity_instance
   :return: The parts of the element
   :rtype: list[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       element = file.by_type("IfcElementAssembly")[0]
       parts = ifcopenshell.util.element.get_parts(element)


.. py:function:: get_predefined_type(element: ifcopenshell.entity_instance) -> str

   Retrieves the PrefefinedType attribute of an element.

   If the predefined type is user defined, the custom type (such as object
   type, element type, or process type depending on the class) is returned
   instead.  Predefined types from the associated type element are also
   considered first.

   :param element: The IFC Element entity
   :type element: ifcopenshell.entity_instance
   :return: The predefined type of the element
   :rtype: str

   Example:

   .. code:: python

       element = ifcopenshell.by_type("IfcWall")[0]
       predefined_type = ifcopenshell.util.element.get_predefined_type(element)


.. py:function:: get_properties(properties: list[ifcopenshell.entity_instance], verbose: Literal[False] = False) -> dict[str, Any]
                 get_properties(properties: list[ifcopenshell.entity_instance], verbose: Literal[True]) -> dict[str, dict[str, Any]]


.. py:function:: get_property(properties: list[ifcopenshell.entity_instance], name: str, verbose: Literal[False] = False) -> Any
                 get_property(properties: list[ifcopenshell.entity_instance], name: str, verbose: Literal[True]) -> dict[str, Any]


.. py:function:: get_property_definition(definition: Optional[ifcopenshell.entity_instance], prop: None = None, verbose=False) -> dict[str, Any]
                 get_property_definition(definition: Optional[ifcopenshell.entity_instance], prop: str, verbose=False) -> Any
                 get_property_definition(definition: None, prop: None = None, verbose: bool = False) -> None

   if prop name is not provided in `prop`, will return dict of all available properties
   otherwise will return the value of the specified `prop`.


.. py:function:: get_pset(element: ifcopenshell.entity_instance, name: str, prop: Optional[str] = None, psets_only: bool = False, qtos_only: bool = False, should_inherit: bool = True, verbose: bool = False) -> Union[Any, dict[str, Any]]

   Retrieve a single property set or single property

   This is more efficient than ifcopenshell.util.element.get_psets if you know
   exactly which property set and property you are after.

   If should_inherit is true, the pset "id" only refers to the ID of the
   occurrence, not the type's pset.

   :param element: The IFC Element entity
   :type element: ifcopenshell.entity_instance
   :param name: The name of the pset
   :type name: str
   :param prop: The name of the property
   :type prop: str,optional
   :param psets_only: Default as False. Set to true if only property sets are needed.
   :type psets_only: bool,optional
   :param qtos_only: Default as False. Set to true if only quantities are needed.
   :type qtos_only: bool,optional
   :param should_inherit: Default as True. Set to false if you don't want to inherit property sets from the Type.
   :type should_inherit: bool,optional
   :return: A dictionary of property names and values, or a single value if a
       property is specified.
   :rtype: Union[Any, dict[str, Any]]

   Example:

   .. code:: python

       element = ifc_file.by_type("IfcWall")[0]
       psets_and_qtos = ifcopenshell.util.element.get_pset(element, "Pset_WallCommon")


.. py:function:: get_psets(element: ifcopenshell.entity_instance, psets_only=False, qtos_only=False, should_inherit=True, verbose=False) -> dict[str, dict[str, Any]]

   Retrieve property sets, their related properties' names & values and ids.

   If should_inherit is true, the pset "id" only refers to the ID of the
   occurrence, not the type's pset.

   :param element: The IFC Element entity
   :type element: ifcopenshell.entity_instance
   :param psets_only: Default as False. Set to true if only property sets are needed.
   :type psets_only: bool,optional
   :param qtos_only: Default as False. Set to true if only quantities are needed.
   :type qtos_only: bool,optional
   :param should_inherit: Default as True. Set to false if you don't want to inherit property sets from the Type.
   :type should_inherit: bool,optional
   :param verbose: More detailed prop values, defaults to False.
   :type verbose: bool,optional
   :return: Key, value pair of psets' names and their properties' names & values
   :rtype: dict[str, dict[str, Any]]

   Example:

   .. code:: python

       element = ifc_file.by_type("IfcWall")[0]
       psets = ifcopenshell.util.element.get_psets(element, psets_only=True)
       qsets = ifcopenshell.util.element.get_psets(element, qtos_only=True)
       psets_and_qtos = ifcopenshell.util.element.get_psets(element)


.. py:function:: get_quantities(quantities: list[ifcopenshell.entity_instance], verbose: Literal[False] = False) -> dict[str, Any]
                 get_quantities(quantities: list[ifcopenshell.entity_instance], verbose: Literal[True]) -> dict[str, dict[str, Any]]


.. py:function:: get_quantity(quantities: list[ifcopenshell.entity_instance], name: str, verbose: Literal[False] = False) -> Any
                 get_quantity(quantities: list[ifcopenshell.entity_instance], name: str, verbose: Literal[True]) -> dict[str, Any]


.. py:function:: get_referenced_elements(reference: ifcopenshell.entity_instance) -> set[ifcopenshell.entity_instance]

   Get all elements with assigned `reference`

   :param reference: IfcExternalReference subtype reference
   :type reference: ifcopenshell.entity_instance
   :return: The elements with assigned `reference`
   :rtype: set[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       reference = file.by_type("IfcClassificationReference")[0]
       elements = ifcopenshell.util.element.get_referenced_elements(reference)


.. py:function:: get_referenced_structures(element: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

   Retreives a list of referenced spatial elements

   Typically useful for multistorey elements, such as columns or facade
   elements, or elements that span multiple spaces or in-between spaces, such
   as stairs, doors, etc.

   :param element: The IFC element
   :type element: ifcopenshell.entity_instance
   :return: A list of IfcSpatialElement
   :rtype: list[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       element = file.by_type("IfcWall")[0]
       print(ifcopenshell.util.element.get_referenced_structures(element))


.. py:function:: get_shape_aspects(element: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

   Gets element shape aspects

   :param element: The element to get the shape aspects of.
   :type element: ifcopenshell.entity_instance
   :return: The associated shape aspects of the element.
   :rtype: list[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       element = ifcopenshell.by_type("IfcWall")[0]
       shape_aspect = ifcopenshell.util.element.get_shape_aspects(element)


.. py:function:: get_structure_referenced_elements(structure: ifcopenshell.entity_instance) -> set[ifcopenshell.entity_instance]

   Retreives a set of elements referenced by a structure

   :param structure: IfcSpatialElement
   :type element: ifcopenshell.entity_instance
   :return: A set of referenced elements, IfcSpatialReferenceSelect
   :rtype: set[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       element = file.by_type("IfcBuildingStorey")[0]
       print(ifcopenshell.util.element.get_structure_referenced_elements(element))


.. py:function:: get_styles(element: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

   Retrieves the styles used in an element's representation.

   Styles may be retreived from the material or the body representation.

   :param element: The element to get the styles of.
   :type element: ifcopenshell.entity_instance
   :return: A list of surface styles
   :rtype: list[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       wall = file.by_type("IfcWall")[0]
       styles = ifcopenshell.util.element.get_styles(wall)


.. py:function:: get_type(element: ifcopenshell.entity_instance) -> ifcopenshell.entity_instance

   Retrieves the construction type element of an element occurrence

   :param element: The element occurrence
   :type: ifcopenshell.entity_instance
   :return: The related type element
   :rtype: ifcopenshell.entity_instance

   Example:

   .. code:: python

       element = ifcopenshell.by_type("IfcWall")[0]
       element_type = ifcopenshell.util.element.get_type(element)


.. py:function:: get_types(type: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

   Get all the occurrences of a type element

   :param type: The type element
   :type type: ifcopenshell.entity_instance
   :return: A list of occurrences of that type
   :rtype: list[ifcopenshell.entity_instance]

   Example:

   .. code:: python

       element_type = ifcopenshell.by_type("IfcWallType")[0]
       walls = ifcopenshell.util.element.get_types(element_type)


.. py:function:: has_element_reference(value: Any, element: ifcopenshell.entity_instance) -> bool


.. py:function:: remove_deep(ifc_file: ifcopenshell.file, element: ifcopenshell.entity_instance) -> None

   Recursively purges a subgraph safely.

   Do not use, use remove_deep2() instead.


.. py:function:: remove_deep2(ifc_file: ifcopenshell.file, element: ifcopenshell.entity_instance, also_consider: list[ifcopenshell.entity_instance] = [], do_not_delete: list[ifcopenshell.entity_instance] = []) -> None

   Recursively purges a subgraph safely, starting at an element

   This should always be used instead of remove_deep. See #1812. The start
   element must have no inverses. The subgraph to be purged is calculated using
   all forward relationships determined by the traverse() function.

   The deletion process starts at element and traverses forward through the
   subgraph. Each subelement is checked for any inverses outside the subgraph.
   If there are no inverses outside, it may be safely purged. If there are
   inverses that aren't part of this subgraph, that subelement, and all of its
   subelements (i.e. that entire branch of subelements) will not be deleted as
   it is used elsewhere.

   For simple subgraphs, traverse() is sufficient to fully represent all
   related subelements. When it isn't, the ``also_consider`` argument may be
   used. These are typically inverses futher down the subelement chain.

   Note that remove_deep2 will _not_ remove elements in also_consider. Instead,
   it is only used as a consideration for whether or not an element has all
   inverses fully contained in the subgraph.

   The do_not_delete argument contains all elements that may be part of the
   subgraph but are protected from deletion.

   :param ifc_file: The IFC file object
   :type ifc_file: ifcopenshell.file
   :param also_consider: elements to also consider as a part of a subgraph
   :type also_consider: list[ifcopenshell.entity_instance], optional
   :param do_not_delete: elements to protect from deletion
   :type do_not_delete: list[ifcopenshell.entity_instance], optional
   :param element: The starting element that defines the subgraph
   :type element: ifcopenshell.entity_instance


.. py:function:: replace_attribute(element: ifcopenshell.entity_instance, old: Any, new: Any) -> None


.. py:function:: unbatch_remove_deep2(ifc_file: ifcopenshell.file) -> ifcopenshell.file

   Finish removing elements batched from remove_deep2 using string replacement

   See documentation for batch_remove_deep2.

   :param ifc_file: The IFC file object
   :type ifc_file: ifcopenshell.file
   :return: A newly loaded file with the elements removed.
   :rtype: ifcopenshell.file


.. py:data:: REFERENCE_TYPES
   :type: dict[str, ReferenceData]

   

.. py:data:: ReferenceData

   

