:py:mod:`ifcopenshell.util.doc`
===============================

.. py:module:: ifcopenshell.util.doc


Module Contents
---------------

.. py:class:: BaseData

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: spec_url
      :type:  str


.. py:class:: ClassesSuggestions

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: predefined_type
      :type:  NotRequired[str]


.. py:class:: DocExtractor

   .. py:method:: clean_description(description)


   .. py:method:: clean_highlighted_words(text: str) -> str


   .. py:method:: extract_ifc2x3()


   .. py:method:: extract_ifc2x3_entities()


   .. py:method:: extract_ifc2x3_property_sets()


   .. py:method:: extract_ifc2x3_property_sets_site_domains()


   .. py:method:: extract_ifc2x3_types()


   .. py:method:: extract_ifc4()


   .. py:method:: extract_ifc4_entities()


   .. py:method:: extract_ifc4_property_sets()


   .. py:method:: extract_ifc4_property_sets_site_domains()


   .. py:method:: extract_ifc4_types()


   .. py:method:: extract_ifc4x3()


   .. py:method:: extract_ifc4x3_entities()


   .. py:method:: extract_ifc4x3_property_sets()


   .. py:method:: setup_ifc2x3_reference_lookup()


   .. py:method:: setup_ifc4_reference_lookup()


.. py:class:: EntityData

   Bases: :py:obj:`BaseData`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: attributes
      :type:  NotRequired[dict[str, str]]


   .. py:attribute:: predefined_types
      :type:  NotRequired[dict[str, str]]


.. py:class:: PropertyData

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: children
      :type:  NotRequired[dict[str, PropertyData]]


   .. py:attribute:: description
      :type:  str


.. py:class:: PsetData

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: description
      :type:  NotRequired[str]


   .. py:attribute:: properties
      :type:  dict[str, str]


   .. py:attribute:: spec_url
      :type:  NotRequired[str]


.. py:class:: SchemaData

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: classes_suggestions
      :type:  dict[str, ClassesSuggestions]


   .. py:attribute:: entities
      :type:  dict[str, EntityData]


   .. py:attribute:: properties
      :type:  dict[str, PsetData]


   .. py:attribute:: types
      :type:  dict[str, BaseData]


.. py:function:: get_attribute_doc(version: ifcopenshell.util.schema.IFC_SCHEMA, entity: str, attribute: str, recursive=True) -> Union[str, None]

.. py:function:: get_class_suggestions(version: ifcopenshell.util.schema.IFC_SCHEMA, class_name: str) -> Union[ClassesSuggestions, None]

.. py:function:: get_db(version: ifcopenshell.util.schema.IFC_SCHEMA) -> Union[SchemaData, None]

.. py:function:: get_entity_doc(version: ifcopenshell.util.schema.IFC_SCHEMA, entity_name: str, recursive: bool = True) -> Union[EntityData, None]

.. py:function:: get_inverse_attributes(el)

.. py:function:: get_predefined_type_doc(version: ifcopenshell.util.schema.IFC_SCHEMA, entity: str, predefined_type: str) -> Union[str, None]

.. py:function:: get_property_doc(version: ifcopenshell.util.schema.IFC_SCHEMA, pset: str, prop: str) -> Union[str, None]

.. py:function:: get_property_set_doc(version: ifcopenshell.util.schema.IFC_SCHEMA, pset: str) -> Union[PsetData, None]

.. py:function:: get_schema_by_name(version: str) -> ifcopenshell.ifcopenshell_wrapper.schema_definition

.. py:function:: get_type_doc(version: ifcopenshell.util.schema.IFC_SCHEMA, ifc_type: str) -> Union[BaseData, None]

.. py:function:: run_doc_api_examples()

.. py:data:: BASE_MODULE_PATH

.. py:data:: IFC2x3_DOCS_LOCATION

.. py:data:: IFC4_DOCS_LOCATION

.. py:data:: IFC4x3_DEV_LOCATION

.. py:data:: IFC4x3_HTML_LOCATION

.. py:data:: IFC4x3_SPEC_URL_TEMPLATE
   :value: 'https://ifc43-docs.standards.buildingsmart.org/IFC/RELEASE/IFC4x3/HTML/lexical/%s.htm'


.. py:data:: SCHEMA_FILES
   :type:  dict[SUPPORTED_SCHEMA, dict[str, pathlib.Path]]

.. py:data:: SUPPORTED_SCHEMA

.. py:data:: db
   :type:  dict[SUPPORTED_SCHEMA, SchemaData]
   :value: None


.. py:data:: extractor

.. py:data:: schema_by_name
   :type:  dict[SUPPORTED_SCHEMA, Optional[ifcopenshell.ifcopenshell_wrapper.schema_definition]]

