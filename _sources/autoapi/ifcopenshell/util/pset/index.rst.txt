:py:mod:`ifcopenshell.util.pset`
================================

.. py:module:: ifcopenshell.util.pset


Module Contents
---------------

.. py:class:: PsetQto(schema_identifier: str, templates=None)

   .. py:method:: get_applicable(ifc_class='', predefined_type='', pset_only=False, qto_only=False, schema: ifcopenshell.util.schema.IFC_SCHEMA = 'IFC4') -> list[ifcopenshell.entity_instance.entity_instance]


   .. py:method:: get_applicable_names(ifc_class: str, predefined_type: str = '', pset_only: bool = False, qto_only: bool = False, schema: ifcopenshell.util.schema.IFC_SCHEMA = 'IFC4') -> list[str]

      Return names instead of objects for other use eg. enum



   .. py:method:: get_by_name(name: str) -> Optional[ifcopenshell.entity_instance.entity_instance]


   .. py:method:: is_applicable(entity: ifcopenshell.ifcopenshell_wrapper.entity, applicables: str, predefined_type: str = '', template_type: str = 'NOTDEFINED', schema: ifcopenshell.util.schema.IFC_SCHEMA = 'IFC4') -> bool

      applicables can have multiple possible patterns :
      IfcBoilerType                               (IfcClass)
      IfcBoilerType/STEAM                         (IfcClass/PREDEFINEDTYPE)
      IfcBoilerType[PerformanceHistory]           (IfcClass[PerformanceHistory])
      IfcBoilerType/STEAM[PerformanceHistory]     (IfcClass/PREDEFINEDTYPE[PerformanceHistory])



   .. py:method:: is_templated(name: str) -> bool


   .. py:attribute:: schema


   .. py:attribute:: templates
      :value: None



   .. py:attribute:: templates_path


.. py:function:: get_pset_template_type(pset_template: ifcopenshell.entity_instance.entity_instance) -> Literal['PSET', 'QTO', None]

   Get the type of the pset template.
   If type is mixed or not defined, return None.


.. py:function:: get_template(schema: str) -> PsetQto

.. py:data:: templates
   :type:  dict[str, PsetQto]

