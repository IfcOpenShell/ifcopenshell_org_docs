:py:mod:`ifcopenshell.util.geolocation`
=======================================

.. py:module:: ifcopenshell.util.geolocation


Module Contents
---------------

.. py:function:: angle2xaxis(angle)

   Converts an angle into an X axis abscissa and ordinate

   The inverse of ``xaxis2angle``.

   :param angle: The angle in decimal degrees where anticlockwise is positive.
   :type angle: float
   :return: A tuple of X axis abscissa and ordinate
   :rtype: tuple[float]


.. py:function:: angle2yaxis(angle)

   Converts an angle into an Y axis abscissa and ordinate

   The inverse of ``yaxis2angle``.

   :param angle: The angle in decimal degrees where anticlockwise is positive.
   :type angle: float
   :return: A tuple of Y axis abscissa and ordinate
   :rtype: tuple[float]


.. py:function:: auto_enh2xyz(ifc_file, easting, northing, height)

   Convert from global map coordinate eastings, northings, and heights to local XYZ coordinates

   The necessary georeferencing map conversion is automatically detected from
   the IFC map conversion parameters present in the IFC model. If no map
   conversion is present, then the Z coordinate is returned unchanged.

   For IFC2X3, the map conversion is detected from the IfcProject's
   ePSet_MapConversion. See the "User Guide for Geo-referencing in IFC":
   https://www.buildingsmart.org/standards/bsi-standards/standards-library/

   :param ifc_file: The IFC file
   :type ifc_file: ifcopenshell.file
   :param easting: The global easting map coordinate provided in map units.
   :type easting: float
   :param northing: The global northing map coordinate provided in map units.
   :type northing: float
   :param height: The global height map coordinate provided in map units.
   :type height: float
   :return: The local engineering XYZ coordinates in project length units.
   :rtype: tuple[float]


.. py:function:: auto_xyz2enh(ifc_file, x, y, z)

   Convert from local XYZ coordinates to global map coordinate eastings, northings, and heights

   The necessary georeferencing map conversion is automatically detected from
   the IFC map conversion parameters present in the IFC model. If no map
   conversion is present, then the Z coordinate is returned unchanged.

   For IFC2X3, the map conversion is detected from the IfcProject's
   ePSet_MapConversion. See the "User Guide for Geo-referencing in IFC":
   https://www.buildingsmart.org/standards/bsi-standards/standards-library/

   :param ifc_file: The IFC file
   :type ifc_file: ifcopenshell.file
   :param x: The X local engineering coordinate provided in project length units.
   :type x: float
   :param y: The Y local engineering coordinate provided in project length units.
   :type y: float
   :param z: The Z local engineering coordinate provided in project length units.
   :type z: float
   :return: The global map coordinate eastings, northings, and height in map units.
   :rtype: tuple[float]


.. py:function:: auto_z2e(ifc_file, z)

   Convert a Z coordinate to an elevation using model georeferencing data

   The necessary georeferencing map conversion is automatically detected from
   the IFC map conversion parameters present in the IFC model. If no map
   conversion is present, then the Z coordinate is returned unchanged.

   For IFC2X3, the map conversion is detected from the IfcProject's
   ePSet_MapConversion. See the "User Guide for Geo-referencing in IFC":
   https://www.buildingsmart.org/standards/bsi-standards/standards-library/

   :param ifc_file: The IFC file
   :type ifc_file: ifcopenshell.file
   :param z: The Z local engineering coordinate provided in project length units.
   :type z: float
   :return: The elevation in project length units.
   :rtype: float


.. py:function:: dd2dms(dd, use_ms=False)

   Convert decimal degrees to degrees, minutes, and (milli)seconds format

   :param dd: The decimal degrees
   :type dd: float
   :param use_ms: True if to include milliseconds and false otherwise. Defaults to false.
   :type use_ms: bool
   :return: The angle in a tuple of either 3 or 4 values, being degrees,
       minutes, seconds, and optionally milliseconds.
   :rtype: tuple[float]


.. py:function:: dms2dd(degrees, minutes, seconds, ms=0)

   Convert degrees, minutes, and (milli)seconds to decimal degrees

   :param degrees: The degrees component
   :type degrees: int
   :param minutes: The minutes component
   :type minutes: int
   :param seconds: The seconds component
   :type seconds: int
   :param ms: The milliseconds component
   :type ms: int
   :return: The angle in decimal degrees.
   :rtype: float


.. py:function:: enh2xyz(e, n, h, eastings, northings, orthogonal_height, x_axis_abscissa, x_axis_ordinate, scale=None)

   Manually convert  map eastings, northings, and height to local XYZ coordinates

   This function is for advanced users as it allows you to specify your own
   helmert transformation parameters (i.e. those typically stored in
   IfcMapConversion). This manual approach is useful for tests or in case your
   are setting your helmert transformations in non-standard locations, or if
   you are applying your own temporary false origin (such as when federating
   models for digital twins of large cities).

   No unit conversion is performed.

   For most scenarios you should use ``auto_enh2xyz`` instead.

   :param e: The global easting map coordinate.
   :type e: float
   :param n: The global northing map coordinate.
   :type n: float
   :param h: The global height map coordinate.
   :type h: float
   :param eastings: The eastings offset to apply.
   :type eastings: float
   :param northings: The northings offset to apply.
   :type northings: float
   :param orthogonal_height: The orthogonal height offset to apply.
   :type orthogonal_height: float
   :param x_axis_abscissa: The X axis abscissa (i.e. first coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :type x_axis_abscissa: float
   :param x_axis_ordinate: The X axis ordinate (i.e. second coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :type x_axis_ordinate: float
   :param scale: The combined scale factor to convert from local coordinates
       to map coordinates.
   :type scale: float
   :return: A tuple of three ordinates representing XYZ.
   :rtype: tuple[float]


.. py:function:: get_grid_north(ifc_file)

   Get an angle pointing to map grid north

   Anticlockwise is positive.

   The necessary georeferencing map conversion is automatically detected from
   the IFC map conversion parameters present in the IFC model. If no map
   conversion is present, then the Z coordinate is returned unchanged.

   For IFC2X3, the map conversion is detected from the IfcProject's
   ePSet_MapConversion. See the "User Guide for Geo-referencing in IFC":
   https://www.buildingsmart.org/standards/bsi-standards/standards-library/

   :param ifc_file: The IFC file
   :type ifc_file: ifcopenshell.file
   :return: An angle to grid north in decimal degrees
   :rtype: float


.. py:function:: get_true_north(ifc_file)

   Get an angle pointing to global true north

   Anticlockwise is positive.

   Always remember that true north is not a constant! (Unless you are working
   in polar coordinates) This true north is only a reference value useful for
   things like solar analysis on small sites (<1km). If you're after the north
   that your surveyor is using, you're probably after ``get_grid_north``
   instead.

   :param ifc_file: The IFC file
   :type ifc_file: ifcopenshell.file
   :return: An angle to true north in decimal degrees
   :rtype: float


.. py:function:: global2local(matrix, eastings, northings, orthogonal_height, x_axis_abscissa, x_axis_ordinate, scale=None)

   Manually convert a 4x4 matrix from global to local coordinates

   This function is for advanced users as it allows you to specify your own
   helmert transformation parameters (i.e. those typically stored in
   IfcMapConversion). This manual approach is useful for tests or in case your
   are setting your helmert transformations in non-standard locations, or if
   you are applying your own temporary false origin (such as when federating
   models for digital twins of large cities).

   No unit conversion is performed.

   :param matrix: A 4x4 numpy matrix representing global coordinates.
   :type matrix: np.array
   :param eastings: The eastings offset to apply.
   :type eastings: float
   :param northings: The northings offset to apply.
   :type northings: float
   :param orthogonal_height: The orthogonal height offset to apply.
   :type orthogonal_height: float
   :param x_axis_abscissa: The X axis abscissa (i.e. first coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :type x_axis_abscissa: float
   :param x_axis_ordinate: The X axis ordinate (i.e. second coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :type x_axis_ordinate: float
   :param scale: The combined scale factor to convert from local coordinates
       to map coordinates.
   :type scale: float
   :return: A numpy 4x4 array matrix representing local coordinates.
   :rtype: np.array


.. py:function:: local2global(matrix, eastings, northings, orthogonal_height, x_axis_abscissa, x_axis_ordinate, scale=None)

   Manually convert a 4x4 matrix from local to global coordinates

   This function is for advanced users as it allows you to specify your own
   helmert transformation parameters (i.e. those typically stored in
   IfcMapConversion). This manual approach is useful for tests or in case your
   are setting your helmert transformations in non-standard locations, or if
   you are applying your own temporary false origin (such as when federating
   models for digital twins of large cities).

   No unit conversion is performed.

   :param matrix: A 4x4 numpy matrix representing local coordinates.
   :type matrix: np.array
   :param eastings: The eastings offset to apply.
   :type eastings: float
   :param northings: The northings offset to apply.
   :type northings: float
   :param orthogonal_height: The orthogonal height offset to apply.
   :type orthogonal_height: float
   :param x_axis_abscissa: The X axis abscissa (i.e. first coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :type x_axis_abscissa: float
   :param x_axis_ordinate: The X axis ordinate (i.e. second coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :type x_axis_ordinate: float
   :param scale: The combined scale factor to convert from local coordinates
       to map coordinates.
   :type scale: float
   :return: A numpy 4x4 array matrix representing global coordinates.
   :rtype: np.array


.. py:function:: local2global_ifc4x3(matrix, eastings, northings, orthogonal_height, x_axis_abscissa, x_axis_ordinate, scale=1.0, factor_x=1.0, factor_y=1.0, factor_z=1.0)


.. py:function:: xaxis2angle(x, y)

   Converts X axis abscissa and ordinates to an angle in decimal degrees

   :param x: The X axis abscissa
   :type x: float
   :param y: The X axis ordinate
   :type y: float
   :return: The equivalent angle in decimal degrees from the X axis
   :rtype: float


.. py:function:: xyz2enh(x, y, z, eastings, northings, orthogonal_height, x_axis_abscissa, x_axis_ordinate, scale=None)

   Manually convert local XYZ coordinates to map eastings, northings, and height

   This function is for advanced users as it allows you to specify your own
   helmert transformation parameters (i.e. those typically stored in
   IfcMapConversion). This manual approach is useful for tests or in case your
   are setting your helmert transformations in non-standard locations, or if
   you are applying your own temporary false origin (such as when federating
   models for digital twins of large cities).

   No unit conversion is performed.

   For most scenarios you should use ``auto_xyz2enh`` instead.

   :param x: The X local engineering coordinate.
   :type x: float
   :param y: The Y local engineering coordinate.
   :type y: float
   :param z: The Z local engineering coordinate.
   :type z: float
   :param eastings: The eastings offset to apply.
   :type eastings: float
   :param northings: The northings offset to apply.
   :type northings: float
   :param orthogonal_height: The orthogonal height offset to apply.
   :type orthogonal_height: float
   :param x_axis_abscissa: The X axis abscissa (i.e. first coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :type x_axis_abscissa: float
   :param x_axis_ordinate: The X axis ordinate (i.e. second coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :type x_axis_ordinate: float
   :param scale: The combined scale factor to convert from local coordinates
       to map coordinates.
   :type scale: float
   :return: A tuple of three ordinates representing the easting, northing and height.
   :rtype: tuple[float]


.. py:function:: xyz2enh_ifc4x3(x, y, z, eastings, northings, orthogonal_height, x_axis_abscissa, x_axis_ordinate, scale=1.0, factor_x=1.0, factor_y=1.0, factor_z=1.0)


.. py:function:: yaxis2angle(x, y)

   Converts Y axis abscissa and ordinates to an angle in decimal degrees

   The Y axis abscissa and ordinate is how IFC stores true north.

   :param x: The Y axis abscissa
   :type x: float
   :param y: The Y axis ordinate
   :type y: float
   :return: The equivalent angle in decimal degrees from the Y axis
   :rtype: float


.. py:function:: z2e(z, h)

   Manually convert a Z coordinate to an elevation

   This function is for advanced users as it allows you to specify your own
   orthogonal height offset.

   For most scenarios you should use ``auto_z2e`` instead.

   :param z: The Z local engineering coordinate provided in project length units.
   :type z: float
   :param h: The orthogonal height offset in project length units.
   :type h: float
   :return: The elevation in project length units.
   :rtype: float


