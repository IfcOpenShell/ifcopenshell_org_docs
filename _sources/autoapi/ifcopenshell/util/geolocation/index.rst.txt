:py:mod:`ifcopenshell.util.geolocation`
=======================================

.. py:module:: ifcopenshell.util.geolocation


Module Contents
---------------

.. py:class:: HelmertTransformation

   Bases: :py:obj:`NamedTuple`


   .. py:attribute:: e
      :type:  float


   .. py:attribute:: factor_x
      :type:  float


   .. py:attribute:: factor_y
      :type:  float


   .. py:attribute:: factor_z
      :type:  float


   .. py:attribute:: h
      :type:  float


   .. py:attribute:: n
      :type:  float


   .. py:attribute:: scale
      :type:  float


   .. py:attribute:: xaa
      :type:  float


   .. py:attribute:: xao
      :type:  float


.. py:function:: angle2xaxis(angle: float) -> tuple[float, float]

   Converts an angle into an X axis abscissa and ordinate

   The inverse of :func:`xaxis2angle`.

   :param angle: The angle in decimal degrees where anticlockwise is positive.
   :return: A tuple of X axis abscissa and ordinate


.. py:function:: angle2yaxis(angle: float) -> tuple[float, float]

   Converts an angle into an Y axis abscissa and ordinate

   The inverse of :func:`yaxis2angle`.

   :param angle: The angle in decimal degrees where anticlockwise is positive.
   :return: A tuple of Y axis abscissa and ordinate


.. py:function:: auto_enh2xyz(ifc_file, easting, northing, height, is_specified_in_map_units: bool = True)

   Convert from global map coordinate eastings, northings, and heights to local XYZ coordinates

   The necessary georeferencing map conversion is automatically detected from
   the IFC map conversion parameters present in the IFC model. If no map
   conversion is present, then the Z coordinate is returned unchanged.

   For IFC2X3, the map conversion is detected from the IfcProject's
   ePSet_MapConversion. See the "User Guide for Geo-referencing in IFC":
   https://www.buildingsmart.org/standards/bsi-standards/standards-library/

   :param ifc_file: The IFC file
   :param easting: The global easting map coordinate provided in map units.
   :param northing: The global northing map coordinate provided in map units.
   :param height: The global height map coordinate provided in map units.
   :param is_specified_in_map_units: True if the input eastings, northing, and height are in map units.
   :return: The local engineering XYZ coordinates in project length units.


.. py:function:: auto_global2local(ifc_file: ifcopenshell.file, matrix: numpy.typing.NDArray[numpy.float64], is_specified_in_map_units: bool = True) -> numpy.typing.NDArray[numpy.float64]

   Convert a global map matrix to a local matrix

   The necessary georeferencing map conversion is automatically detected from
   the IFC map conversion parameters present in the IFC model. If no map
   conversion is present, then the matrix is returned unchanged.

   :param ifc_file: The IFC file
   :param matrix: A 4x4 numpy matrix representing local coordinates.
   :param should_return_in_map_units: If true, the result is given in map units.
       If false, the result will be converted back into project units.
   :param is_specified_in_map_units: True if the input matrix is in map units.
   :return: A numpy 4x4 array matrix representing global coordinates.


.. py:function:: auto_local2global(ifc_file: ifcopenshell.file, matrix: numpy.typing.NDArray[numpy.float64], should_return_in_map_units: bool = True) -> numpy.typing.NDArray[numpy.float64]

   Convert a local matrix to a global map matrix

   The necessary georeferencing map conversion is automatically detected from
   the IFC map conversion parameters present in the IFC model. If no map
   conversion is present, then the matrix is returned unchanged.

   :param ifc_file: The IFC file
   :param matrix: A 4x4 numpy matrix representing local coordinates.
   :param should_return_in_map_units: If true, the result is given in map units.
       If false, the result will be converted back into project units.
   :return: A numpy 4x4 array matrix representing global coordinates.


.. py:function:: auto_xyz2enh(ifc_file: ifcopenshell.file, x: float, y: float, z: float, should_return_in_map_units: bool = True) -> tuple[float, float, float]

   Convert from local XYZ coordinates to global map coordinate eastings, northings, and heights

   The necessary georeferencing map conversion is automatically detected from
   the IFC map conversion parameters present in the IFC model. If no map
   conversion is present, then the coordinates are returned unchanged.

   For IFC2X3, the map conversion is detected from the IfcProject's
   ePSet_MapConversion. See the "User Guide for Geo-referencing in IFC":
   https://www.buildingsmart.org/standards/bsi-standards/standards-library/

   :param ifc_file: The IFC file
   :param x: The X local engineering coordinate provided in project length units.
   :param y: The Y local engineering coordinate provided in project length units.
   :param z: The Z local engineering coordinate provided in project length units.
   :param should_return_in_map_units: If true, the result is given in map units.
       If false, the result will be converted back into project units.
   :return: The global map coordinate eastings, northings, and height.


.. py:function:: auto_z2e(ifc_file: ifcopenshell.file, z: float, should_return_in_map_units: bool = True) -> float

   Convert a Z coordinate to an elevation using model georeferencing data

   The necessary georeferencing map conversion is automatically detected from
   the IFC map conversion parameters present in the IFC model. If no map
   conversion is present, then the Z coordinate is returned unchanged.

   For IFC2X3, the map conversion is detected from the IfcProject's
   ePSet_MapConversion. See the "User Guide for Geo-referencing in IFC":
   https://www.buildingsmart.org/standards/bsi-standards/standards-library/

   :param ifc_file: The IFC file
   :param z: The Z local engineering coordinate provided in project length units.
   :return: The elevation in project length units.


.. py:function:: dd2dms(dd: float, use_ms: bool = False) -> Union[tuple[float, float, float, float], tuple[float, float, float]]

   Convert decimal degrees to degrees, minutes, and (milli)seconds format

   :param dd: The decimal degrees
   :param use_ms: True if to include milliseconds and false otherwise. Defaults to false.
   :return: The angle in a tuple of either 3 or 4 values, being degrees,
       minutes, seconds, and optionally milliseconds.


.. py:function:: dms2dd(degrees: int, minutes: int, seconds: int, ms: int = 0) -> float

   Convert degrees, minutes, and (milli)seconds to decimal degrees

   :param degrees: The degrees component
   :param minutes: The minutes component
   :param seconds: The seconds component
   :param ms: The milliseconds component
   :return: The angle in decimal degrees.


.. py:function:: enh2xyz(e: float, n: float, h: float, eastings: float = 0.0, northings: float = 0.0, orthogonal_height: float = 0, x_axis_abscissa: float = 1.0, x_axis_ordinate: float = 0.0, scale: float = 1.0, factor_x: float = 1.0, factor_y: float = 1.0, factor_z: float = 1.0) -> tuple[float, float, float]

   Manually convert map eastings, northings, and height to local XYZ coordinates

   This function is for advanced users as it allows you to specify your own
   helmert transformation parameters (i.e. those typically stored in
   IfcMapConversion). This manual approach is useful for tests or in case your
   are setting your helmert transformations in non-standard locations, or if
   you are applying your own temporary false origin (such as when federating
   models for digital twins of large cities).

   For most scenarios you should use :func:`auto_enh2xyz` instead.

   :param e: The global easting map coordinate.
   :param n: The global northing map coordinate.
   :param h: The global height map coordinate.
   :param eastings: The eastings offset to apply.
   :param northings: The northings offset to apply.
   :param orthogonal_height: The orthogonal height offset to apply.
   :param x_axis_abscissa: The X axis abscissa (i.e. first coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :param x_axis_ordinate: The X axis ordinate (i.e. second coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :param scale: The unit scale such that local ordinate * scale = map
       ordinate. E.g. if your project is in millimeters but your CRS is in
       meters, your scale should be 0.001.
   :param factor_x: The combined scale factor for the X value to convert from
       local coordinates to map coordinates. Your surveyor will typically know
       this number and approximate it as a constant on a small site. Typically
       factor_x and factor_y will be identical, and factor_z will be 1.
   :param factor_y: Same but for the Y value.
   :param factor_z: Same but for the Z value.
   :return: A tuple of three ordinates representing XYZ.


.. py:function:: get_grid_north(ifc_file: ifcopenshell.file) -> float

   Get an angle pointing to map grid north

   Anticlockwise is positive.

   The necessary georeferencing map conversion is automatically detected from
   the IFC map conversion parameters present in the IFC model. If no map
   conversion is present, then the Z coordinate is returned unchanged.

   For IFC2X3, the map conversion is detected from the IfcProject's
   ePSet_MapConversion. See the "User Guide for Geo-referencing in IFC":
   https://www.buildingsmart.org/standards/bsi-standards/standards-library/

   :param ifc_file: The IFC file
   :return: An angle to grid north in decimal degrees


.. py:function:: get_helmert_transformation_parameters(ifc_file: ifcopenshell.file) -> Optional[HelmertTransformation]

   Retrieves the parameters of a helmert transformation that represents a
   coordinate operation

   This coordinate operation is typically what is used to convert between
   local engineering coordinates and map coordinates.

   :param ifc_file: The IFC model, typically containing an
       IfcCoordinateOperation such as an IfcMapConversion.
   :return: The parameters of the transformation.


.. py:function:: get_true_north(ifc_file: ifcopenshell.file) -> float

   Get an angle pointing to global true north

   Anticlockwise is positive.

   Always remember that true north is not a constant! (Unless you are working
   in polar coordinates) This true north is only a reference value useful for
   things like solar analysis on small sites (<1km). If you're after the north
   that your surveyor is using, you're probably after :func:`get_grid_north`
   instead.

   :param ifc_file: The IFC file
   :return: An angle to true north in decimal degrees


.. py:function:: get_wcs(ifc_file: ifcopenshell.file) -> Optional[numpy.typing.NDArray[numpy.float64]]

   Gets the WCS (prioritising 3D contexts) as a matrix

   :param: The IFC file
   :return: A 4x4 matrix in project units


.. py:function:: global2local(matrix: numpy.typing.NDArray[numpy.float64], eastings: float = 0.0, northings: float = 0.0, orthogonal_height: float = 0.0, x_axis_abscissa: float = 1.0, x_axis_ordinate: float = 0.0, scale: float = 1.0, factor_x: float = 1.0, factor_y: float = 1.0, factor_z: float = 1.0) -> numpy.typing.NDArray[numpy.float64]

   Manually convert a 4x4 matrix from global to local coordinates

   This function is for advanced users as it allows you to specify your own
   helmert transformation parameters (i.e. those typically stored in
   IfcMapConversion). This manual approach is useful for tests or in case your
   are setting your helmert transformations in non-standard locations, or if
   you are applying your own temporary false origin (such as when federating
   models for digital twins of large cities).

   :param matrix: A 4x4 numpy matrix representing global coordinates.
   :param eastings: The eastings offset to apply.
   :param northings: The northings offset to apply.
   :param orthogonal_height: The orthogonal height offset to apply.
   :param x_axis_abscissa: The X axis abscissa (i.e. first coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :param x_axis_ordinate: The X axis ordinate (i.e. second coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :param scale: The combined scale factor to convert from local coordinates
       to map coordinates.
   :return: A numpy 4x4 array matrix representing local coordinates.


.. py:function:: local2global(matrix: numpy.typing.NDArray[numpy.float64], eastings: float = 0.0, northings: float = 0.0, orthogonal_height: float = 0.0, x_axis_abscissa: float = 1.0, x_axis_ordinate: float = 0.0, scale: float = 1.0, factor_x: float = 1.0, factor_y: float = 1.0, factor_z: float = 1.0) -> numpy.typing.NDArray[numpy.float64]

   Manually convert a 4x4 matrix from local to global coordinates

   This function is for advanced users as it allows you to specify your own
   helmert transformation parameters (i.e. those typically stored in
   IfcMapConversion). This manual approach is useful for tests or in case your
   are setting your helmert transformations in non-standard locations, or if
   you are applying your own temporary false origin (such as when federating
   models for digital twins of large cities).

   For most scenarios you should use :func:`auto_local2global` instead.

   :param matrix: A 4x4 numpy matrix representing local coordinates.
   :param eastings: The eastings offset to apply.
   :param northings: The northings offset to apply.
   :param orthogonal_height: The orthogonal height offset to apply.
   :param x_axis_abscissa: The X axis abscissa (i.e. first coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :param x_axis_ordinate: The X axis ordinate (i.e. second coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :param scale: The combined scale factor to convert from local coordinates
       to map coordinates.
   :return: A numpy 4x4 array matrix representing global coordinates.


.. py:function:: xaxis2angle(x: float, y: float) -> float

   Converts X axis abscissa and ordinates to an angle in decimal degrees

   The X axis abscissa and ordinate is how IFC stores grid north.

   This X axis vector indicates "where is project east, if grid north is up
   the page?". See the diagram on the IfcGeometricRepresentationContext
   documentation for clarification.

   The angle indicates "how do I rotate project east to get to grid east?".
   Alternatively: "how do I rotate project north to get to grid north?".
   Positive angles are anticlockwise.

   :param x: The X axis abscissa
   :param y: The X axis ordinate
   :return: The equivalent angle in decimal degrees from the X axis


.. py:function:: xyz2enh(x: float, y: float, z: float, eastings: float = 0.0, northings: float = 0.0, orthogonal_height: float = 0.0, x_axis_abscissa: float = 1.0, x_axis_ordinate: float = 0.0, scale: float = 1.0, factor_x: float = 1.0, factor_y: float = 1.0, factor_z: float = 1.0) -> tuple[float, float, float]

   Manually convert local XYZ coordinates to map eastings, northings, and height

   This function is for advanced users as it allows you to specify your own
   helmert transformation parameters (i.e. those typically stored in
   IfcMapConversion). This manual approach is useful for tests or in case your
   are setting your helmert transformations in non-standard locations, or if
   you are applying your own temporary false origin (such as when federating
   models for digital twins of large cities).

   For most scenarios you should use :func:`auto_xyz2enh` instead.

   :param x: The X local engineering coordinate.
   :param y: The Y local engineering coordinate.
   :param z: The Z local engineering coordinate.
   :param eastings: The eastings offset to apply.
   :param northings: The northings offset to apply.
   :param orthogonal_height: The orthogonal height offset to apply.
   :param x_axis_abscissa: The X axis abscissa (i.e. first coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :param x_axis_ordinate: The X axis ordinate (i.e. second coordinate) of the
       2D vector that points to the local X axis when in map coordinates.
   :param scale: The unit scale such that local ordinate * scale = map
       ordinate. E.g. if your project is in millimeters but your CRS is in
       meters, your scale should be 0.001.
   :param factor_x: The combined scale factor for the X value to convert from
       local coordinates to map coordinates. Your surveyor will typically know
       this number and approximate it as a constant on a small site. Typically
       factor_x and factor_y will be identical, and factor_z will be 1.
   :param factor_y: Same but for the Y value.
   :param factor_z: Same but for the Z value.
   :return: A tuple of three ordinates representing the easting, northing and height.


.. py:function:: yaxis2angle(x: float, y: float) -> float

   Converts Y axis abscissa and ordinates to an angle in decimal degrees

   The Y axis abscissa and ordinate is how IFC stores true north.

   This Y axis vector indicates "where is true north, if project north is up
   the page?". See the diagram on the IfcGeometricRepresentationContext
   documentation for clarification.

   The angle indicates "how do I rotate project north to get to true north?".
   Positive angles are anticlockwise.

   :param x: The Y axis abscissa
   :param y: The Y axis ordinate
   :return: The equivalent angle in decimal degrees from the Y axis


.. py:function:: z2e(z: float, orthogonal_height: float = 0.0, scale: float = 1.0, factor_z: float = 1.0) -> float

   Manually convert a Z coordinate to a map elevation

   This function is for advanced users as it allows you to specify your own
   orthogonal height offset and transformation parameters.

   For most scenarios you should use :func:`auto_z2e` instead.

   :param z: The Z local engineering coordinate provided in project length units.
   :param orthogonal_height: The orthogonal height offset to apply.
   :param scale: The unit scale such that local ordinate * scale = map
       ordinate. E.g. if your project is in millimeters but your CRS is in
       meters, your scale should be 0.001.
   :param factor_x: The combined scale factor for the Z value to convert from
       local coordinates to map coordinates. Your surveyor will typically know
       this number and approximate it as a constant on a small site. This is
       typically just 1.0, as average combined scale factors usually only
       affect the XY axes.
   :return: The elevation in map units.


