:py:mod:`ifcopenshell.util.constraint`
======================================

.. py:module:: ifcopenshell.util.constraint


Module Contents
---------------

.. py:function:: get_constrained_elements(constraint: ifcopenshell.entity_instance) -> set[ifcopenshell.entity_instance]

   Retrieves the elements constrained by a `constraint`.

   :param product: The IFC element.
   :type product: ifcopenshell.entity_instance
   :return: Set of elements constrained by a `constrant`.
   :rtype: set[ifcopenshell.entity_instance]


.. py:function:: get_constraints(product: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

   Retrieves the constraints assigned to the `product`.

   :param product: The IFC element.
   :type product: ifcopenshell.entity_instance
   :return: List of assigned constraints.
   :rtype: list[ifcopenshell.entity_instance]


.. py:function:: get_metric_constraints(resource: ifcopenshell.entity_instance, attribute) -> Union[list[ifcopenshell.entity_instance], None]

.. py:function:: get_metric_reference(metric: ifcopenshell.entity_instance, is_deep=True)

.. py:function:: get_metrics(constraint: ifcopenshell.entity_instance) -> list[ifcopenshell.entity_instance]

   Retrieves the list of nested constraints for a IfcObjective `constraint`.

   :param product: IfcObjective constraint.
   :type product: ifcopenshell.entity_instance
   :return: List of nested constraints.
   :rtype: list[ifcopenshell.entity_instance]


.. py:function:: is_attribute_locked(product: ifcopenshell.entity_instance, attribute) -> bool

.. py:function:: is_hard_constraint(metric: ifcopenshell.entity_instance) -> bool

