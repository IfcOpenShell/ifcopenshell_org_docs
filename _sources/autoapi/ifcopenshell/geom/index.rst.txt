:py:mod:`ifcopenshell.geom`
===========================

.. py:module:: ifcopenshell.geom

.. autoapi-nested-parse::

   Geometry processing and analysis

   IFC may define geometry explicitly (such as meshes) or implicitly (such as
   parametric extrusions). This module provides methods to extract geometric
   definitions in IFC into explicitly tessellated triangles or OpenCASCADE Breps
   for further processing.

   This is typically needed when writing software to visualise or analyse
   geometry. See also :mod:`ifcopenshell.util.shape` for deriving quantities.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   app/index.rst
   code_editor_pane/index.rst
   main/index.rst
   occ_utils/index.rst


Package Contents
----------------

.. py:class:: entity_instance(e: Union[ifcopenshell.ifcopenshell_wrapper.entity_instance, tuple[str, str]], file: Union[ifcopenshell.file, None] = None)

   Represents an entity (wall, slab, property, etc) of an IFC model

   An IFC model consists of entities. Examples of entities include walls,
   slabs, doors and so on. Entities can also be non-physical things, like
   properties, systems, construction tasks, colours, geometry, and more.

   Entities are defined through an **IFC Class**. There are hundreds of **IFC
   Classes** defined as part of the ISO standard by the buildingSMART
   International organisation. The **IFC Class** defines the attributes of an
   entity, as well as the data types and whether or not an attribute is
   mandatory or optional.

   IfcOpenShell's API dynamically implements the IFC schema. You will not find
   documentation about available **IFC Classes**, or what attributes they
   have.  Please consult the buildingSMART official documentation or start
   reading :doc:`/introduction/introduction_to_ifc`.

   In addition to the Python methods you see documented here, an instantiated
   entity_instance will have attributes defined by its IFC class. For example,
   an entity instance which is an IfcWall class will have a ``Name``
   attribute, and an IfcColourRgb will have a ``Red`` attribute. Please
   consult the buildingSMART official documentation.

   Example:

   .. code:: python

       model = ifcopenshell.open(file_path)
       walls = model.by_type("IfcWall")
       wall = walls[0]

       print(wall) # #38=IFCWALL('2MEinnTPbCMwLOgceaQZFu',$,$,'My Wall',$,#52,#47,$,$);
       print(wall.is_a()) # IfcWall

       # Note: the `Name` attribute is dynamic, based on the IFC class.
       print(wall.Name) # My Wall

       # Attributes are ordered and may also be accessed via index.
       print(wall[3]) # My Wall

       print(wall.__class__) # <class 'ifcopenshell.entity_instance'>

   :param e: Wrapper's ``entity_instance`` or a tuple ``(schema_identifier, ifc_class)``.


   .. py:method:: attribute_name(attr_idx: int) -> str

      Return the name of a positional attribute of the element

      :param attr_idx: The index of the attribute



   .. py:method:: attribute_type(attr: Union[int, str]) -> str

      Return the data type of a positional attribute of the element

      :param attr: The index or name of the attribute



   .. py:method:: compare(other, op, reverse=False)

      Compares with another instance.

      For simple types the declaration name is not taken into account:

      >>> f = ifcopenshell.file()
      >>> f.createIfcInteger(0) < f.createIfcPositiveInteger(1)
      True

      For entity types the declaration name is taken into account:

      >>> f.createIfcWall('a') < f.createIfcWall('b')
      True

      >>> f.createIfcWallStandardCase('a') < f.createIfcWall('b')
      False

      Comparing simple types with different underlying types throws an exception:

      >>> f.createIfcInteger(0) < f.createIfcLabel('x')
      Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "entity_instance.py", line 371, in compare
          return op(a, b)
      TypeError: '<' not supported between instances of 'int' and 'str'

      Args:
          other (_type_): Right hand side (or lhs when reverse = True)
          op (_type_): The comparison operator (likely from the operator module)
          reverse (bool, optional): When true swaps lhs and rhs. Defaults to False.

      Returns:
          bool: The comparison predicate applied to self and other



   .. py:method:: get_info(include_identifier: bool = True, recursive: bool = False, return_type: Union[type[dict], type] = dict, ignore: collections.abc.Sequence[str] = (), scalar_only: bool = False) -> dict[str, Any]

      Return a dictionary of the entity_instance's properties (Python and IFC) and their values.

      Resulting dictionary keys: 'id', 'type', all entity attribute names.

      :param include_identifier: Whether or not to include the STEP numerical identifier
      :param recursive: Whether or not to convert referenced IFC elements into dictionaries too. All attributes also apply recursively
      :param return_type: The return data type to be casted into
      :param ignore: A list of attribute names to ignore
      :param scalar_only: Filters out all values that are IFC instances
      :returns: A dictionary of properties and their corresponding values

      Example:

      .. code:: python

          ifc_file = ifcopenshell.open(file_path)
          products = ifc_file.by_type("IfcProduct")
          obj_info = products[0].get_info()
          print(obj_info.keys())
          >>> dict_keys(['Description', 'Name', 'BuildingAddress', 'LongName', 'GlobalId', 'ObjectPlacement', 'OwnerHistory', 'ObjectType',
          >>> ...'ElevationOfTerrain', 'CompositionType', 'id', 'Representation', 'type', 'ElevationOfRefHeight'])



   .. py:method:: get_info_2(include_identifier: bool = True, recursive: bool = False, return_type: type[dict] = dict, ignore: collections.abc.Sequence[str] = ()) -> dict[str, Any]

      More perfomant version of `.get_info()` but with limited arguments values.

      Method has exactly the same signature as `.get_info()` but it doesn't support getting information non-recursively.

      Currently supported arguments values:
          * recursive: `True` (will fail with default `False` value from `.get_info()`)
          * return_type: `dict`
          * ignore: `()` (empty tuple)



   .. py:method:: id() -> int

      Return the STEP numerical identifier



   .. py:method:: is_a() -> str
                  is_a(ifc_class: str) -> bool
                  is_a(with_schema: bool) -> str

      Return the IFC class name of an instance, or checks if an instance belongs to a class.

      The check will also return true if a parent class name is provided.

      :param args: If specified, is a case insensitive IFC class name to check
          or if specified as a boolean then will define whether
          returned IFC class name should include schema name
          (e.g. "IFC4.IfcWall" if `True` and "IfcWall" if `False`).
          If omitted will act as `False`.
      :returns: Either the name of the class, or a boolean if it passes the check

      Example:

      .. code:: python

          f = ifcopenshell.file()
          f.create_entity('IfcPerson')
          f.is_a()
          >>> 'IfcPerson'
          f.is_a('IfcPerson')
          >>> True



   .. py:method:: is_entity() -> bool

      Tests whether the instance is an entity type as opposed to a simple data type.

      Returns:
          bool: True if the instance is an entity



   .. py:method:: to_string(valid_spf=True) -> str

      Returns a string representation of the current entity instance.
      Equal to str(self) when valid_spf=False. When valid_spf is True
      returns a representation of the string that conforms to valid Step
      Physical File notation. The difference being entity names in upper
      case and string attribute values with unicode values encoded per
      the specific control directives.



   .. py:method:: unwrap_value(v)
      :staticmethod:



   .. py:method:: walk(f: collections.abc.Callable[[Any], bool], g: collections.abc.Callable[[Any], Any], value: Any) -> Any
      :staticmethod:


      Applies a transformation to `value` based on a given condition.

      If value is a nested structure (e.g., a list or a tuple) will apply
      transformation to it's elements.

      :param f: A callable that takes a single argument and returns a boolean
          value. It represents the condition.
      :param g: A callable that takes a single argument and returns a
          transformed value. It represents the transformation.
      :param value: Any object, the input value to be processed
      :return: Transformed value

      Example:

      .. code:: python

          # Define condition and transformation functions
          condition = lambda v: v == old
          transform = lambda v: new

          # Usage example
          attribute_value = element.RelatedElements
          print(old in attribute_value, new in attribute_value) # True, False

          result = element.walk(condition, transform, element.RelatedElements)
          print(old in attribute_value, new in attribute_value) # False, True



   .. py:method:: wrap_value(v, file: ifcopenshell.file)
      :staticmethod:



   .. py:property:: file


   .. py:attribute:: method_list
      :type:  Union[MethodList, None]
      :value: None



   .. py:attribute:: wrapped_data
      :type:  ifcopenshell.ifcopenshell_wrapper.entity_instance


.. py:class:: file(f: Optional[ifcopenshell.ifcopenshell_wrapper.file] = None, schema: Optional[ifcopenshell.util.schema.IFC_SCHEMA] = None, schema_version: Optional[tuple[int, int, int, int]] = None)

   Base class for containing IFC files.

   Class has instance methods for filtering by element Id, Type, etc.
   Instantiated objects can be subscripted by Id or Guid

   Example:

   .. code:: python

       model = ifcopenshell.open(file_path)
       products = model.by_type("IfcProduct")
       print(products[0].id(), products[0].GlobalId) # 122 2XQ$n5SLP5MBLyL442paFx
       print(products[0] == model[122] == model["2XQ$n5SLP5MBLyL442paFx"]) # True

   Create a new blank IFC model

   This IFC model does not have any entities in it yet. See the
   ``create_entity`` function for how to create new entities. All data is
   stored in memory. If you wish to write the IFC model to disk, see the
   ``write`` function.

   :param f: The underlying IfcOpenShell file object to be wrapped. This
       is an internal implementation detail and should generally be left
       as None by users.
   :param schema: Which IFC schema to use, chosen from "IFC2X3", "IFC4",
       or "IFC4X3". These refer to the ISO approved versions of IFC.
       Defaults to "IFC4" if not specified, which is currently recommended
       for all new projects.
   :param schema_version: If you want to specify an exact version of IFC
       that may not be an ISO approved version, use this argument instead
       of ``schema``. IFC versions on technical.buildingsmart.org are
       described using 4 integers representing the major, minor, addendum,
       and corrigendum number. For example, (4, 0, 2, 1) refers to IFC4
       ADD2 TC1, which is the official version approved by ISO when people
       refer to "IFC4". Generally you should not use this argument unless
       you are testing non-ISO IFC releases.

   Example:

   .. code:: python

       # Create a new IFC4 model, create a wall, then save it to an IFC-SPF file.
       model = ifcopenshell.file()
       model.create_entity("IfcWall")
       model.write("/path/to/model.ifc")

       # Create a new IFC4X3 model
       model = ifcopenshell.file(schema="IFC4X3")

       # A poweruser testing out a particular version of IFC4X3
       model = ifcopenshell.file(schema_version=(4, 3, 0, 1))


   .. py:method:: add(inst: ifcopenshell.entity_instance, _id: int = None) -> ifcopenshell.entity_instance

      Adds an entity including any dependent entities to an IFC file.
      If the entity already exists, it is not re-added. Existence of entity is checked by it's `.identity()`.

      :param inst: The entity instance to add
      :returns: An ifcopenshell.entity_instance



   .. py:method:: assign_header_from(other: ifcopenshell.file) -> None


   .. py:method:: batch()

      Low-level mechanism to speed up deletion of large subgraphs



   .. py:method:: begin_transaction() -> None


   .. py:method:: by_guid(guid: str) -> ifcopenshell.entity_instance

      Return an IFC entity instance filtered by IFC GUID.

      :param guid: GlobalId value in 22-character encoded form

      :raises RuntimeError: If `guid` is not found.

      :returns: An ifcopenshell.entity_instance



   .. py:method:: by_id(id: int) -> ifcopenshell.entity_instance

      Return an IFC entity instance filtered by IFC ID.

      :param id: STEP numerical identifier

      :raises RuntimeError: If `id` is not found.

      :returns: An ifcopenshell.entity_instance



   .. py:method:: by_type(type: str, include_subtypes=True) -> list[ifcopenshell.entity_instance]

      Return IFC objects filtered by IFC Type and wrapped with the entity_instance class.

      If an IFC type class has subclasses, all entities of those subclasses are also returned.

      :param type: The case insensitive type of IFC class to return.
      :param include_subtypes: Whether or not to return subtypes of the IFC class

      :raises RuntimeError: If `type` is not found in IFC schema.

      :returns: A list of ifcopenshell.entity_instance objects



   .. py:method:: create_entity(type: str, *args: Any, **kwargs: Any) -> ifcopenshell.entity_instance

      Create a new IFC entity in the file.

      You can also use dynamic methods similar to `ifc_file.createIfcWall(...)`
      to create IFC entities. They work exactly the same as if you would do
      `ifc_file.create_entity("IfcWall", ...)` but the resulting typing
      is not as accurate as for `create_entity` due to a dynamic nature
      of those methods.

      :param type: Case insensitive name of the IFC class
      :param args: The positional arguments of the IFC class
      :param kwargs: The keyword arguments of the IFC class
      :returns: An entity instance

      Example:

      .. code:: python

          f = ifcopenshell.file()
          f.create_entity("IfcPerson")
          # >>> #1=IfcPerson($,$,$,$,$,$,$,$)
          f.create_entity("IfcPerson", "Foobar")
          # >>> #2=IfcPerson('Foobar',$,$,$,$,$,$,$)
          f.create_entity("IfcPerson", Identification="Foobar")
          # >>> #3=IfcPerson('Foobar',$,$,$,$,$,$,$)



   .. py:method:: discard_transaction() -> None


   .. py:method:: end_transaction() -> None


   .. py:method:: from_pointer(address: int) -> file
      :staticmethod:



   .. py:method:: from_string(s: str) -> file
      :staticmethod:



   .. py:method:: get_inverse(inst: ifcopenshell.entity_instance, allow_duplicate: Literal[False] = False, with_attribute_indices: bool = False) -> set[ifcopenshell.entity_instance]
                  get_inverse(inst: ifcopenshell.entity_instance, allow_duplicate: Literal[True], with_attribute_indices: bool = False) -> list[ifcopenshell.entity_instance]
                  get_inverse(inst: ifcopenshell.entity_instance, allow_duplicate: bool, with_attribute_indices: bool = False) -> Union[list[ifcopenshell.entity_instance], set[ifcopenshell.entity_instance]]

      Return a list of entities that reference this entity

      Warning: this is a slow function, especially when there is a large
      number of inverses (such as for a shared owner history). If you are
      only interested in the total number of inverses (typically 0, 1, or N),
      consider using :func:`get_total_inverses`.

      :param inst: The entity instance to get inverse relationships
      :param allow_duplicate: Returns a `list` when True, `set` when False
      :param with_attribute_indices: Returns pairs of <i, idx>
         where i[idx] is inst or contains inst. Requires allow_duplicate=True
      :returns: A list or set of ifcopenshell.entity_instance objects.



   .. py:method:: get_total_inverses(inst: ifcopenshell.entity_instance) -> int

      Returns the number of entities that reference this entity

      This is equivalent to `len(model.get_inverse(element))`, but
      significantly faster.

      :param inst: The entity instance to get inverse relationships
      :returns: The total number of references



   .. py:method:: redo() -> None


   .. py:method:: remove(inst: ifcopenshell.entity_instance) -> None

      Deletes an IFC object in the file.

      Attribute values in other entity instances that reference the deleted
      object will be set to null. In the case of a list or set of references,
      the reference to the deleted will be removed from the aggregate.

      :param inst: The entity instance to delete



   .. py:method:: set_history_size(size: int) -> None


   .. py:method:: to_string() -> str


   .. py:method:: traverse(inst: ifcopenshell.entity_instance, max_levels: Optional[int] = None, breadth_first: bool = False) -> list[ifcopenshell.entity_instance]

      Get a list of all referenced instances for a particular instance including itself

      :param inst: The entity instance to get all sub instances
      :param max_levels: How far deep to recursively fetch sub instances. None or -1 means infinite.
      :param breadth_first: Whether to use breadth-first search, the default is depth-first.
      :returns: A list of ifcopenshell.entity_instance objects



   .. py:method:: unbatch()

      Low-level mechanism to speed up deletion of large subgraphs



   .. py:method:: undo() -> None


   .. py:method:: write(path: os.PathLike | str, format: Optional[str] = None, zipped: bool = False) -> None

      Write ifc model to file.

      :param format: Force use of a specific format. Guessed from file name
          if None.  Supported formats : .ifc, .ifcXML, .ifcZIP (equivalent to
          format=".ifc" with zipped=True) For zipped .ifcXML use
          format=".ifcXML" with zipped=True
      :param zipped: zip the file after it is written

      Example:

      .. code:: python

          model.write("path/to/model.ifc")
          model.write("path/to/model.ifcXML")
          model.write("path/to/model.ifcZIP")
          model.write("path/to/model.ifcZIP", format=".ifcXML", zipped=True)
          model.write("path/to/model.anyextension", format=".ifcXML")



   .. py:attribute:: future
      :type:  list[Transaction]

      Reversed chronological order - from newest to oldest.



   .. py:attribute:: header
      :type:  ifcopenshell.ifcopenshell_wrapper.IfcSpfHeader


   .. py:attribute:: history
      :type:  list[Transaction]

      Chronological order - from oldest to newest.



   .. py:attribute:: history_size
      :type:  int
      :value: 64



   .. py:property:: mvd


   .. py:property:: schema
      :type: ifcopenshell.util.schema.IFC_SCHEMA


      General IFC schema version: IFC2X3, IFC4, IFC4X3.



   .. py:property:: schema_identifier
      :type: str


      Full IFC schema version: IFC2X3_TC1, IFC4_ADD2, IFC4X3_ADD2, etc.



   .. py:property:: schema_version
      :type: tuple[int, int, int, int]


      Numeric representation of the full IFC schema version.

      E.g. IFC4X3_ADD2 is represented as (4, 3, 2, 0).



   .. py:attribute:: to_delete
      :type:  Union[set[ifcopenshell.entity_instance], None]
      :value: None


      Entities for batch removal.



   .. py:attribute:: transaction
      :type:  Optional[Transaction]
      :value: None



   .. py:attribute:: units
      :type:  dict[str, ifcopenshell.entity_instance.entity_instance]


   .. py:attribute:: wrapped_data
      :type:  ifcopenshell.ifcopenshell_wrapper.file


.. py:class:: iterator(settings: iterator.__init__.settings, file_or_filename: Union[ifcopenshell.file.file, str], num_threads: int = 1, include: Optional[Union[list[ifcopenshell.entity_instance.entity_instance], list[str]]] = None, exclude: Optional[Union[list[ifcopenshell.entity_instance.entity_instance], list[str]]] = None, geometry_library: GEOMETRY_LIBRARY = 'opencascade')

   Bases: :py:obj:`ifcopenshell.ifcopenshell_wrapper.Iterator`


   .. py:method:: get()

      Get last processed element.



   .. py:method:: get_task_products()


   .. py:attribute:: settings


.. py:class:: missing_setting

.. py:class:: serializer_settings(**kwargs)

   Bases: :py:obj:`settings_mixin`, :py:obj:`ifcopenshell.ifcopenshell_wrapper.SerializerSettings`


   Pythonic interface mixin to the settings modules and
   to provide an additional setting to enable pythonOCC
   when available


.. py:class:: serializers

   .. py:method:: guess_from_extension(filepath: str)
      :classmethod:



   .. py:method:: obj(out_filename: Union[str, serializers], mtl_filename: Union[str, serializers], geometry_settings: serializers.obj.settings, settings: serializer_settings) -> ifcopenshell.ifcopenshell_wrapper.WaveFrontOBJSerializer
      :staticmethod:



   .. py:method:: svg(out_filename: Union[str, serializers], geometry_settings: serializers.svg.settings, settings: serializer_settings) -> ifcopenshell.ifcopenshell_wrapper.SvgSerializer
      :staticmethod:



   .. py:method:: ttl(out_filename: Union[str, serializers], geometry_settings: serializers.ttl.settings, settings: serializer_settings) -> ifcopenshell.ifcopenshell_wrapper.SvgSerializer
      :staticmethod:



   .. py:attribute:: buffer


   .. py:attribute:: collada


   .. py:attribute:: gltf


   .. py:attribute:: hdf5


   .. py:attribute:: xml


.. py:class:: settings(**kwargs)

   Bases: :py:obj:`settings_mixin`, :py:obj:`ifcopenshell.ifcopenshell_wrapper.Settings`


   Pythonic interface mixin to the settings modules and
   to provide an additional setting to enable pythonOCC
   when available


   .. py:attribute:: use_python_opencascade
      :value: False



.. py:class:: settings_mixin(**kwargs)

   Pythonic interface mixin to the settings modules and
   to provide an additional setting to enable pythonOCC
   when available


   .. py:method:: apply_namespace(namespace) -> None

      Accepts an argparse.Namespace object, enumerates over the values in this namespace and
      writes them to the settings when available



   .. py:method:: build_parser(parser) -> None

      Accepts an argparse.ArgumentParser object, enumerates the settings in this container and
      adds argument parser rules for each.



   .. py:method:: get(k: SETTING) -> Any
                  get(k: SERIALIZER_SETTING) -> Any

      Return value of the setting named `k`.

      :raises RuntimeError: If there is no setting with name `k`.



   .. py:method:: name(k: str) -> Union[SETTING, SERIALIZER_SETTING]
      :staticmethod:



   .. py:method:: rname(k: Union[SETTING, SERIALIZER_SETTING]) -> str
      :staticmethod:



   .. py:method:: set(k: SETTING, v: Any) -> None
                  set(k: SERIALIZER_SETTING, v: Any) -> None

      Set value of the setting named `k` to `v`.

      :raises RuntimeError: If there is no setting with name `k`.



   .. py:method:: setting_names() -> tuple[SETTING, Ellipsis]
                  setting_names() -> tuple[SERIALIZER_SETTING, Ellipsis]


.. py:class:: tree(file: Optional[tree.__init__.file] = None, settings: Optional[tree.__init__.settings] = None)

   Bases: :py:obj:`ifcopenshell.ifcopenshell_wrapper.tree`


   .. py:method:: add_file(file: tree.add_file.file, settings: tree.add_file.settings) -> None


   .. py:method:: add_iterator(iterator: tree.add_iterator.iterator) -> None


   .. py:method:: clash_clearance_many(set_a: collections.abc.Iterable[ifcopenshell.entity_instance.entity_instance], set_b: collections.abc.Iterable[ifcopenshell.entity_instance.entity_instance], clearance: float = 0.05, check_all: bool = False) -> tuple[ifcopenshell.ifcopenshell_wrapper.clash, Ellipsis]


   .. py:method:: clash_collision_many(set_a: collections.abc.Iterable[ifcopenshell.entity_instance.entity_instance], set_b: collections.abc.Iterable[ifcopenshell.entity_instance.entity_instance], allow_touching=False) -> tuple[ifcopenshell.ifcopenshell_wrapper.clash, Ellipsis]


   .. py:method:: clash_intersection_many(set_a: collections.abc.Iterable[ifcopenshell.entity_instance.entity_instance], set_b: collections.abc.Iterable[ifcopenshell.entity_instance.entity_instance], tolerance: float = 0.002, check_all: bool = True) -> tuple[ifcopenshell.ifcopenshell_wrapper.clash, Ellipsis]


   .. py:method:: get_clash_type(clash_type_i: int) -> ClashType
      :staticmethod:


      Convert clash type index to a readable string format.

      :param clash_type_i: Type index that comes from ``clash.clash_type``.



   .. py:method:: select(value: Union[ifcopenshell.entity_instance.entity_instance, ifcopenshell.ifcopenshell_wrapper.BRepElement, tuple[float, float, float], OCC.Core.TopoDS.TopoDS_Shape], **kwargs) -> list[ifcopenshell.entity_instance.entity_instance]


   .. py:method:: select_box(value, **kwargs) -> list[ifcopenshell.entity_instance.entity_instance]


.. py:function:: consume_iterator(it: iterator, with_progress: Literal[False] = False) -> collections.abc.Generator[IteratorOutput, None, None]
                 consume_iterator(it: iterator, with_progress: Literal[True]) -> collections.abc.Generator[tuple[int, IteratorOutput], None, None]
                 consume_iterator(it: iterator, with_progress: bool) -> collections.abc.Generator[Union[IteratorOutput, tuple[int, IteratorOutput]], None, None]

.. py:function:: create_shape(settings: create_shape.settings, inst: ifcopenshell.entity_instance.entity_instance, repr: Optional[ifcopenshell.entity_instance.entity_instance] = None, geometry_library: GEOMETRY_LIBRARY = 'opencascade') -> Union[ShapeType, ShapeElementType, ifcopenshell.ifcopenshell_wrapper.Transformation, ifcopenshell.geom.occ_utils.shape_tuple, OCC.Core.TopoDS.TopoDS_Shape]

   Returns a geometric interpretation of the IFC entity instance

   Note that in Python, you must store a reference to the element returned by this function to prevent garbage
   collection when you access its children. See #1124.

   :raises RuntimeError: If failed to process shape. You can turn detailed logging to get more details.

   :return:
       - `inst` is IfcProduct and `repr` provided / None -> ShapeElementType

       - `inst` is IfcRepresentation and `repr` is None -> ShapeType

       - `inst` is IfcRepresentationItem and `repr` is None -> ShapeType

       - `inst` is IfcProfileDef and `repr` is None -> ShapeType

       - `inst` is IfcPlacement / IfcObjectPlacement -> Transformation

       - `inst` is IfcTypeProduct and `repr` is None -> None

       - `inst` is IfcTypeProduct and `repr` is provided -> RuntimeError
       (for IfcTypeProducts provide just IfcRepresentation as `inst`).


       If 'use-python-opencascade' is enabled in settings then

       - instead of ShapeElementType it returns shape_tuple, 

       - instead of ShapeType it returns TopoDS.TopoDS_Shape.

   Example:

   .. code:: python

       settings = ifcopenshell.geom.settings()
       settings.set("use-python-opencascade", True)

       ifc_file = ifcopenshell.open(file_path)
       products = ifc_file.by_type("IfcProduct")

       for i, product in enumerate(products):
           if product.Representation is not None:
               try:
                   created_shape = geom.create_shape(settings, inst=product)
                   shape = created_shape.geometry # see #1124
                   shape_gpXYZ = shape.Location().Transformation().TranslationPart() # These are methods of the TopoDS_Shape class from pythonOCC
                   print(shape_gpXYZ.X(), shape_gpXYZ.Y(), shape_gpXYZ.Z()) # These are methods of the gpXYZ class from pythonOCC
               except:
                   print("Shape creation failed")


.. py:function:: iterate(settings: iterate.settings, file_or_filename: Union[ifcopenshell.file.file, str], num_threads: int = 1, include: Optional[Union[list[ifcopenshell.entity_instance.entity_instance], list[str]]] = None, exclude: Optional[Union[list[ifcopenshell.entity_instance.entity_instance], list[str]]] = None, *, with_progress: Literal[False] = False, cache: Optional[str] = None, serializer_settings: Optional[iterate.serializer_settings] = None, geometry_library: GEOMETRY_LIBRARY = 'opencascade') -> collections.abc.Generator[IteratorOutput, None, None]
                 iterate(settings: iterate.settings, file_or_filename: Union[ifcopenshell.file.file, str], num_threads: int = 1, include: Optional[Union[list[ifcopenshell.entity_instance.entity_instance], list[str]]] = None, exclude: Optional[Union[list[ifcopenshell.entity_instance.entity_instance], list[str]]] = None, *, with_progress: Literal[True] = True, cache: Optional[str] = None, serializer_settings: Optional[iterate.serializer_settings] = None, geometry_library: GEOMETRY_LIBRARY = 'opencascade') -> collections.abc.Generator[tuple[int, IteratorOutput], None, None]
                 iterate(settings: iterate.settings, file_or_filename: Union[ifcopenshell.file.file, str], num_threads: int = 1, include: Optional[Union[list[ifcopenshell.entity_instance.entity_instance], list[str]]] = None, exclude: Optional[Union[list[ifcopenshell.entity_instance.entity_instance], list[str]]] = None, *, with_progress: bool = False, cache: Optional[str] = None, serializer_settings: Optional[iterate.serializer_settings] = None, geometry_library: GEOMETRY_LIBRARY = 'opencascade') -> collections.abc.Generator[Union[IteratorOutput, tuple[int, IteratorOutput]], None, None]

   Get a geometry iterator for the provided file.

   :param cache: .h5 cache filepath (might not exist, will be created).
   :param serializer_settings: Settings for cache serializer. Required if `cache` is provided.


.. py:function:: make_shape_function(fn)

.. py:function:: map_shape(settings: map_shape.settings, inst: ifcopenshell.entity_instance.entity_instance) -> ifcopenshell.ifcopenshell_wrapper.item

   Returns an interpretation of the geometry encoded as per IfcOpenShell's taxonomy layer.
   In many cases this is somewhat equivalent to the raw IFC data (but schema-agnostic in C++), but
   in other cases such as IfcParameterizedProfileDef the returned item is the equivalent
   of an explicit composite curve.

   >>> point = ifc_file.by_type('IfcCartesianPoint')[0]
   >>> ifcopenshell.geom.map_shape(ifcopenshell.geom.settings(), point).components
   (0.0, 0.0, 0.0)


.. py:function:: transform_string(v: Union[str, serializers.buffer]) -> serializers.buffer

.. py:function:: wrap_shape_creation(settings: wrap_shape_creation.settings, shape: ifcopenshell.ifcopenshell_wrapper.Element)

.. py:data:: CLASH_TYPE_ITEMS
   :value: ('protrusion', 'pierce', 'collision', 'clearance')


.. py:data:: ClashType

.. py:data:: GEOMETRY_LIBRARY

.. py:data:: IteratorOutput

.. py:data:: SERIALIZER_SETTING

.. py:data:: SETTING

.. py:data:: ShapeElementType

.. py:data:: ShapeType

.. py:data:: T

.. py:data:: has_occ
   :value: True


.. py:data:: serialise

.. py:data:: tesselate

