:py:mod:`ifcopenshell.validate`
===============================

.. py:module:: ifcopenshell.validate

.. autoapi-nested-parse::

   Data validation module


   Can be used to run validation on IFC file from the command line:

   .. code-block:: bash

       python -m ifcopenshell.validate /path/to/model.ifc --rules

   Available flags:

   - ``--rules``: Also check express rules.
   - ``--json``: Produce JSON output.
   - ``--fields``: Output more detailed information about failed entities (available only with ``--json``).



Module Contents
---------------

.. py:exception:: ValidationError(message, attribute=None)

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


   .. py:attribute:: attribute


.. py:class:: LogDetectionHandler(level=NOTSET)

   Bases: :py:obj:`logging.Handler`


   Handler instances dispatch logging events to specific destinations.

   The base handler class. Acts as a placeholder which defines the Handler
   interface. Handlers can optionally use Formatter instances to format
   records as desired. By default, no formatter is specified; in this case,
   the 'raw' message as determined by record.message is logged.

   Initializes the instance - basically setting the formatter to None
   and the filter list to empty.


   .. py:method:: emit(record)

      Do whatever it takes to actually log the specified logging record.

      This version is intended to be implemented by subclasses and so
      raises a NotImplementedError.



   .. py:attribute:: message_logged
      :value: False



.. py:class:: json_logger

   .. py:method:: log(level, message, *args)


   .. py:method:: set_state(key, value)


   .. py:attribute:: state


   .. py:attribute:: statements
      :value: []



.. py:function:: annotate_inst_attr_pos(inst: ifcopenshell.entity_instance, pos: int) -> str

.. py:function:: assert_valid(attr_type: attribute_types, val: Any, schema: schema_definition, no_throw=False, attr: Optional[attribute] = None)

.. py:function:: assert_valid_inverse(attr: inverse_attribute, val: tuple[ifcopenshell.entity_instance], schema: schema_definition) -> bool

.. py:function:: format(val: Any) -> str

.. py:function:: get_entity_attributes(schema: schema_definition, entity: str) -> tuple[entity_type, tuple[attribute]]

.. py:function:: get_select_members(schema: schema_definition, ty: select_type) -> set[str]

.. py:function:: log_internal_cpp_errors(f: ifcopenshell.file, filename: str, logger: logging.Logger) -> None

.. py:function:: validate(f: Union[ifcopenshell.file, str], logger: logging.Logger, express_rules=False) -> None

   For an IFC population model `f` (or filepath to such a file) validate whether the entity attribute values are correctly supplied. As this
   is a function that is applied after a file has been parsed, certain types of errors in syntax, duplicate
   numeric identifiers or invalidate entity names are not caught by this function. Some of these might have been
   logged and can be retrieved by calling `ifcopenshell.get_log()`. A verification of the type, entity and global
   WHERE rules is also not implemented.

   For every entity instance in the model, it is checked that the entity is not abstract that every attribute value
   is of the correct type and that the inverse attributes are of the correct cardinality.

   Express simple types are checked for their valuation type. For select types it is asserted that the value conforms
   to one of the leaves. For enumerations it is checked that the value is indeed on of the items. For aggregations it
   is checked that the elements and the cardinality conforms. Type declarations (IfcInteger which is an integer) are
   unpacked until one of the above cases is reached.

   It is recommended to supply the path to the file, so that internal C++ errors reported during the parse stage
   are also captured.

   Example:

   .. code:: python

       logger = ifcopenshell.validate.json_logger()
       ifcopenshell.validate.validate("/path/to/model.ifc", logger, express_rules=True)
       from pprint import pprint
       pprint(logger.statements)


.. py:data:: aggregation_type

.. py:data:: attribute

.. py:data:: attribute_types

.. py:data:: entity_attribute_map
   :type:  dict[tuple[str, str], tuple[entity_type, tuple[attribute]]]

.. py:data:: entity_type

.. py:data:: enumeration_type

.. py:data:: filenames

.. py:data:: inverse_attribute

.. py:data:: log_entry_type

.. py:data:: named_type

.. py:data:: schema_definition

.. py:data:: select_members_cache
   :type:  dict[tuple[str, str], set[str]]

.. py:data:: select_type

.. py:data:: simple_type

.. py:data:: simple_type_python_mapping

.. py:data:: type_declaration

