:py:mod:`ifcopenshell.validate`
===============================

.. py:module:: ifcopenshell.validate

.. autoapi-nested-parse::

   Data validation module


   Can be used to run validation on IFC file from the command line:

   .. code-block:: bash

       python -m ifcopenshell.validate /path/to/model.ifc --rules

   ```
   $ python -m ifcopenshell.validate -h
   usage: validate.py [-h] [--rules] [--json] [--fields] [--spf] files [files ...]

   positional arguments:
     files       The IFC file to validate.

   options:
     -h, --help  show this help message and exit
     --rules     Run express rules.
     --json      Output in JSON format.
     --fields    Output more detailed information about failed entities (only with --json).
     --spf       Output entities in SPF format (only with --json).
   ```



Module Contents
---------------

.. py:exception:: ValidationError(message, attribute=None)

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: attribute
      :value: None



.. py:class:: LogDetectionHandler

   Bases: :py:obj:`logging.Handler`


   Handler instances dispatch logging events to specific destinations.

   The base handler class. Acts as a placeholder which defines the Handler
   interface. Handlers can optionally use Formatter instances to format
   records as desired. By default, no formatter is specified; in this case,
   the 'raw' message as determined by record.message is logged.

   Initializes the instance - basically setting the formatter to None
   and the filter list to empty.


   .. py:method:: emit(record)

      Do whatever it takes to actually log the specified logging record.

      This version is intended to be implemented by subclasses and so
      raises a NotImplementedError.



   .. py:attribute:: default_handler


   .. py:attribute:: message_logged
      :value: False



.. py:class:: json_logger

   .. py:method:: log(level, message, *args)


   .. py:method:: set_state(key: str, value: Any)


   .. py:attribute:: state


   .. py:attribute:: statements
      :value: []



.. py:class:: log_entry_type

   Bases: :py:obj:`tuple`


   .. py:attribute:: attribute


   .. py:attribute:: instance


   .. py:attribute:: level


   .. py:attribute:: message


.. py:function:: annotate_inst_attr_pos(inst: Union[ifcopenshell.entity_instance, ifcopenshell.ifcopenshell_wrapper.HeaderEntity], pos: Union[int, tuple[int, Ellipsis]], entity_str: str = '') -> str

   Add a caret annotation to the entity string at the given attribute index.

   :param inst: Instance to annotate.
   :param pos: Attribute index or a tuple of them to annotate.
   :param entity_str: Entity string to annotate. If not provided, ``str(inst)`` is used.

   Example:

   .. code:: python
       annotate_inst_attr_pos(inst, 2)
       # #7=IfcApplication(#6,'0.8.1-alpha241113-xxxxxxx','Bonsai','Bonsai')
       #                                                  ^^^^^^^^


.. py:function:: assert_valid(attr_type: attribute_types, val: Any, schema: schema_definition, no_throw=False, attr: Optional[attribute] = None)

.. py:function:: assert_valid_inverse(attr: inverse_attribute, val: tuple[ifcopenshell.entity_instance], schema: schema_definition) -> bool

.. py:function:: format(val: Any) -> str

.. py:function:: get_entity_attributes(schema: schema_definition, entity: str) -> tuple[entity_type, tuple[attribute, Ellipsis]]

.. py:function:: get_select_members(schema: schema_definition, ty: select_type) -> set[str]

.. py:function:: handle_exception(exc_type, exc_value, exc_traceback)

.. py:function:: log_internal_cpp_errors(f: ifcopenshell.file, filename: str, logger: Union[logging.Logger, json_logger]) -> None

.. py:function:: to_string_header_entity(header_entity)

   Recreate IFC header string representation, like FILE_NAME(...)


.. py:function:: validate(f: Union[ifcopenshell.file, str], logger: Union[logging.Logger, json_logger], express_rules=False) -> None

   For an IFC population model `f` (or filepath to such a file) validate whether the entity attribute values are correctly supplied. As this
   is a function that is applied after a file has been parsed, certain types of errors in syntax, duplicate
   numeric identifiers or invalidate entity names are not caught by this function. Some of these might have been
   logged and can be retrieved by calling `ifcopenshell.get_log()`. A verification of the type, entity and global
   WHERE rules is also not implemented.

   For every entity instance in the model, it is checked that the entity is not abstract that every attribute value
   is of the correct type and that the inverse attributes are of the correct cardinality.

   Express simple types are checked for their valuation type. For select types it is asserted that the value conforms
   to one of the leaves. For enumerations it is checked that the value is indeed on of the items. For aggregations it
   is checked that the elements and the cardinality conforms. Type declarations (IfcInteger which is an integer) are
   unpacked until one of the above cases is reached.

   It is recommended to supply the path to the file, so that internal C++ errors reported during the parse stage
   are also captured.

   Example:

   .. code:: python

       logger = ifcopenshell.validate.json_logger()
       ifcopenshell.validate.validate("/path/to/model.ifc", logger, express_rules=True)
       from pprint import pprint
       pprint(logger.statements)


.. py:function:: validate_guid(guid: str) -> Union[str, None]

   Check if a given guid is valid.

   Don't check for `None` as `None` guid will trigger "non-optional" validation error either way.

   :return: `None` if guid is valid, otherwise a string with an error message.


.. py:function:: validate_ifc_applications(f: ifcopenshell.file, logger: Union[logging.Logger, json_logger]) -> None

.. py:function:: validate_ifc_header(f: Union[ifcopenshell.file, ifcopenshell.simple_spf.file], logger: Union[logging.Logger, json_logger]) -> None

.. py:data:: EllipsisType

.. py:data:: aggregation_type

.. py:data:: attribute

.. py:data:: attribute_types

.. py:data:: entity_attribute_map
   :type:  dict[tuple[str, str], tuple[entity_type, tuple[attribute, Ellipsis]]]

.. py:data:: entity_type

.. py:data:: enumeration_type

.. py:data:: inverse_attribute

.. py:data:: named_type

.. py:data:: schema_definition

.. py:data:: select_members_cache
   :type:  dict[tuple[str, str], set[str]]

.. py:data:: select_type

.. py:data:: simple_type

.. py:data:: simple_type_python_mapping

.. py:data:: type_declaration

