:py:mod:`ifcpatch.recipes.ConvertPropertiesToQuantities`
========================================================

.. py:module:: ifcpatch.recipes.ConvertPropertiesToQuantities


Module Contents
---------------

.. py:class:: Patcher(src, file, logger, property_name=None, quantity_name=None)


   
   Converts a property to a standardised quantity

   IFC can store arbitrary key value metadata associated with a elements
   known as properties and quantities. The difference between the two is
   that quantities specifically measure physical dimensions, and can be
   used parametrically. A collection of standardised quantities have also
   been published by buildingSMART. Using standardised quantities can help
   automate BIM workflows, instead of arbitrary properties.

   Sometimes, proprietary BIM software incorrectly stores quantities and
   properties. This patch lets you convert these incorrect properties to
   standardised quantities instead.

   The existing property will not be removed.

   :param property_name: The name of the property to convert into a
       quantity. The name of the property set is not considered.
   :type property_name: str
   :param quantity_name: The name of the quantity that this property should
       be stored in. This should be a standard name that is one of the
       quantity names of a buildingSMART quantity template. For example, it
       may be "NetSideArea" for walls, which exists in
       Qto_WallBaseQuantities. The quantity set name will be based on the
       standard buildingSMART quantity template.
   :type quantity_name: str

   Example:

   .. code:: python

       # Any property named "Area" is converted to a quantity named
       # "NetSideArea", if that standardised quantity exists.
       ifcpatch.execute({"input": "input.ifc", "file": model, "recipe": "ConvertPropertiesToQuantities", "arguments": ["Area", "NetSideArea"]})

   .. py:method:: get_qto_name(ifc_class)


   .. py:method:: get_qto_templates(ifc_class)


   .. py:method:: patch()


   .. py:method:: process_product(product, definitions)



