:py:mod:`ifctester.facet`
=========================

.. py:module:: ifctester.facet


Module Contents
---------------

.. py:class:: Attribute(name='Name', value=None, cardinality: Cardinality = 'required', instructions=None)

   Bases: :py:obj:`Facet`


   .. py:method:: filter(ifc_file: ifcopenshell.file, elements: Optional[list[ifcopenshell.entity_instance]]) -> list[ifcopenshell.entity_instance]


   .. py:attribute:: applicability_templates
      :value: ['Data where the {name} is {value}', 'Data where the {name} is provided']



   .. py:attribute:: parameters
      :value: ['name', 'value', '@cardinality', '@instructions']



   .. py:attribute:: prohibited_templates
      :value: ['The {name} shall not be {value}', 'The {name} shall not be provided']



   .. py:attribute:: requirement_templates
      :value: ['The {name} shall be {value}', 'The {name} shall be provided']



.. py:class:: AttributeResult(is_pass: bool, reason: Optional[dict[str, Any]] = None)

   Bases: :py:obj:`Result`


   .. py:method:: to_string()


.. py:class:: Classification(value=None, system=None, uri=None, cardinality: Cardinality = 'required', instructions=None)

   Bases: :py:obj:`Facet`


   .. py:method:: filter(ifc_file: ifcopenshell.file, elements: Optional[list[ifcopenshell.entity_instance]]) -> list[ifcopenshell.entity_instance]


   .. py:attribute:: applicability_templates
      :value: ['Data having a {system} reference of {value}', 'Data classified using {system}', 'Data...



   .. py:attribute:: parameters
      :value: ['value', 'system', '@uri', '@cardinality', '@instructions']



   .. py:attribute:: prohibited_templates
      :value: ['Shall not have a {system} reference of {value}', 'Shall not be classified using {system}',...



   .. py:attribute:: requirement_templates
      :value: ['Shall have a {system} reference of {value}', 'Shall be classified using {system}', 'Shall be...



.. py:class:: ClassificationResult(is_pass: bool, reason: Optional[dict[str, Any]] = None)

   Bases: :py:obj:`Result`


   .. py:method:: to_string()


.. py:class:: Entity(name='IFCWALL', predefinedType=None, instructions=None)

   Bases: :py:obj:`Facet`


   .. py:method:: filter(ifc_file: ifcopenshell.file, elements: Optional[list[ifcopenshell.entity_instance]] = None) -> list[ifcopenshell.entity_instance]


   .. py:attribute:: applicability_templates
      :value: ['All {name} data of type {predefinedType}', 'All {name} data']



   .. py:attribute:: parameters
      :value: ['name', 'predefinedType', '@instructions']



   .. py:attribute:: prohibited_templates
      :value: ['Shall not be {name} data of type {predefinedType}', 'Shall not be {name} data']



   .. py:attribute:: requirement_templates
      :value: ['Shall be {name} data of type {predefinedType}', 'Shall be {name} data']



.. py:class:: EntityResult(is_pass: bool, reason: Optional[dict[str, Any]] = None)

   Bases: :py:obj:`Result`


   .. py:method:: to_string()


.. py:class:: Facet(*parameters)

   .. py:method:: asdict(clause_type: str) -> dict[str, Any]


   .. py:method:: filter(ifc_file: ifcopenshell.file, elements: Optional[list[ifcopenshell.entity_instance]]) -> list[ifcopenshell.entity_instance]


   .. py:method:: get_usage() -> Cardinality


   .. py:method:: parse(xml)


   .. py:method:: to_ids_value(parameter: Union[str, Restriction, list]) -> dict[str, Any]


   .. py:method:: to_string(clause_type: str, specification: Optional[ifctester.ids.Specification] = None, requirement: Optional[Facet] = None) -> str


   .. py:attribute:: cardinality
      :type:  Cardinality


   .. py:attribute:: failures
      :type:  list[FacetFailure]
      :value: []



   .. py:attribute:: passed_entities
      :type:  set[ifcopenshell.entity_instance]


   .. py:attribute:: status
      :value: None



.. py:class:: FacetFailure

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: element
      :type:  ifcopenshell.entity_instance


   .. py:attribute:: reason
      :type:  str


.. py:class:: Material(value=None, uri=None, cardinality: Cardinality = 'required', instructions=None)

   Bases: :py:obj:`Facet`


   .. py:method:: filter(ifc_file: ifcopenshell.file, elements: Optional[list[ifcopenshell.entity_instance]]) -> list[ifcopenshell.entity_instance]


   .. py:attribute:: applicability_templates
      :value: ['All data with a {value} material', 'All data with a material']



   .. py:attribute:: parameters
      :value: ['value', '@uri', '@cardinality', '@instructions']



   .. py:attribute:: prohibited_templates
      :value: ['Shall not have a material of {value}', 'Shall not have a material']



   .. py:attribute:: requirement_templates
      :value: ['Shall have a material of {value}', 'Shall have a material']



.. py:class:: MaterialResult(is_pass: bool, reason: Optional[dict[str, Any]] = None)

   Bases: :py:obj:`Result`


   .. py:method:: to_string()


.. py:class:: PartOf(name='IFCWALL', predefinedType=None, relation=None, cardinality: Cardinality = 'required', instructions=None)

   Bases: :py:obj:`Facet`


   .. py:method:: asdict(clause_type: str) -> dict[str, Any]


   .. py:method:: filter(ifc_file: ifcopenshell.file, elements: Optional[list[ifcopenshell.entity_instance]]) -> list[ifcopenshell.entity_instance]


   .. py:method:: get_parent(element)


   .. py:method:: parse(xml)


   .. py:attribute:: applicability_templates
      :value: ['An element with an {relation} relationship with an {name}', 'An element with an {relation}...



   .. py:attribute:: parameters
      :value: ['name', 'predefinedType', '@relation', '@cardinality', '@instructions']



   .. py:attribute:: prohibited_templates
      :value: ['An element must not have an {relation} relationship with an {name}', 'An element must not have...



   .. py:attribute:: requirement_templates
      :value: ['An element must have an {relation} relationship with an {name} of predefined type...



.. py:class:: PartOfResult(is_pass: bool, reason: Optional[dict[str, Any]] = None)

   Bases: :py:obj:`Result`


   .. py:method:: to_string()


.. py:class:: Property(propertySet='Property_Set', baseName='PropertyName', value=None, dataType=None, uri=None, cardinality: Cardinality = 'required', instructions=None)

   Bases: :py:obj:`Facet`


   .. py:method:: filter(ifc_file: ifcopenshell.file, elements: Optional[list[ifcopenshell.entity_instance]]) -> list[ifcopenshell.entity_instance]


   .. py:method:: get_properties(pset)


   .. py:attribute:: applicability_templates
      :value: ['Elements with {baseName} data of {value} in the dataset {propertySet}', 'Elements with...



   .. py:attribute:: parameters
      :value: ['propertySet', 'baseName', 'value', '@dataType', '@uri', '@cardinality', '@instructions']



   .. py:attribute:: prohibited_templates
      :value: ['{baseName} data shall not be {value} and in the dataset {propertySet}', '{baseName} data shall...



   .. py:attribute:: requirement_templates
      :value: ['{baseName} data shall be {value} and in the dataset {propertySet}', '{baseName} data shall be...



.. py:class:: PropertyResult(is_pass: bool, reason: Optional[dict[str, Any]] = None)

   Bases: :py:obj:`Result`


   .. py:method:: to_string()


.. py:class:: Restriction(options=None, base='string')

   .. py:method:: asdict() -> dict[str, Any]


   .. py:method:: parse(ids_dict)


   .. py:attribute:: base
      :value: 'string'



   .. py:attribute:: options


.. py:class:: Result(is_pass: bool, reason: Optional[dict[str, Any]] = None)

   .. py:method:: to_string()


   .. py:attribute:: is_pass


   .. py:attribute:: reason
      :value: None



.. py:function:: cast_to_value(from_value, to_value)

.. py:function:: get_pset(element, pset)

.. py:function:: get_psets(element)

.. py:function:: is_x(value, cast_value)

.. py:data:: Cardinality

