:py:mod:`ifctester.facet`
=========================

.. py:module:: ifctester.facet


Module Contents
---------------

.. py:class:: Attribute(name='Name', value=None, cardinality: Cardinality = 'required', instructions=None)


   Bases: :py:obj:`Facet`

   .. py:method:: __call__(inst: ifcopenshell.entity_instance, logger: Optional[logging.Logger] = None) -> AttributeResult


   .. py:method:: filter(ifc_file: ifcopenshell.file, elements: Optional[list[ifcopenshell.entity_instance]]) -> list[ifcopenshell.entity_instance]



.. py:class:: AttributeResult(is_pass, reason=None)


   Bases: :py:obj:`Result`

   .. py:method:: to_string()



.. py:class:: Classification(value=None, system=None, uri=None, cardinality: Cardinality = 'required', instructions=None)


   Bases: :py:obj:`Facet`

   .. py:method:: __call__(inst: ifcopenshell.entity_instance, logger: Optional[logging.Logger] = None) -> ClassificationResult


   .. py:method:: filter(ifc_file: ifcopenshell.file, elements: Optional[list[ifcopenshell.entity_instance]]) -> list[ifcopenshell.entity_instance]



.. py:class:: ClassificationResult(is_pass, reason=None)


   Bases: :py:obj:`Result`

   .. py:method:: to_string()



.. py:class:: Entity(name='IFCWALL', predefinedType=None, instructions=None)


   Bases: :py:obj:`Facet`

   .. py:method:: __call__(inst: ifcopenshell.entity_instance, logger: Optional[logging.Logger] = None) -> EntityResult


   .. py:method:: filter(ifc_file: ifcopenshell.file, elements: Optional[list[ifcopenshell.entity_instance]] = None) -> list[ifcopenshell.entity_instance]



.. py:class:: EntityResult(is_pass, reason=None)


   Bases: :py:obj:`Result`

   .. py:method:: to_string()



.. py:class:: Facet(*parameters)


   .. py:attribute:: cardinality
      :type: Cardinality

      

   .. py:method:: __call__(inst: ifcopenshell.entity_instance, logger: Optional[logging.Logger] = None) -> Result
      :abstractmethod:


   .. py:method:: asdict(clause_type: str) -> dict[str, Any]


   .. py:method:: filter(ifc_file: ifcopenshell.file, elements: list[ifcopenshell.entity_instance]) -> list[ifcopenshell.entity_instance]


   .. py:method:: get_usage() -> Cardinality


   .. py:method:: parse(xml)


   .. py:method:: to_ids_value(parameter: Union[str, Restriction, list]) -> dict[str, Any]


   .. py:method:: to_string(clause_type: str, specification: Optional[ifctester.ids.Specification] = None, requirement: Optional[Facet] = None)



.. py:class:: Material(value=None, uri=None, cardinality: Cardinality = 'required', instructions=None)


   Bases: :py:obj:`Facet`

   .. py:method:: __call__(inst: ifcopenshell.entity_instance, logger: Optional[logging.Logger] = None) -> MaterialResult


   .. py:method:: filter(ifc_file: ifcopenshell.file, elements: Optional[list[ifcopenshell.entity_instance]]) -> list[ifcopenshell.entity_instance]



.. py:class:: MaterialResult(is_pass, reason=None)


   Bases: :py:obj:`Result`

   .. py:method:: to_string()



.. py:class:: PartOf(name='IFCWALL', predefinedType=None, relation=None, cardinality: Cardinality = 'required', instructions=None)


   Bases: :py:obj:`Facet`

   .. py:method:: __call__(inst: ifcopenshell.entity_instance, logger: Optional[logging.Logger] = None) -> PartOfResult


   .. py:method:: asdict(clause_type: str) -> dict[str, Any]


   .. py:method:: filter(ifc_file: ifcopenshell.file, elements: Optional[list[ifcopenshell.entity_instance]]) -> list[ifcopenshell.entity_instance]


   .. py:method:: get_filled_opening(element)


   .. py:method:: get_nested_whole(element)


   .. py:method:: get_parent(element)


   .. py:method:: get_voided_element(element)


   .. py:method:: parse(xml)



.. py:class:: PartOfResult(is_pass, reason=None)


   Bases: :py:obj:`Result`

   .. py:method:: to_string()



.. py:class:: Property(propertySet='Property_Set', baseName='PropertyName', value=None, dataType=None, uri=None, cardinality: Cardinality = 'required', instructions=None)


   Bases: :py:obj:`Facet`

   .. py:method:: __call__(inst: ifcopenshell.entity_instance, logger: Optional[logging.Logger] = None) -> PropertyResult


   .. py:method:: filter(ifc_file: ifcopenshell.file, elements: Optional[list[ifcopenshell.entity_instance]]) -> list[ifcopenshell.entity_instance]


   .. py:method:: get_properties(pset)



.. py:class:: PropertyResult(is_pass, reason=None)


   Bases: :py:obj:`Result`

   .. py:method:: to_string()



.. py:class:: Restriction(options=None, base='string')


   .. py:method:: __eq__(other)

      Return self==value.


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: asdict() -> dict[str, Any]


   .. py:method:: parse(ids_dict)



.. py:class:: Result(is_pass, reason=None)


   .. py:method:: __bool__()


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: to_string()



.. py:function:: cast_to_value(from_value, to_value)


.. py:function:: get_pset(element, pset)


.. py:function:: get_psets(element)


.. py:data:: Cardinality

   

