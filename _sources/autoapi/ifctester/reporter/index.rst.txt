:py:mod:`ifctester.reporter`
============================

.. py:module:: ifctester.reporter


Module Contents
---------------

.. py:class:: Bcf(ids: ifctester.ids.Ids)


   Bases: :py:obj:`Json`

   .. py:method:: report_failed_entities(requirement: ifctester.facet.Facet) -> list[ifctester.facet.FacetFailure]


   .. py:method:: to_file(filepath: str) -> None



.. py:class:: Console(ids: ifctester.ids.Ids, use_colour=True)


   Bases: :py:obj:`Reporter`

   .. py:method:: print(txt: str, end: Optional[str] = None)


   .. py:method:: report() -> None


   .. py:method:: report_reason(failure: ifctester.facet.FacetFailure) -> None


   .. py:method:: report_specification(specification: ifctester.ids.Specification) -> None


   .. py:method:: set_style(*colours: str)



.. py:class:: Html(ids: ifctester.ids.Ids)


   Bases: :py:obj:`Json`

   .. py:method:: report() -> None


   .. py:method:: to_file(filepath: str) -> None


   .. py:method:: to_string() -> str



.. py:class:: Json(ids: ifctester.ids.Ids)


   Bases: :py:obj:`Reporter`

   .. py:method:: report() -> Results


   .. py:method:: report_failed_entities(requirement: ifctester.facet.Facet) -> list[ResultsFailedEntity]


   .. py:method:: report_specification(specification: ifctester.ids.Specification) -> ResultsSpecification


   .. py:method:: to_file(filepath: str) -> None


   .. py:method:: to_string() -> str



.. py:class:: Ods(ids: ifctester.ids.Ids, excel_safe=False)


   Bases: :py:obj:`Json`

   .. py:method:: excel_safe_spreadsheet_name(name: str) -> str


   .. py:method:: to_file(filepath: str) -> None



.. py:class:: Reporter(ids: ifctester.ids.Ids)


   .. py:method:: report(ids)


   .. py:method:: to_string()


   .. py:method:: write(filepath)



.. py:class:: Results


   Bases: :py:obj:`TypedDict`

   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.

   .. py:attribute:: date
      :type: str

      

   .. py:attribute:: filename
      :type: str

      

   .. py:attribute:: filepath
      :type: str

      

   .. py:attribute:: percent_checks_pass
      :type: ResultsPercent

      

   .. py:attribute:: percent_requirements_pass
      :type: ResultsPercent

      

   .. py:attribute:: percent_specifications_pass
      :type: ResultsPercent

      

   .. py:attribute:: specifications
      :type: list[ResultsSpecification]

      

   .. py:attribute:: status
      :type: bool

      

   .. py:attribute:: title
      :type: str

      

   .. py:attribute:: total_checks
      :type: int

      

   .. py:attribute:: total_checks_fail
      :type: int

      

   .. py:attribute:: total_checks_pass
      :type: int

      

   .. py:attribute:: total_requirements
      :type: int

      

   .. py:attribute:: total_requirements_fail
      :type: int

      

   .. py:attribute:: total_requirements_pass
      :type: int

      

   .. py:attribute:: total_specifications
      :type: int

      

   .. py:attribute:: total_specifications
      :type: int

      

   .. py:attribute:: total_specifications_fail
      :type: int

      

   .. py:attribute:: total_specifications_pass
      :type: int

      


.. py:class:: ResultsRequirement


   Bases: :py:obj:`TypedDict`

   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.

   .. py:attribute:: description
      :type: str

      

   .. py:attribute:: failed_entities
      :type: list[ResultsFailedEntity]

      

   .. py:attribute:: percent_pass
      :type: ResultsPercent

      

   .. py:attribute:: status
      :type: bool

      

   .. py:attribute:: total_applicable
      :type: int

      

   .. py:attribute:: total_fail
      :type: int

      

   .. py:attribute:: total_pass
      :type: int

      


.. py:class:: ResultsSpecification


   Bases: :py:obj:`TypedDict`

   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.

   .. py:attribute:: applicability
      :type: list[str]

      

   .. py:attribute:: description
      :type: str

      

   .. py:attribute:: instructions
      :type: str

      

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: percent_applicable_pass
      :type: ResultsPercent

      

   .. py:attribute:: percent_checks_pass
      :type: ResultsPercent

      

   .. py:attribute:: required
      :type: bool

      

   .. py:attribute:: requirements
      :type: list[ResultsRequirement]

      

   .. py:attribute:: status
      :type: bool

      

   .. py:attribute:: total_applicable
      :type: int

      

   .. py:attribute:: total_applicable_fail
      :type: int

      

   .. py:attribute:: total_applicable_pass
      :type: int

      

   .. py:attribute:: total_checks
      :type: int

      

   .. py:attribute:: total_checks_fail
      :type: int

      

   .. py:attribute:: total_checks_pass
      :type: int

      


.. py:class:: Txt(ids: ifctester.ids.Ids)


   Bases: :py:obj:`Console`

   .. py:method:: print(txt: str, end: Optional[str] = None)


   .. py:method:: to_file(filepath: str) -> None


   .. py:method:: to_string() -> None



.. py:data:: ResultsFailedEntity

   

.. py:data:: ResultsPercent

   

.. py:data:: cwd

   

