:py:mod:`bsdd`
==============

.. py:module:: bsdd


Module Contents
---------------

.. py:class:: ClassContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: activationDateUtc
      :type:  str


   .. py:attribute:: childClassReferences
      :type:  list[ClassReferenceContractV1]


   .. py:attribute:: classProperties
      :type:  list[ClassPropertyContractV1]


   .. py:attribute:: classRelations
      :type:  list[ClassRelationContractV1]


   .. py:attribute:: classType
      :type:  str


   .. py:attribute:: code
      :type:  str


   .. py:attribute:: countriesOfUse
      :type:  list[str]


   .. py:attribute:: countryOfOrigin
      :type:  str


   .. py:attribute:: creatorLanguageCode
      :type:  str


   .. py:attribute:: deActivationDateUtc
      :type:  str


   .. py:attribute:: definition
      :type:  str


   .. py:attribute:: deprecationExplanation
      :type:  str


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: dictionaryUri
      :type:  str


   .. py:attribute:: documentReference
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: parentClassReference
      :type:  ClassReferenceContractV1


   .. py:attribute:: referenceCode
      :type:  str


   .. py:attribute:: relatedIfcEntityNames
      :type:  list[str]


   .. py:attribute:: replacedObjectCodes
      :type:  list[str]


   .. py:attribute:: replacingObjectCodes
      :type:  list[str]


   .. py:attribute:: revisionDateUtc
      :type:  str


   .. py:attribute:: revisionNumber
      :type:  int


   .. py:attribute:: status
      :type:  str


   .. py:attribute:: subdivisionsOfUse
      :type:  list[str]


   .. py:attribute:: synonyms
      :type:  list[str]


   .. py:attribute:: uid
      :type:  str


   .. py:attribute:: uri
      :type:  str


   .. py:attribute:: versionDateUtc
      :type:  str


   .. py:attribute:: versionNumber
      :type:  int


   .. py:attribute:: visualRepresentationUri
      :type:  str


.. py:class:: ClassListItemContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: children
      :type:  list[ClassListItemContractV1]


   .. py:attribute:: classType
      :type:  str


   .. py:attribute:: code
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: parentClassCode
      :type:  str


   .. py:attribute:: referenceCode
      :type:  str


   .. py:attribute:: uri
      :type:  str


.. py:class:: ClassPropertyContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: allowedValues
      :type:  list[ClassPropertyValueContractV1]


   .. py:attribute:: dataType
      :type:  str


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: dimension
      :type:  str


   .. py:attribute:: dimensionAmountOfSubstance
      :type:  int


   .. py:attribute:: dimensionElectricCurrent
      :type:  int


   .. py:attribute:: dimensionLength
      :type:  int


   .. py:attribute:: dimensionLuminousIntensity
      :type:  int


   .. py:attribute:: dimensionMass
      :type:  int


   .. py:attribute:: dimensionThermodynamicTemperature
      :type:  int


   .. py:attribute:: dimensionTime
      :type:  int


   .. py:attribute:: dynamicParameterPropertyCodes
      :type:  list[str]


   .. py:attribute:: example
      :type:  str


   .. py:attribute:: isDynamic
      :type:  bool


   .. py:attribute:: isRequired
      :type:  bool


   .. py:attribute:: isWritable
      :type:  bool


   .. py:attribute:: maxExclusive
      :type:  float


   .. py:attribute:: maxInclusive
      :type:  float


   .. py:attribute:: minExclusive
      :type:  float


   .. py:attribute:: minInclusive
      :type:  float


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: pattern
      :type:  str


   .. py:attribute:: physicalQuantity
      :type:  str


   .. py:attribute:: predefinedValue
      :type:  str


   .. py:attribute:: propertyCode
      :type:  str


   .. py:attribute:: propertyDictionaryName
      :type:  str


   .. py:attribute:: propertySet
      :type:  str


   .. py:attribute:: propertyStatus
      :type:  str


   .. py:attribute:: propertyUri
      :type:  str


   .. py:attribute:: propertyValueKind
      :type:  str


   .. py:attribute:: qudtCodes
      :type:  list[str]


   .. py:attribute:: symbol
      :type:  str


   .. py:attribute:: units
      :type:  list[str]


   .. py:attribute:: uri
      :type:  str


.. py:class:: ClassPropertyValueContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: code
      :type:  str


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: sortNumber
      :type:  int


   .. py:attribute:: uri
      :type:  str


   .. py:attribute:: value
      :type:  str


.. py:class:: ClassReferenceContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: code
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: uri
      :type:  str


.. py:class:: ClassRelationContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: fraction
      :type:  float


   .. py:attribute:: relatedClassName
      :type:  str


   .. py:attribute:: relatedClassUri
      :type:  str


   .. py:attribute:: relationType
      :type:  str


   .. py:attribute:: uri
      :type:  str


.. py:class:: ClassSearchResponseClassContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: classType
      :type:  str


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: dictionaryName
      :type:  str


   .. py:attribute:: dictionaryUri
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: parentClassName
      :type:  str


   .. py:attribute:: referenceCode
      :type:  str


   .. py:attribute:: relatedIfcEntityNames
      :type:  list[str]


   .. py:attribute:: uri
      :type:  str


.. py:class:: ClassSearchResponseContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: classes
      :type:  list[ClassSearchResponseClassContractV1]


   .. py:attribute:: count
      :type:  int


   .. py:attribute:: offset
      :type:  int


   .. py:attribute:: totalCount
      :type:  int


.. py:class:: ClassSearchResultContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: classType
      :type:  str


   .. py:attribute:: definition
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: referenceCode
      :type:  str


   .. py:attribute:: synonyms
      :type:  list[str]


   .. py:attribute:: uri
      :type:  str


.. py:class:: Client

   .. py:method:: Classification(namespaceUri, version='v3', languageCode='', includeChildClassificationReferences=True)


   .. py:method:: ClassificationSearchOpen(SearchText, version='v1', DomainNamespaceUris=None, RelatedIfcEntities=None)


   .. py:method:: Country(version='v1')


   .. py:method:: Domain(version='v2')


   .. py:method:: Language(version='v1')


   .. py:method:: Property(namespaceUri, version='v2', languageCode='')


   .. py:method:: PropertyValue(namespaceUri, version='v1', languageCode='')


   .. py:method:: ReferenceDocument(version='v1')


   .. py:method:: SearchList(DomainNamespaceUri, version='v2', SearchText='', LanguageCode='', RelatedIfcEntity='')


   .. py:method:: SearchListOpen(DomainNamespaceUri, version='v2', SearchText='', LanguageCode='', RelatedIfcEntity='')


   .. py:method:: Unit(version='v1')


   .. py:method:: get(endpoint, params=None, is_auth_required=False)


   .. py:method:: get_access_token()


   .. py:method:: get_class(class_uri: str, include_class_properties: bool = True, include_child_class_reference: bool = True, include_class_relations: bool = True, include_reverse_relations: bool = False, reverse_relation_dictionary_uris: Optional[list[str]] = None, language_code: str = '', version: int = 1) -> ClassContractV1

      Get Class details
      this API replaces Classification



   .. py:method:: get_classes(dictionary_uri: str, use_nested_classes: bool = True, class_type: ClassTypes = 'Class', language_code: str = '', version: int = 1, offset=0, limit=1000) -> DictionaryClassesResponseContractV1

      Get Dictionary with tree of classes
      This API replaces Domain



   .. py:method:: get_countries(version: int = 1) -> list[CountryContractV1]

      Get list of all Countries
      this API replaces Country



   .. py:method:: get_dictionary(dictionary_uri: str = '', version: int = 1) -> DictionaryResponseContractV1

      Get list of available Dictionaries
      This API replaces Domain



   .. py:method:: get_languages(version: int = 1) -> list[LanguageContractV1]

      Get list of available Languages
      this API replaces Language



   .. py:method:: get_new_access_token()


   .. py:method:: get_properties(dictionary_uri: str, offset: int = 0, limit: int = 100, language_code: str = '', version: int = 1) -> DictionaryPropertiesResponseContractV1

      Get Dictionary with its properties



   .. py:method:: get_property(uri, include_classes=False, language_code='', version: int = 4) -> PropertyContractV4

      Get Property Detail
      this API replaces Property



   .. py:method:: get_property_value(uri, language_code='', version: int = 2) -> PropertyValueContractV4

      Get Property Value details
      this API replaces PropertyValue



   .. py:method:: get_reference_documents(version: int = 1) -> list[ReferenceDocumentContractV1]

      Get list of all ReferenceDocuments
      this API replaces Country



   .. py:method:: get_units(version: int = 1) -> list[UnitContractV1]

      Get list of all Units
      this API replaces Unit



   .. py:method:: login()


   .. py:method:: post()


   .. py:method:: search_class(search_text: str, dictionary_uris: Optional[list[str]] = None, related_ifc_entities: Optional[list[str]] = None, version: int = 1, offset: int = 0, limit: int = 100) -> ClassSearchResponseContractV1

      Search the bSDD database using free text, get list of Classes matching the text and optional additional filters.
      this API replaces ClassificationSearch



   .. py:method:: search_in_dictionary(dictionary_uri: str, search_text: str = '', language_code: str = '', related_ifc_entity: str = '', version: int = 1, offset: int = 0, limit: int = 100) -> SearchInDictionaryResponseContractV1

      Search the bSDD database, get list of Classes without details.
      This version uses new naming and returns one Dictionary instead of a list with always one Dictionary.
      This API replaces SearchList.



   .. py:method:: search_text(search_text: str, type_filter='All', dictionary_uris=None, version: int = 1, offset: int = 0, limit: int = 100) -> TextSearchResponseContractV1

      Search the bSDD database using free text, get list of Classes and/or Properties matching the text.
      Pagination options are for Classes and Properties combined.
      So if result consists of 10 classes and 5 properties, TotalCount will be 15.
      Classes will be listed first, so if you then use Offset=10 and Limit=5, you will get the 5 properties.



   .. py:method:: set_tokens_from_response(response)


   .. py:attribute:: access_token
      :value: ''



   .. py:attribute:: access_token_expires_on


   .. py:attribute:: auth_endpoint
      :value: 'https://buildingsmartservices.b2clogin.com/tfp/buildingsmartservices.onmicrosoft.com/b2c_1_signu...



   .. py:attribute:: baseurl
      :value: 'https://api.bsdd.buildingsmart.org/api/'



   .. py:attribute:: client_id
      :value: '4aba821f-d4ff-498b-a462-c2837dbbba70'



   .. py:attribute:: refresh_token
      :value: ''



   .. py:attribute:: refresh_token_expires_on


   .. py:attribute:: token_endpoint
      :value: 'https://buildingsmartservices.b2clogin.com/tfp/buildingsmartservices.onmicrosoft.com/b2c_1_signu...



.. py:class:: CountryContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: code
      :type:  str


   .. py:attribute:: name
      :type:  str


.. py:class:: DictionaryClassesResponseContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: classes
      :type:  list[ClassListItemContractV1]


   .. py:attribute:: classesCount
      :type:  int


   .. py:attribute:: classesOffset
      :type:  int


   .. py:attribute:: classesTotalCount
      :type:  int


   .. py:attribute:: defaultLanguageCode
      :type:  str


   .. py:attribute:: lastUpdatedUtc
      :type:  str


   .. py:attribute:: license
      :type:  str


   .. py:attribute:: licenseUrl
      :type:  str


   .. py:attribute:: moreInfoUrl
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: organizationCodeOwner
      :type:  str


   .. py:attribute:: organizationNameOwner
      :type:  str


   .. py:attribute:: qualityAssuranceProcedure
      :type:  str


   .. py:attribute:: qualityAssuranceProcedureUrl
      :type:  str


   .. py:attribute:: releaseDate
      :type:  str


   .. py:attribute:: status
      :type:  str


   .. py:attribute:: uri
      :type:  str


   .. py:attribute:: version
      :type:  str


.. py:class:: DictionaryContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: defaultLanguageCode
      :type:  str


   .. py:attribute:: lastUpdatedUtc
      :type:  str


   .. py:attribute:: license
      :type:  str


   .. py:attribute:: licenseUrl
      :type:  str


   .. py:attribute:: moreInfoUrl
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: organizationCodeOwner
      :type:  str


   .. py:attribute:: organizationNameOwner
      :type:  str


   .. py:attribute:: qualityAssuranceProcedure
      :type:  str


   .. py:attribute:: qualityAssuranceProcedureUrl
      :type:  str


   .. py:attribute:: releaseDate
      :type:  str


   .. py:attribute:: status
      :type:  str


   .. py:attribute:: uri
      :type:  str


   .. py:attribute:: version
      :type:  str


.. py:class:: DictionaryPropertiesResponseContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: defaultLanguageCode
      :type:  str


   .. py:attribute:: lastUpdatedUtc
      :type:  str


   .. py:attribute:: license
      :type:  str


   .. py:attribute:: licenseUrl
      :type:  str


   .. py:attribute:: moreInfoUrl
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: organizationCodeOwner
      :type:  str


   .. py:attribute:: organizationNameOwner
      :type:  str


   .. py:attribute:: properties
      :type:  list[PropertyListItemContractV1]


   .. py:attribute:: propertiesCount
      :type:  int


   .. py:attribute:: propertiesOffset
      :type:  int


   .. py:attribute:: propertiesTotalCount
      :type:  int


   .. py:attribute:: qualityAssuranceProcedure
      :type:  str


   .. py:attribute:: qualityAssuranceProcedureUrl
      :type:  str


   .. py:attribute:: releaseDate
      :type:  str


   .. py:attribute:: status
      :type:  str


   .. py:attribute:: uri
      :type:  str


   .. py:attribute:: version
      :type:  str


.. py:class:: DictionaryResponseContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: count
      :type:  int


   .. py:attribute:: dictionaries
      :type:  list[DictionaryContractV1]


   .. py:attribute:: offset
      :type:  int


   .. py:attribute:: totalCount
      :type:  int


.. py:class:: DictionarySearchResultContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: classes
      :type:  list[ClassSearchResultContractV1]


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: uri
      :type:  str


.. py:class:: LanguageContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: isoCode
      :type:  str


   .. py:attribute:: name
      :type:  str


.. py:class:: OAuthReceiver(request, client_address, server)

   Bases: :py:obj:`http.server.BaseHTTPRequestHandler`


   HTTP request handler base class.

   The following explanation of HTTP serves to guide you through the
   code as well as to expose any misunderstandings I may have about
   HTTP (so you don't need to read the code to figure out I'm wrong
   :-).

   HTTP (HyperText Transfer Protocol) is an extensible protocol on
   top of a reliable stream transport (e.g. TCP/IP).  The protocol
   recognizes three parts to a request:

   1. One line identifying the request type and path
   2. An optional set of RFC-822-style headers
   3. An optional data part

   The headers and data are separated by a blank line.

   The first line of the request has the form

   <command> <path> <version>

   where <command> is a (case-sensitive) keyword such as GET or POST,
   <path> is a string containing path information for the request,
   and <version> should be the string "HTTP/1.0" or "HTTP/1.1".
   <path> is encoded using the URL encoding scheme (using %xx to signify
   the ASCII character with hex code xx).

   The specification specifies that lines are separated by CRLF but
   for compatibility with the widest range of clients recommends
   servers also handle LF.  Similarly, whitespace in the request line
   is treated sensibly (allowing multiple spaces between components
   and allowing trailing whitespace).

   Similarly, for output, lines ought to be separated by CRLF pairs
   but most clients grok LF characters just fine.

   If the first line of the request has the form

   <command> <path>

   (i.e. <version> is left out) then this is assumed to be an HTTP
   0.9 request; this form has no optional headers and data part and
   the reply consists of just the data.

   The reply form of the HTTP 1.x protocol again has three parts:

   1. One line giving the response code
   2. An optional set of RFC-822-style headers
   3. The data

   Again, the headers and data are separated by a blank line.

   The response code line has the form

   <version> <responsecode> <responsestring>

   where <version> is the protocol version ("HTTP/1.0" or "HTTP/1.1"),
   <responsecode> is a 3-digit response code indicating success or
   failure of the request, and <responsestring> is an optional
   human-readable string explaining what the response code means.

   This server parses the request and the headers, and then calls a
   function specific to the request type (<command>).  Specifically,
   a request SPAM will be handled by a method do_SPAM().  If no
   such method exists the server sends an error response to the
   client.  If it exists, it is called with no arguments:

   do_SPAM()

   Note that the request name is case sensitive (i.e. SPAM and spam
   are different requests).

   The various request details are stored in instance variables:

   - client_address is the client IP address in the form (host,
   port);

   - command, path and version are the broken-down request line;

   - headers is an instance of email.message.Message (or a derived
   class) containing the header information;

   - rfile is a file object open for reading positioned at the
   start of the optional input data part;

   - wfile is a file object open for writing.

   IT IS IMPORTANT TO ADHERE TO THE PROTOCOL FOR WRITING!

   The first thing to be written must be the response line.  Then
   follow 0 or more header lines, then a blank line, and then the
   actual data (if any).  The meaning of the header lines depends on
   the command executed by the server; in most cases, when data is
   returned, there should be at least one header line of the form

   Content-type: <type>/<subtype>

   where <type> and <subtype> should be registered MIME types,
   e.g. "text/html" or "text/plain".



   .. py:method:: do_GET()


.. py:class:: PropertyClassContractV4

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: code
      :type:  str


   .. py:attribute:: definition
      :type:  str


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: propertySet
      :type:  str


   .. py:attribute:: uri
      :type:  str


.. py:class:: PropertyContractV4

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: activationDateUtc
      :type:  str


   .. py:attribute:: allowedValues
      :type:  list[PropertyValueContractV4]


   .. py:attribute:: code
      :type:  str


   .. py:attribute:: connectedPropertyCodes
      :type:  list[str]


   .. py:attribute:: countriesOfUse
      :type:  list[str]


   .. py:attribute:: countryOfOrigin
      :type:  str


   .. py:attribute:: creatorLanguageCode
      :type:  str


   .. py:attribute:: dataType
      :type:  str


   .. py:attribute:: deActivationDateUtc
      :type:  str


   .. py:attribute:: definition
      :type:  str


   .. py:attribute:: deprecationExplanation
      :type:  str


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: dictionaryUri
      :type:  str


   .. py:attribute:: dimension
      :type:  str


   .. py:attribute:: dimensionAmountOfSubstance
      :type:  int


   .. py:attribute:: dimensionElectricCurrent
      :type:  int


   .. py:attribute:: dimensionLength
      :type:  int


   .. py:attribute:: dimensionLuminousIntensity
      :type:  int


   .. py:attribute:: dimensionMass
      :type:  int


   .. py:attribute:: dimensionThermodynamicTemperature
      :type:  int


   .. py:attribute:: dimensionTime
      :type:  int


   .. py:attribute:: documentReference
      :type:  str


   .. py:attribute:: dynamicParameterPropertyCodes
      :type:  list[str]


   .. py:attribute:: example
      :type:  str


   .. py:attribute:: isDynamic
      :type:  bool


   .. py:attribute:: maxExclusive
      :type:  float


   .. py:attribute:: maxInclusive
      :type:  float


   .. py:attribute:: methodOfMeasurement
      :type:  str


   .. py:attribute:: minExclusive
      :type:  float


   .. py:attribute:: minInclusive
      :type:  float


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: pattern
      :type:  str


   .. py:attribute:: physicalQuantity
      :type:  str


   .. py:attribute:: propertyClasses
      :type:  list[PropertyClassContractV4]


   .. py:attribute:: propertyRelations
      :type:  list[PropertyRelationContractV4]


   .. py:attribute:: propertyValueKind
      :type:  str


   .. py:attribute:: qudtCodes
      :type:  list[str]


   .. py:attribute:: replacedObjectCodes
      :type:  list[str]


   .. py:attribute:: replacingObjectCodes
      :type:  list[str]


   .. py:attribute:: revisionDateUtc
      :type:  str


   .. py:attribute:: revisionNumber
      :type:  int


   .. py:attribute:: status
      :type:  str


   .. py:attribute:: subdivisionsOfUse
      :type:  list[str]


   .. py:attribute:: textFormat
      :type:  str


   .. py:attribute:: uid
      :type:  str


   .. py:attribute:: units
      :type:  list[str]


   .. py:attribute:: uri
      :type:  str


   .. py:attribute:: versionDateUtc
      :type:  str


   .. py:attribute:: versionNumber
      :type:  int


   .. py:attribute:: visualRepresentationUri
      :type:  str


.. py:class:: PropertyListItemContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: code
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: uri
      :type:  str


.. py:class:: PropertyRelationContractV4

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: relatedPropertyName
      :type:  str


   .. py:attribute:: relatedPropertyUri
      :type:  str


   .. py:attribute:: relationType
      :type:  str


   .. py:attribute:: uri
      :type:  str


.. py:class:: PropertyValueContractV4

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: code
      :type:  str


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: sortNumber
      :type:  int


   .. py:attribute:: uri
      :type:  str


   .. py:attribute:: value
      :type:  str


.. py:class:: ReferenceDocumentContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: date
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: title
      :type:  str


.. py:class:: SearchInDictionaryResponseContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: count
      :type:  int


   .. py:attribute:: dictionary
      :type:  DictionarySearchResultContractV1


   .. py:attribute:: offset
      :type:  int


   .. py:attribute:: totalCount
      :type:  int


.. py:class:: TextSearchResponseClassContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: classType
      :type:  str


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: dictionaryName
      :type:  str


   .. py:attribute:: dictionaryUri
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: parentClassName
      :type:  str


   .. py:attribute:: referenceCode
      :type:  str


   .. py:attribute:: relatedIfcEntityNames
      :type:  list[str]


   .. py:attribute:: uri
      :type:  str


.. py:class:: TextSearchResponseContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: classes
      :type:  list[TextSearchResponseClassContractV1]


   .. py:attribute:: count
      :type:  int


   .. py:attribute:: dictionaries
      :type:  list[TextSearchResponseDictionaryContractV1]


   .. py:attribute:: offset
      :type:  int


   .. py:attribute:: properties
      :type:  list[TextSearchResponsePropertyContractV1]


   .. py:attribute:: totalCount
      :type:  int


.. py:class:: TextSearchResponseDictionaryContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: uri
      :type:  str


.. py:class:: TextSearchResponsePropertyContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: dictionaryName
      :type:  str


   .. py:attribute:: dictionaryUri
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: uri
      :type:  str


.. py:class:: UnitContractV1

   Bases: :py:obj:`TypedDict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: code
      :type:  str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: qudtUri
      :type:  str


   .. py:attribute:: symbol
      :type:  str


.. py:function:: apply_ifc_classification_properties(ifc_file, element, classificationProperties)

.. py:data:: ClassTypes

.. py:data:: Status

